#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****





#Désactivation de la journalisation des données chargées via processus TI
#OldCubeLogChanges = CUBEGETLOGCHANGES('z_Admin_Audit_Analyse');
#CUBESETLOGCHANGES('z_Admin_Audit_Analyse', 0);

###################################################
############## Création de la vue de purge  #################
###################################################



# Construction de la vue
vCubePurge='z_Admin_Audit_Analyse';
vSubPurge='}Subset_Purge_Audit_Analyse';
vVuePurge='}Subset_Purge_Audit_Analyset';
ViewDestroy(vCubePurge,vVuePurge);
ViewCreate(vCubePurge,vVuePurge);

#-- z_Stat_Date
vDim='z_Stat_Date';
SubsetDestroy(vDim,vSubPurge);
IF (pAnnee @<> '*');
    vMDXExpression = '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1FILTERBYPATTERN( {TM1SUBSETALL( [z_Stat_Date] )}, "' | pAnnee | '")}, ALL, RECURSIVE
 )}, 0)}' ;
    SubsetCreatebyMDX(vSubPurge, vMDXExpression);
    ViewSubsetAssign(vCubePurge,vVuePurge,vDim,vSubPurge);
ELSE;
    vMDXExpression = '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1SUBSETALL( [z_Stat_Date] )}, ALL, RECURSIVE )}, 0)}';
    SubsetCreatebyMDX(vSubPurge, vMDXExpression);
    ViewSubsetAssign(vCubePurge,vVuePurge,vDim,vSubPurge);
ENDIF;


#-- z_Stat_Utilisateur
vDim='z_Stat_Utilisateur';
SubsetDestroy(vDim,vSubPurge);
vMDXExpression = '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1SUBSETALL( [z_Stat_utilisateur] )}, ALL, RECURSIVE )}, 0)}';
SubsetCreatebyMDX(vSubPurge, vMDXExpression);
ViewSubsetAssign(vCubePurge,vVuePurge,vDim,vSubPurge);

#-- z_Stat_Indicateur
vDim='z_Stat_Indicateur';
SubsetDestroy(vDim,vSubPurge);
SubsetCreate(vDim,vSubPurge);
SubsetElementInsert(vDim,vSubPurge,'Nb_Succesfull_Login',1);
SubsetElementInsert(vDim,vSubPurge,'Nb_Echec_Connexion',1);
SubsetElementInsert(vDim,vSubPurge,'Nb_Connexion',1);
SubsetElementInsert(vDim,vSubPurge,'Nb_StartUp',1);
SubsetElementInsert(vDim,vSubPurge,'Nb_Shutdown',1);
ViewSubsetAssign(vCubePurge,vVuePurge,vDim,vSubPurge);

#######  Suppressoin des données  #######
ViewZeroOut(vCubePurge, vVuePurge);

####### Suppressoin des objets temporaires  pour la purge seulement #######
#Suppression de la vue
ViewDestroy(vCubePurge, vVuePurge);
i = 1 ;
#Suppression des subsets
While (tabdim(vCubePurge, i) @<> '');
   SubsetDestroy(tabdim(vCubePurge, i), vVuePurge);
   i=i+1;
End;

###################################################
##############  Création de la vue source  ##################
###################################################

# Construction de la vue
vCubeSource='z_Admin_Audit';
vSubSource='}Subset_SRC_Audit_' | GetProcessName() ;
vVueSource='}Subset_SRC_Audit_' | GetProcessName() ;
ViewDestroy(vCubeSource,vVueSource);
ViewCreate(vCubeSource,vVueSource);


####### Définition du périmètre de Source #######
#-- z_Stat_DateHeure
vDim='z_Stat_DateHeure';
SubsetDestroy(vDim,vSubSource);
IF (pAnnee @<> '*');
   vMDXExpression = '{TM1FILTERBYPATTERN( {TM1DRILLDOWNMEMBER( {TM1SUBSETALL( [z_Stat_DateHeure] )}, ALL, RECURSIVE )}, "' | pAnnee | '*' | '")}';
   SubsetCreatebyMDX(vSubSource, vMDXExpression);
   ViewSubsetAssign(vCubeSource,vVueSource,vDim,vSubSource);
ELSE;
   vMDXExpression = '{TM1FILTERBYPATTERN( {TM1DRILLDOWNMEMBER( {TM1SUBSETALL( [z_Stat_DateHeure] )}, ALL, RECURSIVE )}, "*")}';
   SubsetCreatebyMDX(vSubSource, vMDXExpression);
   ViewSubsetAssign(vCubeSource,vVueSource,vDim,vSubSource);
ENDIF;

#-- z_Stat_Utilisateur
vDim='z_Stat_Utilisateur';
SubsetDestroy(vDim,vSubSource);
vMDXExpression = '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1SUBSETALL( [z_Stat_Utilisateur] )}, ALL, RECURSIVE )}, 0)}';
SubsetCreatebyMDX(vSubSource, vMDXExpression);
ViewSubsetAssign(vCubeSource,vVueSource,vDim,vSubSource);

#-- z_Stat_Type_Objet
vDim='z_Stat_Type_Objet';
SubsetDestroy(vDim,vSubSource);
vMDXExpression = '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1SUBSETALL( [z_Stat_Type_Objet] )}, ALL, RECURSIVE )}, 0)}';
SubsetCreatebyMDX(vSubSource, vMDXExpression);
ViewSubsetAssign(vCubeSource,vVueSource,vDim,vSubSource);

#-- z_Stat_Indicateur
vDim='z_Stat_Indicateur';
SubsetDestroy(vDim,vSubSource);
SubsetCreate(vDim,vSubSource);
SubsetElementInsert(vDim,vSubSource,'Objet',1);
SubsetElementInsert(vDim,vSubSource,'Description',1);
SubsetElementInsert(vDim,vSubSource,'Heure',1);
SubsetElementInsert(vDim,vSubSource,'Num Evènement',1);
ViewSubsetAssign(vCubeSource,vVueSource,vDim,vSubSource);


####### Périmètre supplémentaire à exclure si vue de source utilisée #######
#Exclure les valeurs calculées par règle/ Pas de règles
ViewExtractSkipRuleValuesSet (vCubeSource,vVueSource,1);
#Exclure les valeurs consolidées
ViewExtractSkipCalcsSet(vCubeSource,vVueSource,1);
#Exclure les valeurs 0
ViewExtractSkipZeroesSet(vCubeSource,vVueSource,1);

####### Associer le cube et la vue source au process TI #######
# Récuperation du nom du fichier source dans le cube du paramètre

DataSourceNameForServer = vCubeSource;
DataSourceCubeView = vVueSource;

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****



vAudit_Annee = SUBST (vDateHeure, 1, 4);
vAudit_Jour_MJ = SUBST (vDateHeure, 5, 4);
vAudit_Jour_JM = vAudit_Annee | '-' | SUBST (vAudit_Jour_MJ, 1, 2) | '-' | SUBST (vAudit_Jour_MJ, 3, 2);


# Mise à jour de la dimension année
IF (DIMIX( 'z_Stat_Annee' , vAudit_Annee) = 0);
   DimensionElementInsert( 'z_Stat_Annee' , '', vAudit_Annee, 'N');
ENDIF;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****





vCube = 'z_Admin_Audit_Analyse';

vAudit_Annee = SUBST (vDateHeure, 1, 4);
vAudit_Jour_MJ = SUBST (vDateHeure, 5, 4);
vAudit_Jour_AJM = vAudit_Annee | '-' | SUBST (vAudit_Jour_MJ, 1, 2) | '-' | SUBST (vAudit_Jour_MJ, 3, 2);


# Consignation du nombre de connexions réussies
IF ((vMesure @= 'Num Evènement') & (SValue @= '144'));
  vAudit_Clients = vClient;
  vAudit_Mesure = 'Nb connexion réussie';
  Cumul = CellGetN(vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Succesfull_Login' ) ;
  CellPutN( Cumul + 1 , vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Succesfull_Login' ) ;
  CellPutN(1 , vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Connexion' ) ;
ENDIF;

# Consignation du nombre de tentatives de connexions
IF( ( vMesure @= 'Num Evènement' ) & ( SValue @= '145' ) ) ;
   vAudit_Clients = 'Non affecté' ;
   Cumul = CellGetN( vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Echec_Connexion' ) ;
   CellPutN( Cumul + 1 , vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Echec_Connexion' ) ;
ENDIF ;

# Consignation du nombre de StartUp
IF( ( vMesure @= 'Num Evènement' ) & ( SValue @= '40' ) ) ;
   vAudit_Clients = 'Non affecté' ;
   Cumul = CellGetN( vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_StartUp' ) ;
   CellPutN( Cumul + 1 , vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_StartUp' ) ;
ENDIF ;
# Consignation du nombre de Shutdown
IF( ( vMesure @= 'Num Evènement' ) & ( SValue @= '41' ) ) ;
   vAudit_Clients = 'Non affecté' ;
   Cumul = CellGetN( vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Shutdown' ) ;
   CellPutN( Cumul + 1 , vCube , vAudit_Jour_AJM , vAudit_Clients , 'Nb_Shutdown' ) ;
ENDIF ;



#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****




####### Suppressoin des objets temporaires  #######
#Suppression de la vue
ViewDestroy (vCubeSource, vVueSource);
i=1;
#Suppression des subsets
While (tabdim(vCubeSource, i) @<> '');
   SubsetDestroy(tabdim(vCubeSource, i), vVueSource);
   i=i+1;
End;

#Activation de la journalisation des données chargées via processus TI
#CUBESETLOGCHANGES('z_Admin_Audit_Analyse', OldCubeLogChanges);


ExecuteProcess( 'DL_z_Admin_Stat_Analyse_Report3' ) ;

ExecuteProcess( 'DL_z_Admin_Stat_Analyse_Report3_Step_6M' ) ;
#endregion