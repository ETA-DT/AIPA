#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################
# Project : Tango - Audit Files To Load - Step 3
# Created by : Anone
# Created at : 29/12/2014
# Modified by :YAD 
# Modified at :14/06/2016
# Modify reason : fix periodes + fichiet output
#########################################


vCube='z_Admin_Audit';
vCubeNumEvent = '}z_Stat_Evenement';
vTimestamp= TIMST( NOW , '\Y\m\d\h\m' ) ;
vDateCour = SUBST( CellGetS( 'z_Admin_Param' , 'CURRENT_PERIOD' , 'STR_VAR1' ) , 1 , 4 )  ;
iCount =0;

#-- Récupération de l'emplacement du répertoire de log
LOG_DIR=CellGetS('z_Admin_Param','REP_LOG','STR_VAR1');

#-- Récuperation du nom du fichier source dans le cube du paramètre
vFile=LOG_DIR | '\'  | pAuditFileName;
DataSourceNameForServer=vFile;

#-- Définition du nom et de l'emplacement du fichier de messages
CTRL_FILE = CellGetS( 'Z_ADMIN_PARAM' , 'REP_OUTPUT' , 'STR_VAR1' ) | '\' | 'Stats_Utilisateurs'|'_'| vDateCour|'_'|  pAuditFileName|'_'| vCube | '_Intégré.txt';
IF( FileExists( CTRL_FILE ) = 1 );
   ASCIIDELETE( CTRL_FILE );
ENDIF;

######################

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****



##-- Récupération timestamp et client sur la balise <Commit>, précédent la transaction à venir

IF (SUBST(vAuditFile_Col1, 1, 7 ) @= '<Commit');
   #Récupération de la date et heure
   vPosStart = SCAN('ts=', vAuditFile_Col1) + 3;
   vDateYMDHMS = SUBST(vAuditFile_Col1, vPosStart, 14);

   #MAJ Dimension z_Stat_DateHeure
   IF (DIMIX('z_Stat_DateHeure', vDateYMDHMS) = 0);
      DimensionElementInsert( 'z_Stat_DateHeure', '', vDateYMDHMS,'N');
   ENDIF;

   #MAJ Dimension z_Stat_Utilisateur pour les évènements "Unsuccessful login"
   IF (DIMIX('z_Stat_Utilisateur', 'Non affecté') = 0);
      DimensionElementInsert('z_Stat_Utilisateur', '', 'Non affecté','N');
   ENDIF;

   #Récupération du client
   vPosStart = SCAN('client=', vAuditFile_Col1) + 7;
   vPosEnd = SCAN('>', vAuditFile_Col1);
   vClient = SUBST(vAuditFile_Col1, vPosStart, vPosEnd - vPosStart);

   IF( DIMIX( 'z_Stat_Utilisateur' , vClient ) = 0 & vClient @<> '' & SUBST( vClient , 1 , 4 ) @<> 't ts' );
      DimensionElementInsert('z_Stat_Utilisateur', '', vClient ,'N' ) ;
      DimensionElementComponentAdd( 'z_Stat_Utilisateur' , 'Utilisateurs_Histo' , vClient , 1 ) ;

# désactivé le 17/05/2016 : on ne reprend pas les utilisateurs historiques dans les analyses par profil, zone, ltp ...
#      DimensionElementComponentAdd( 'z_Stat_Utilisateur' , 'zZone NA' , vClient , 1 ) ;
#      DimensionElementComponentAdd( 'z_Stat_Utilisateur' , 'zProfil NA' , vClient , 1 ) ;
#      DimensionElementComponentAdd( 'z_Stat_Utilisateur' , 'zFonction NA' , vClient , 1 ) ;
#      DimensionElementComponentAdd( 'z_Stat_Utilisateur' , 'zLTP NA' , vClient , 1 ) ;
#      DimensionElementComponentAdd( 'z_Stat_Utilisateur' , 'zCountry_PM NA' , vClient , 1 ) ;

   ENDIF;

ENDIF;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



##-- Récupération timestamp et client sur la balise <Commit>, précédent la transaction à venir

IF( SUBST( vAuditFile_Col1, 1, 7 ) @= '<Commit' ) ;
   #Récupération de la date et heure
   vPosStart = SCAN('ts=', vAuditFile_Col1) + 3;
   vDateYMDHMS = SUBST(vAuditFile_Col1, vPosStart, 14);
   vDateYMD = SUBST (vDateYMDHMS, 1, 8);
   vDateDMY = SUBST (vDateYMD, 7, 2)  | '/' | SUBST (vDateYMD, 5, 2)  | '/' | SUBST (vDateYMD, 1, 4);
   vDateHMS = SUBST (vDateYMDHMS, 9, 2)  | ':' | SUBST (vDateYMDHMS, 11, 2) | ':' | SUBST (vDateYMDHMS, 13, 2);

   #MAJ Dimension z_Stat_DateHeure
   IF (DIMIX('z_Stat_DateHeure', vDateYMDHMS) = 0);
#      DimensionElementInsert( 'z_Stat_DateHeure', '', vDateYMDHMS,'N');
      AttrInsert('z_Stat_DateHeure', '', 'Libelle', 'A');
      AttrInsert('z_Stat_DateHeure', '', 'Annee', 'S');
      AttrInsert('z_Stat_DateHeure', '', 'Mois', 'S');
      AttrInsert('z_Stat_DateHeure', '', 'Jour', 'S');
      AttrPutS(vDateDMY | ' ' | vDateHMS, 'z_Stat_DateHeure', vDateYMDHMS, 'Libelle');
      AttrPutS(SUBST(vDateYMD, 1, 4), 'z_Stat_DateHeure', vDateYMDHMS, 'Annee');
      AttrPutS(SUBST(vDateYMD, 5, 2), 'z_Stat_DateHeure', vDateYMDHMS, 'Mois');
      AttrPutS(SUBST(vDateYMD, 7, 2), 'z_Stat_DateHeure', vDateYMDHMS, 'Jour');
   ENDIF;

   #Récupération du client
   vPosStart = SCAN('client=', vAuditFile_Col1) + 7;
   vPosEnd = SCAN('>', vAuditFile_Col1);
   vClient = SUBST(vAuditFile_Col1, vPosStart, vPosEnd - vPosStart);

   #MAJ Dimension z_Stat_Utilisateur pour les évènements "Unsuccessful login"
   IF (DIMIX('z_Stat_Utilisateur', 'Non affecté') = 0);
#      DimensionElementInsert('z_Stat_Utilisateur', '', 'Non affecté','N');
   ENDIF;

ENDIF;


##-- Ecriture Event / Format Cible : TimeStamp/Utilisateur/TypeObjet/NomObjet/Description/Heure/NumEvent

IF (DIMIX('z_Stat_NumEvent', vAuditFile_Col1) <> 0);
   vCubeNumEvent = '}z_Stat_Evenement';

   vTime = vDateYMDHMS;
   IF (vClient @= '');
      vUser = 'Non affecté';
   ELSE;
      vUser = vClient;
   ENDIF;
   vHour = vDateHMS;

   # Récupération de la valeur ou variable correspondante pour le type d'objet
   vObjType = CellGetS(vCubeNumEvent, vAuditFile_Col1, 'Param_Event_ObjType');
   IF (SUBST(vObjType, 1, 1) @= 'v');
      vObjType = Expand('%' | vObjType | '%');
   ENDIF;
   #MAJ Dimension }Audit_Type_Objet
   IF (DIMIX( 'z_Stat_Type_Objet', vObjType) = 0);
      DimensionElementInsert('z_Stat_Type_Objet', '', vObjType,'N');
   ENDIF;

   # Récupération de la valeur ou variable correspondante pour le nom de l'objet
   vObjName = CellGetS(vCubeNumEvent, vAuditFile_Col1, 'Param_Event_ObjName');
   IF (SUBST(vObjName, 1, 1) @= 'v');
      vObjName = Expand('%' | vObjName | '%');
   ENDIF;

   # Récupération de la valeur ou variable correspondante pour la description
   vDescription = CellGetS(vCubeNumEvent, vAuditFile_Col1, 'Param_Event_Description');
   IF (SUBST(vDescription, 1, 1) @= 'v');
      vDescription = Expand('%' | vDescription | '%');
   ENDIF;

   # Récupération de la valeur ou variable correspondante pour le numéro de l'évènement
   vNumEvent = CellGetS(vCubeNumEvent, vAuditFile_Col1, 'Param_Event_NumEvent');
   IF (SUBST(vNumEvent, 1, 1) @= 'v');
      vNumEvent = Expand('%' | vNumEvent | '%');
   ENDIF;

   IF (vObjType @<> '' & vObjName @<> '' & vDescription @<> '' & vNumEvent @<> '');
      CellPutS(vObjName, vCube, vTime, vUser, vObjType, 'Objet');
      CellPutS(vDescription, vCube, vTime, vUser, vObjType, 'Description');
      CellPutS(vHour, vCube, vTime, vUser, vObjType, 'Heure');
      CellPutS(vNumEvent, vCube, vTime, vUser, vObjType, 'Num Evènement');
   ELSE;
      ItemReject('Merci de compléter la table d administration des évènements pour le numéro d évènement suivant: ' | vAuditFile_Col1 | ',
puis réexécuter le processus z_Admin_AuditFile_#1.');
   ENDIF;

#-- Compteur
iCount = iCount +1;

ELSE;
      Itemskip;
ENDIF;

iCount = iCount +1;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


DimensionSortOrder ('z_Stat_DateHeure', 'ByName', 'Descending','ByName', 'Ascending');

#-- Nombre d'enregistrements
DatasourceASCIIDelimiter = ';';
DatasourceASCIIQuoteCharacter = '';
ASCIIOutput(CTRL_FILE,  'Stats_Utilisateurs_',  pAuditFileName, vCube , '_Intégré_le_'|vTimestamp,'_Nombre d enregistrements : ' | STR(iCount,10,0));




#endregion