#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################
# Project : Tango 
# Created by :NEK
# Created at : 14/03/2013
# Modified by : BTA 
# Modified at :15/11/2013
# Modify reason : Existance Control 
# Modified by : BTA
# Modified at : 29/09/2017
# Modify reason : Ajout de la condition pour copier les indicateurs techniques de l'opÃ©rating lease
#########################################


# BTA 15/11/2013 : Coherence Control 
IF( Dimix( 'Phase', pPhase ) = 0 );
  ItemReject('The variable pPhase ' | pPhase | ' does not exist in the dimension');
  ProcessQuit;
ENDIF;

IF( Dimix( 'LTP_Components', pLTP_Components ) = 0 );
  ItemReject('The variable pLTP_Components ' | pLTP_Components | ' does not exist in the dimension');
  ProcessQuit;
ENDIF;

IF( Dimix( 'Legal_Organization',pLegal_Organization ) = 0 );
  ItemReject('The variable pLegal_Organization ' | pLegal_Organization | ' does not exist in the dimension');
  ProcessQuit;
ENDIF;


DatasourceASCIIDelimiter =';';

zCube = 'RP_LTP';
zProcess = 'DL_Report_LTP_RP_LTP';
zCubeTarget='Report_LTP';

CubeSetLogChanges(zCubeTarget, 0);

nb_lign = 0;
nb_load = 0;

zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');
pCountry=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');

######
ExecuteProcess('DB_zz_Date_Time_loading');
######

#################################################################################
#                                                               RAZ CUBE 
#################################################################################
vViewRAZ = zCubeTarget | '_RAZ';
vSubRAZ = zCubeTarget | '_RAZ';

ViewDestroy( zCubeTarget , vViewRAZ );
vDim='Activity';
SubsetDestroy(vDim,vSubRAZ);
vDim='Currency';
SubsetDestroy(vDim,vSubRAZ);
vDim='LTP_Components';
SubsetDestroy(vDim,vSubRAZ);
vDim='Weighting';
SubsetDestroy(vDim,vSubRAZ);
vDim='Legal_Organization';
SubsetDestroy(vDim,vSubRAZ);
vDim='Period';
SubsetDestroy(vDim,vSubRAZ);
vDim='Phase';
SubsetDestroy(vDim,vSubRAZ);
vDim='Indicator_LTP';
SubsetDestroy(vDim,vSubRAZ);

ViewCreate( zCubeTarget , vViewRAZ );
ViewExtractSkipZeroesSet ( zCubeTarget , vViewRAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCubeTarget , vViewRAZ , 1 );
ViewExtractSkipCalcsSet ( zCubeTarget , vViewRAZ , 1 );

# Activity -> lev0
vDim='Activity';
SubsetCreate(vDim, vSubRAZ);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCubeTarget , vViewRAZ , vDim, vSubRAZ );

# Currency -> lev0
vDim='Currency';
SubsetCreate(vDim, vSubRAZ);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCubeTarget , vViewRAZ , vDim, vSubRAZ );

# LTP_Components -> lev0
vDim='LTP_Components';
SubsetCreate(vDim, vSubRAZ);
IF(ELLEV(vDim, pLTP_Components)>0);
   i=1;
   WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0 & ELISANC(vDim, pLTP_Components, ElemE)=1) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
    i=i+1;
   END;
ELSEIF(ELLEV(vDim, pLTP_Components)=0);
        SubsetElementInsert( vDim , vSubRAZ  , pLTP_Components , 1 );
ENDIF;
ViewSubsetAssign( zCubeTarget  , vViewRAZ , vDim, vSubRAZ );

# Weighting -> lev0
vDim='Weighting';
SubsetCreate(vDim, vSubRAZ);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCubeTarget  , vViewRAZ , vDim, vSubRAZ );

# Legal_Organization -> lev0
vDim='Legal_Organization';
SubsetCreate(vDim, vSubRAZ);
IF(ELLEV(vDim, pLegal_Organization)>0);
   i=1;
   WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0 & ELISANC(vDim, pLegal_Organization, ElemE)=1) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
    i=i+1;
   END;
ELSEIF(ELLEV(vDim, pLegal_Organization)=0);
        SubsetElementInsert( vDim , vSubRAZ  , pLegal_Organization , 1 );
ENDIF;
ViewSubsetAssign( zCubeTarget  , vViewRAZ , vDim, vSubRAZ );

# Period -> lev0
vDim='Period';
SubsetCreate(vDim, vSubRAZ);
i=1;
WHILE( i < DIMSIZ ( vDim)+1 );
         ElemP = DIMNM( vDim , i );
         IF( ELLEV( vDim , ElemP ) = 0  );
             SubsetElementInsert( vDim, vSubRAZ , ElemP , 1 );
         ENDIF;
         i=i+1;
END;
ViewSubsetAssign( zCubeTarget , vViewRAZ , vDim, vSubRAZ );

# Phase -> lev0
vDim='Phase';
SubsetCreate(vDim, vSubRAZ);
IF(ELLEV(vDim, pPhase)>0);
   i=1;
   WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0 & ELISANC(vDim, pPhase, ElemE)=1) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
    i=i+1;
   END;
ELSEIF(ELLEV(vDim, pPhase)=0);
        SubsetElementInsert( vDim , vSubRAZ  , pPhase , 1 );
ENDIF;
ViewSubsetAssign( zCubeTarget , vViewRAZ , vDim, vSubRAZ );

# Indicator_LTP -> lev0
vDim='Indicator_LTP';
SubsetCreate(vDim, vSubRAZ);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSubRAZ  , ElemE , 1 );
    ENDIF;
     i=i+1;
END;
ViewSubsetAssign( zCubeTarget  , vViewRAZ , vDim, vSubRAZ );

ViewZeroOut(zCubeTarget, vViewRAZ);


#################################################################################
#                                                               Source CUBE 
#################################################################################
vView = zCube | '_copy';
vSub = zCube | '_copy';

ViewDestroy( zCube , vView );
vDim='Activity';
SubsetDestroy(vDim,vSub);
vDim='Currency';
SubsetDestroy(vDim,vSub);
vDim='LTP_Components';
SubsetDestroy(vDim,vSub);
vDim='Weighting';
SubsetDestroy(vDim,vSub);
vDim='Legal_Organization';
SubsetDestroy(vDim,vSub);
vDim='Period';
SubsetDestroy(vDim,vSub);
vDim='Phase';
SubsetDestroy(vDim,vSub);
vDim='Indicator_LTP';
SubsetDestroy(vDim,vSub);

ViewCreate( zCube , vView );
ViewExtractSkipZeroesSet ( zCube , vView , 1 );
ViewExtractSkipRuleValuesSet ( zCube , vView , 0 );
ViewExtractSkipCalcsSet ( zCube , vView , 1 );

# Activity -> lev0
vDim='Activity';
SubsetCreate(vDim, vSub);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube , vView , vDim, vSub );

# Currency -> lev0
vDim='Currency';
SubsetCreate(vDim, vSub);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube , vView , vDim, vSub );

# LTP_Components -> lev0
vDim='LTP_Components';
SubsetCreate(vDim, vSub);
IF(ELLEV(vDim, pLTP_Components)>0);
   i=1;
   WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0 & ELISANC(vDim, pLTP_Components, ElemE)=1) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
    i=i+1;
   END;
ELSEIF(ELLEV(vDim, pLTP_Components)=0);
        SubsetElementInsert( vDim , vSub  , pLTP_Components , 1 );
ENDIF;
ViewSubsetAssign( zCube  , vView , vDim, vSub );

# Weighting -> lev0
vDim='Weighting';
SubsetCreate(vDim, vSub);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube  , vView , vDim, vSub );

# Legal_Organization -> lev0
vDim='Legal_Organization';
SubsetCreate(vDim, vSub);
IF(ELLEV(vDim, pLegal_Organization)>0);
   i=1;
   WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0 & ELISANC(vDim, pLegal_Organization, ElemE)=1) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
    i=i+1;
   END;
ELSEIF(ELLEV(vDim, pLegal_Organization)=0);
        SubsetElementInsert( vDim , vSub , pLegal_Organization , 1 );
ENDIF;
ViewSubsetAssign( zCube  , vView , vDim, vSub );

# Period -> lev0
vDim='Period';
SubsetCreate(vDim, vSub);
i=1;
WHILE( i < DIMSIZ ( vDim)+1 );
         ElemP = DIMNM( vDim , i );
         IF( ELLEV( vDim , ElemP ) = 0  );
             SubsetElementInsert( vDim, vSub , ElemP , 1 );
         ENDIF;
         i=i+1;
END;
ViewSubsetAssign( zCube , vView , vDim, vSub );

# Phase -> lev0
vDim='Phase';
SubsetCreate(vDim, vSub);
IF(ELLEV(vDim, pPhase)>0);
   i=1;
   WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0 & ELISANC(vDim, pPhase, ElemE)=1) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
    i=i+1;
   END;
ELSEIF(ELLEV(vDim, pPhase)=0);
        SubsetElementInsert( vDim , vSub  , pPhase , 1 );
ENDIF;
ViewSubsetAssign( zCube , vView , vDim, vSub );

# Indicator_LTP -> lev0
vDim='Indicator_LTP';
SubsetCreate(vDim, vSub);
i=1;
WHILE( i < DIMSIZ ( vDim )+1 );
    ElemE = DIMNM( vDim, i );
    IF ( ELLEV(vDim,ElemE)=0) ;
           SubsetElementInsert( vDim , vSub  , ElemE , 1 );
    ENDIF;
     i=i+1;
END;
ViewSubsetAssign( zCube  , vView , vDim, vSub );

DataSourceType='VIEW';
DatasourceNameForServer = zCube ;
DatasourceNameForClient = zCube ;
DatasourceCubeview = vView ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


Nb_Lign = Nb_Lign + 1;
IF( CellIsUpdateable( zCubeTarget , vActivity , vCurrency , vLTP_Components , vWeighting , vLegal_Organization , vPeriod , vPhase , vIndicator_LTP) = 1 );

	# -- BTA 29/09/2017 : Ajout de la condition pour copier les indicateurs techniques de l'opÃ©rating lease
	IF( DTYPE( 'Indicator_LTP', vIndicator_LTP ) @= 'S' ); 
		CELLPUTS(vValue , zCubeTarget , vActivity , vCurrency , vLTP_Components , vWeighting , vLegal_Organization , vPeriod , vPhase , vIndicator_LTP);
	ELSE;
		CELLPUTN( StringToNumber( vValue ) , zCubeTarget , vActivity , vCurrency , vLTP_Components , vWeighting , vLegal_Organization , vPeriod , vPhase , vIndicator_LTP);
	ENDIF;

   	Nb_Load = Nb_Load + 1;
ENDIF;



#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewDestroy( zCube , vView );
vDim='Activity';
SubsetDestroy(vDim,vSub);
vDim='Currency';
SubsetDestroy(vDim,vSub);
vDim='LTP_Components';
SubsetDestroy(vDim,vSub);
vDim='Weighting';
SubsetDestroy(vDim,vSub);
vDim='Legal_Organization';
SubsetDestroy(vDim,vSub);
vDim='Period';
SubsetDestroy(vDim,vSub);
vDim='Phase';
SubsetDestroy(vDim,vSub);
vDim='Indicator_LTP';
SubsetDestroy(vDim,vSub);

ViewDestroy( zCubeTarget , vViewRAZ );
vDim='Activity';
SubsetDestroy(vDim,vSubRAZ);
vDim='Currency';
SubsetDestroy(vDim,vSubRAZ);
vDim='LTP_Components';
SubsetDestroy(vDim,vSubRAZ);
vDim='Weighting';
SubsetDestroy(vDim,vSubRAZ);
vDim='Legal_Organization';
SubsetDestroy(vDim,vSubRAZ);
vDim='Period';
SubsetDestroy(vDim,vSubRAZ);
vDim='Phase';
SubsetDestroy(vDim,vSubRAZ);
vDim='Indicator_LTP';
SubsetDestroy(vDim,vSubRAZ);

zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');


#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################
zCube_Process = 'ZZ_PROCESS_DETAIL';

CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date');
CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date');
CellPutS( NumberToString(nb_lign) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_Input_records');
CellPutS( NumberToString(nb_load) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_load_records');

IF( Nb_Lign = Nb_Load);
    CellPutS( 'OK' , zCube_Process , zProcess , zDateLoadingStart , 'Status');
ELSE;
    CellPutS( 'KO' , zCube_Process , zProcess , zDateLoadingStart , 'Status');
    ItemReject( 'Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail_instance and  zz_Process_Reject_instan
ce' );
ENDIF; 

#################################################################################
#                                                                             END PROCESS
#################################################################################
CubeSetLogChanges(zCubeTarget, 1);
#endregion