#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################
# Project : Tango - Data Load -> Storage Cube ST_Currency
# Created by : LTH
# Created at : 22/07/2011
# Modified by : MBO
# Modified at : 06/12/2011
# Modify reason :
# Modified by : MRE
# Modified at : 12/04/2012
# Modify reason : Mantis 1299 : add the archive instruction of the csv file
# Modified by : BTA
# Modified at : 29/09/2016
# Modify reason : New Extractor Vector : The name of the file changes 
#########################################


zCube='ST_Currency';

zCubeTC = 'TC_PHASE_VTD_VECTOR';
zCube_Reject='ZZ_PROCESS_REJECT';
zCube_Process='ZZ_PROCESS_DETAIL';

nb_lign=0;
nb_reject=0;
nb_load=0;
nb_reject_normal=0;


zProcess='DL_ST_Currency_MB_STEP2';

zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');

pCountry=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');

# -- BTA 29/09/2016 : Modification due to the migration of Vector 
vBudget = 'Budget' ; 
vForecast1 = 'Forecast_1' ; 
vForecast2 = 'Forecast_2' ; 

# -- Check the name of the phase input in parameter 
IF( pPhase @<> vBudget & pPhase @<> vForecast1 & pPhase @<> vForecast2 ); 

	#-- The Phase specified is not valid
	ItemReject( 'The value ' | pPhase | ' is invalid for pPhase parameter. Must be ' | vBudget  | ', ' | vForecast1  | ' or ' |  vForecast2 );
	ProcessQuit;

ENDIF;

zSource = 'Currency_Rates_MB_' | pPhase;
# -- BTA 13/12/2016 : Modification du repertoire source : REP_DATA_VECTOR
Source_File = CellGetS( 'z_Admin_Param' , 'REP_DATA_VECTOR' , 'STR_VAR1') | '\'|  zsource  | '.csv';

DataSourceNameForServer = Source_File;

IF (FileExists (Source_File) =0);
     ItemReject(  DataSourceNameForServer | ' is not find' );
     ProcessQuit;
ENDIF;

Currency_Target = 'EUR';
CubeSetLogChanges(zCube, 0);

#################################################################################
#                                                               Clear CUBE
#################################################################################


P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube , P_NAME_RAZ );
ViewCreate( zCube , P_NAME_RAZ );

#-- Create subset in Phase
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );

#-- Create subset in Period
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Period' , P_NAME_RAZ );

#-- clear cube
ViewZeroOut( zCube , P_NAME_RAZ );


#-- Delete subset
ViewDestroy( zCube , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Period' , P_NAME_RAZ );



#################################################################################
#                                                               Clear Reject Cube
#################################################################################

######
#Call process DB_zz_Date_Time_loading in order to add the new day in the dimension zz_Date_Time_loading
ExecuteProcess('DB_zz_Date_Time_loading');
######

P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );

#-- Create subset in zz_Date_Time_loading and }Processes
IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );
SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );

ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipCalcsSet ( zCube_Reject , P_NAME_RAZ , 1 );

#-- Clear cube
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****




#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

phase = CellGetS( zCubeTC, Vector_phase, exercice , Vector_period, 'STR_VAR1' );
period = CellGetS( zCubeTC, Vector_phase, exercice , Vector_period, 'STR_VAR2' );

zRecord = Period |';' | Phase| ';' | Currency_Source| ';' | numbertostring( Tx_Cloture) | ';' | numbertostring( Tx_Moyen) | ';' |numbertostring( Tx_Ou
verture);
#################################################################################
#                                                                             REJECT SECTION
#################################################################################
nb_lign=nb_lign+1;

# if thePeriod is empty, this record is reject
IF(Period @='' );
   nb_reject=nb_reject+1;
   zerror_message='The period is empty in the file at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

# if thePhase is empty, this record is reject
IF(Phase @='' );
   nb_reject=nb_reject+1;
   zerror_message='The phase is empty in the file at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

# if theCurrency source is empty, this record is reject
IF(Currency_Source @='' );
   nb_reject=nb_reject+1;
   zerror_message='The Currency_Source is empty in the file at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

# if the Tx_Cloture is empty, this record is reject
IF(Tx_Cloture =0 );
   nb_reject=nb_reject+1;
   zerror_message='The Tx_Cloture is empty in the file at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

# if the Tx_Moyen is empty, this record is reject
IF(Tx_Moyen =0 );
   nb_reject=nb_reject+1;
   zerror_message='The Tx_Moyen is empty in the file at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

#-- if the period is not exists in Period dimension, this record is reject
IF(Dimix('Period', Period) = 0 );
   nb_reject=nb_reject+1;
   zerror_message= Period | ' does not exist in dimension Period at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart ,  'l' | numbertostring(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess  , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

#-- if the period is not exists in Period dimension, this record is reject
IF(Dimix('Phase', Phase) = 0 );
   nb_reject=nb_reject+1;
   zerror_message= Phase | '  does not exist in dimension Phase at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart ,  'l' | numbertostring(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess  , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   ItemSkip;
ENDIF;

#-- if the period is not exists in Period dimension, this record is reject
IF(Dimix('Currency_Codes', Currency_Source) = 0 );
   nb_reject=nb_reject+1;
    zerror_message= Currency_Source | '  does not exist in dimension Currenccy_Codes at line ' |  numbertostring(nb_lign) ;
   CellPuts(zrecord,  zCube_Reject , zProcess , zDateLoadingStart ,  'l' | numbertostring(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess  , zDateLoadingStart , 'l' | numbertostring(nb_reject), 'Error_Message');
   nb_reject_normal=nb_reject_normal+1;
   ItemSkip;
ENDIF;


#####################################################################################"
#                                                                             INPUT SECTION
#################################################################################


#-- Input dans le cube TC_CONTRACT

IF(CellIsUpdateable (zCube, Period,Phase,Currency_Source, Currency_Target , 'TX_CLOTURE') =1);
  IF(Dimix('Period', Period) <> 0 &  Dimix('Phase', Phase)  <> 0 
   &  Dimix('Currency_Codes', Currency_Source) <> 0  &  Period @<> '' 
   & Phase @<>'' & Currency_Source @<>''  & Tx_Cloture <>0  & Tx_Moyen <>0  );

          CellPutN(Tx_Cloture, zCube, Period,Phase,Currency_Source, Currency_Target , 'TX_CLOTURE');
          CellPutN(Tx_Cloture, zCube, Period,'MAN_'|Phase,Currency_Source, Currency_Target , 'TX_CLOTURE');

  ENDIF;
ENDIF;

IF(CellIsUpdateable (zCube, Period,Phase,Currency_Source, Currency_Target , 'TX_MOYEN') =1);
  IF(Dimix('Period', Period) <> 0 &  Dimix('Phase', Phase)  <> 0 &  Dimix('Currency_Codes', Currency_Source) <> 0  
  &  Period @<> '' & Phase @<>'' & Currency_Source @<>''  & Tx_Cloture <>0  & Tx_Moyen <>0  );

          CellPutN(Tx_Moyen, zCube, Period,Phase ,Currency_Source, Currency_Target ,'TX_MOYEN');
          CellPutN(Tx_Moyen, zCube, Period,'MAN_'|phase,Currency_Source, Currency_Target ,'TX_MOYEN');

  ENDIF;
ENDIF;

IF(CellIsUpdateable (zCube, Period,Phase,Currency_Source, Currency_Target , 'TX_OUVERTURE') =1);
  IF(Dimix('Period', Period) <> 0 &  Dimix('Phase', Phase)  <> 0 
  &  Dimix('Currency_Codes', Currency_Source) <> 0  &  Period @<> '' 
  & Phase @<>'' & Currency_Source @<>''  & Tx_Cloture <>0  & Tx_Moyen <>0  );

          CellPutN(Tx_Ouverture, zCube, Period,Phase ,Currency_Source, Currency_Target , 'TX_OUVERTURE');
          CellPutN(Tx_Ouverture, zCube, Period,'MAN_'|Phase,Currency_Source, Currency_Target , 'TX_OUVERTURE');

  ENDIF;
ENDIF;

     nb_load=nb_load+1;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

CubeSetLogChanges(zCube, 1);
# MRE - 12/04/2012 : Mantis 1299 : add the archive instruction of the csv file
#-- Copy the file data in historical directory
ExecuteProcess( 'z_Tools_Data_Transfert' , 'zFile' , zsource , 'zAnnee' , SUBST( period , 1 , 4 ) , 'zMois' , SUBST( period , 6 , 2 )  );


zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             PROCESS with PERIOD and INSTANCE
#################################################################################
#IF (pcountry@='CM');

#zCube_Process_PP = 'ZZ_PROCESS_Detail_Instance';
#pChore='Task3_CM_Export_Vector_Parameter';
#pSource='VTD_VECTOR';
#pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_ACTUAL' , 'STR_VAR1');

#CellPutS(zDateTimeLoadingStart , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'Start_date');
#CellPutS(zDateTimeLoadingEnd , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'End_date');
#CellPutS(numbertostring(nb_lign) , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'Nb_Input_records');
#CellPutS(numbertostring(nb_load) ,  zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry ,psource, 'Nb_load_records');
#IF(nb_lign = nb_load);
  #  CellPutS('OK' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,  'Status');
#else;
  #  CellPutS('KO' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,  'Status');
    #ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
#endif;


#ELSE;
#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################


zCube_Process='ZZ_PROCESS_DETAIL';
CellPutS(zDateTimeLoadingStart , zCube_Process, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) , zCube_Process, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(nb_lign = nb_load);
    CellPutS('OK' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
else;
    CellPutS('KO' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
endif;


#ENDIF;
#################################################################################
#                                                                             END PROCESS
#################################################################################
#endregion