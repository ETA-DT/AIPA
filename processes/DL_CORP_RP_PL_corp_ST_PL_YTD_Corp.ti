#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#################################################################################
# Project : Tango - Decumule des données dans RP_PL_Corp
# Created by : MBO
# Created at : 11/01/2012
# Modified by : MRE
# Modified at : 17/04/2012
# Modify reason : In the ViewZeroOut view, as the source view, all indicators should be taken, not only Indicators by destination
#################################################################################


################### Cubes ###################
zCube_Source = 'ST_PL_YTD_Corp';
zCube_Cible = 'RP_PL_Corp';
zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';

################### Initialisation des compteurs ###################
Nb_Lign = 0;
Nb_Reject = 0;
Nb_Load = 0;


################### Paramètres ###################
zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');
pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_CORPORATE' , 'STR_VAR1');


zProcess = 'DL_CORP_RP_PL_corp_ST_PL_YTD_corp';

################### MAJ de la dimension date ###################
ExecuteProcess('DB_zz_Date_Time_loading');


#################################################################################
#                                                               Purge du cube de rejet
#################################################################################


P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );


###################  Création du subset  dans zz_Date_Time_loading ################### 

IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );


################### Création du subset  dans }Processes ################### 

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );


ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);

###################  Nettoyage du cube ################### 
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

###################  Suppression des subsets ################### 
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );


#################################################################################
#                                                               Purge du cube RP_PL_Corp
#################################################################################


P_NAME_CIBLE = zCube_Cible | '_RAZ';
ViewDestroy( zCube_Cible , P_NAME_CIBLE );
ViewCreate( zCube_Cible , P_NAME_CIBLE );

################### Création du subset  dans Integration_Rate ################### 

IF( SubsetExists( 'Integration_Rate' , P_NAME_CIBLE ) =1 );
    SubsetDeleteAllElements( 'Integration_Rate' , P_NAME_CIBLE);
ELSE;
    SubsetCreate( 'Integration_Rate' , P_NAME_CIBLE );
ENDIF;
SubsetElementInsert( 'Integration_Rate' , P_NAME_CIBLE , 'NO_APP' , 1 );
ViewSubsetAssign( zCube_Cible , P_NAME_CIBLE , 'Integration_Rate' , P_NAME_CIBLE );


################### Création du subset  dans Currency ################### 

IF( SubsetExists( 'Currency' , P_NAME_CIBLE ) =1 );
    SubsetDeleteAllElements( 'Currency' , P_NAME_CIBLE);
ELSE;
    SubsetCreate( 'Currency' , P_NAME_CIBLE );
ENDIF;
SubsetElementInsert( 'Currency' , P_NAME_CIBLE , 'LCL' , 1 );
ViewSubsetAssign( zCube_Cible , P_NAME_CIBLE , 'Currency' , P_NAME_CIBLE );


################### Création du subset  dans Phase ################### 

IF( SubsetExists( 'Phase' , P_NAME_CIBLE ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_CIBLE);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_CIBLE );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_CIBLE , 'ACT' , 1 );
ViewSubsetAssign( zCube_Cible , P_NAME_CIBLE , 'Phase' , P_NAME_CIBLE );


################### Création du subset  dans Period ################### 

IF( SubsetExists( 'Period' , P_NAME_CIBLE ) = 1 );
    SubsetDeleteAllElements( 'Period' , P_NAME_CIBLE);
ELSE;
    SubsetCreate( 'Period' , P_NAME_CIBLE );
ENDIF;
SubsetElementInsert( 'Period' , P_NAME_CIBLE , pPeriod, 1 );
ViewSubsetAssign( zCube_Cible , P_NAME_CIBLE , 'Period' , P_NAME_CIBLE );

################### Création du subset  dans  Indicator_Corp ################### 

IF( SubsetExists( 'Indicator_Corp' , P_NAME_CIBLE ) = 1 );
    SubsetDeleteAllElements( 'Indicator_Corp' , P_NAME_CIBLE);
ELSE;
     SubsetCreate( 'Indicator_Corp' , P_NAME_CIBLE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Indicator_Corp' )+1 );
   ElemM = DIMNM( 'Indicator_Corp' , i );
           # MRE - 17/04/2012 : as the source view, all indicators will be taken in the ViewZeroOut
           IF( ELLEV( 'Indicator_Corp' , ElemM ) = 0 );
                  SubsetElementInsert( 'Indicator_Corp' , P_NAME_CIBLE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible, P_NAME_CIBLE , 'Indicator_Corp' , P_NAME_CIBLE);

###################  Nettoyage du cube ################### 
ViewZeroOut( zCube_Cible , P_NAME_CIBLE );

###################  Suppression des subsets ################### 
ViewDestroy( zCube_Cible , P_NAME_CIBLE );
SubsetDestroy( 'Integration_Rate' , P_NAME_CIBLE );
SubsetDestroy( 'Currency' , P_NAME_CIBLE );
SubsetDestroy( 'Phase' , P_NAME_CIBLE );
SubsetDestroy( 'Period' , P_NAME_CIBLE );
SubsetDestroy( 'Indicator_Corp' , P_NAME_CIBLE );

#################################################################################
#                                                               Vue source du cube ST_PL_YTD_Corp
#################################################################################

P_NAME_SOURCE = zCube_Source | '_RAZ';
ViewDestroy( zCube_Source , P_NAME_SOURCE );
ViewCreate( zCube_Source , P_NAME_SOURCE );

################### Création du subset  dans Integration_Rate ################### 

IF( SubsetExists( 'Integration_Rate' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Integration_Rate' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Integration_Rate' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Integration_Rate' , P_NAME_SOURCE , 'NO_APP' , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Integration_Rate' , P_NAME_SOURCE );


################### Création du subset  dans Currency ################### 

IF( SubsetExists( 'Currency' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Currency' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Currency' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Currency' , P_NAME_SOURCE , 'LCL' , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Currency' , P_NAME_SOURCE );


################### Création du subset  dans Phase ################### 

IF( SubsetExists( 'Phase' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_SOURCE , 'ACT' , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Phase' , P_NAME_SOURCE );


################### Création du subset  dans Period_YTD ################### 

IF( SubsetExists( 'Period_YTD' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Period_YTD' , P_NAME_SOURCE , pPeriod, 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Period_YTD' , P_NAME_SOURCE );

################### Création du subset  dans Nat_Analytique ################### 

IF( SubsetExists( 'Nat_Analytique' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Nat_Analytique' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Nat_Analytique' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Nat_Analytique' , P_NAME_SOURCE , 'Tot_nat_ana', 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Nat_Analytique' , P_NAME_SOURCE );


################### Création du subset  dans Comptes_Comptables ################### 

IF( SubsetExists( 'Comptes_Comptables' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Comptes_Comptables' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Comptes_Comptables' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Comptes_Comptables' , P_NAME_SOURCE , 'Tot_comptes_compta', 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Comptes_Comptables' , P_NAME_SOURCE );


################### Création du subset  dans  Management_Organization_Corp ################### 


IF( SubsetExists( 'Management_Organization_Corp' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Management_Organization_Corp' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Management_Organization_Corp' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Management_Organization_Corp' )+1 );
   ElemM = DIMNM( 'Management_Organization_Corp' , i );
           IF( ELLEV( 'Management_Organization_Corp' , ElemM ) = 0 );
                  SubsetElementInsert( 'Management_Organization_Corp' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Management_Organization_Corp' , P_NAME_SOURCE );

################### Création du subset  dans  Legal_Organization_Corp ################### 


IF( SubsetExists( 'Legal_Organization_Corp' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Legal_Organization_Corp' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Legal_Organization_Corp' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization_Corp' )+1 );
   ElemM = DIMNM( 'Legal_Organization_Corp' , i );
           IF( ELLEV( 'Legal_Organization_Corp' , ElemM ) = 0 );
                  SubsetElementInsert( 'Legal_Organization_Corp' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Legal_Organization_Corp' , P_NAME_SOURCE);

################### Création du subset  dans  Projets ################### 


IF( SubsetExists( 'Projets' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Projets' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Projets' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Projets' )+1 );
   ElemM = DIMNM( 'Projets' , i );
           IF( ELLEV( 'Projets' , ElemM ) = 0 );
                  SubsetElementInsert( 'Projets' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Projets' , P_NAME_SOURCE);

################### Création du subset  dans  Matricules ################### 


IF( SubsetExists( 'Matricules' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Matricules' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Matricules' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Matricules' )+1 );
   ElemM = DIMNM( 'Matricules' , i );
           IF( ELLEV( 'Matricules' , ElemM ) = 0 );
                  SubsetElementInsert( 'Matricules' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Matricules' , P_NAME_SOURCE);

################### Création du subset  dans  Gaap ################### 


IF( SubsetExists( 'Gaap' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Gaap' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Gaap' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Gaap' )+1 );
   ElemM = DIMNM( 'Gaap' , i );
           IF( ELLEV( 'Gaap' , ElemM ) = 0 );
                  SubsetElementInsert( 'Gaap' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Gaap' , P_NAME_SOURCE);

################### Création du subset  dans  Tiers ################### 


IF( SubsetExists( 'Tiers' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Tiers' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Tiers' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Tiers' )+1 );
   ElemM = DIMNM( 'Tiers' , i );
           IF( ELLEV( 'Tiers' , ElemM ) = 0 );
                  SubsetElementInsert( 'Tiers' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Tiers' , P_NAME_SOURCE);

################### Création du subset  dans  Indicator_Corp ################### 


IF( SubsetExists( 'Indicator_Corp' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Indicator_Corp' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'Indicator_Corp' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'Indicator_Corp' )+1 );
   ElemM = DIMNM( 'Indicator_Corp' , i );
           IF( ELLEV( 'Indicator_Corp' , ElemM ) = 0 );
                  SubsetElementInsert( 'Indicator_Corp' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Indicator_Corp' , P_NAME_SOURCE);

###################  Paramètre d'extraction ################### 

ViewExtractSkipZeroesSet ( zCube_Source , P_NAME_SOURCE , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Source , P_NAME_SOURCE , 0 );
ViewExtractSkipCalcsSet ( zCube_Source , P_NAME_SOURCE , 0 );


DatasourceNameForServer = zCube_Source ;
DatasourceCubeview = P_NAME_SOURCE ;




#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

Nb_Lign=Nb_Lign + 1;

#################################################################################
#                                                               Chargement du cube RP_PL_Corp
#################################################################################

IF( CellIsUpdateable( zCube_Cible , vDevise, vGaap, vIntegrationRate, vProjets, vMatricules, vEntite,
     vOrganisation_Man, vTiers, vPeriode_YTD, vPhase, vIndicator ) = 1 );

                CellPutN ( Valeur, zCube_Cible,  vDevise, vGaap, vIntegrationRate, vProjets, vMatricules, vEntite,
                vOrganisation_Man, vTiers, vPeriode_YTD, vPhase, vIndicator);

ENDIF;



Nb_Load=Nb_Load + 1;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****



###################  Suppression des subsets ################### 

ViewDestroy( zCube_Source , P_NAME_SOURCE );

SubsetDestroy( 'Integration_Rate' , P_NAME_SOURCE );
SubsetDestroy( 'Currency' , P_NAME_SOURCE );
SubsetDestroy( 'Phase' , P_NAME_SOURCE );
SubsetDestroy( 'Period_YTD' , P_NAME_SOURCE );
SubsetDestroy( 'Nat_Analytique' , P_NAME_SOURCE );
SubsetDestroy( 'Comptes_Comptables' , P_NAME_SOURCE );
SubsetDestroy( 'Management_Organization_Corp' , P_NAME_SOURCE );
SubsetDestroy( 'Legal_Organization_Corp' , P_NAME_SOURCE );
SubsetDestroy( 'Projets' , P_NAME_SOURCE );
SubsetDestroy( 'Matricules' , P_NAME_SOURCE );
SubsetDestroy( 'Gaap' , P_NAME_SOURCE );
SubsetDestroy( 'Indicator_Corp' , P_NAME_SOURCE );



zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################

CellPutS(zDateTimeLoadingStart , zCube_Process, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) , zCube_Process, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(nb_lign = nb_load);
    CellPutS('OK' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
else;
    CellPutS('KO' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
endif;

#################################################################################
#                                                                             END PROCESS
#################################################################################
#endregion