#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#################################################################################
# Project : Tango - Chargement des donées dans le cube de stockage ST_PL_YTD_Corp
# Created by : MBO
# Created at : 10/01/2012
# Modified by : 
# Modified at : 
# Modify reason :
#################################################################################


################### Cubes ###################
zCube = 'ST_PL_YTD_Corp';
CubeSetLogChanges(zCube, 0);
zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';
zCube_Ind = 'TC_IND_PL_CODA' ;



################### Initialisation des compteurs ###################
Nb_Lign = 0;
nb_ligne = 0;
Nb_Reject = 0;
Nb_Load = 0;


################### Ficher source ###################
zSource = 'Extraction_Coda';
zProcess = 'DL_CORP_ST_PL_YTD_Actual_PL';
Source_File = CellGetS( 'z_Admin_Param' , 'REP_DATA' , 'STR_VAR1') | '\' |  zsource | '.csv';
DataSourceNameForServer = Source_File;

IF (FileExists (Source_File) =0);
     CubeSetLogChanges(zCube, 1);
     ItemReject(  DataSourceNameForServer | ' is not find' );
     ProcessQuit;
ENDIF;


################### Paramètres ###################
zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');
pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_CORPORATE' , 'STR_VAR1');

################### MAJ de la dimension date ###################
ExecuteProcess('DB_zz_Date_Time_loading');


#################################################################################
#                                                               Purge du cube de rejet
#################################################################################


P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );


###################  Création du subset  dans zz_Date_Time_loading ################### 

IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );


################### Création du subset  dans }Processes ################### 

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );


ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);

###################  Nettoyage du cube ################### 
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

###################  Suppression des subsets ################### 
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );



#################################################################################
#                                                              Purge du cube ST_PL_YTD_Corp
#################################################################################

P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube , P_NAME_RAZ );
ViewCreate( zCube , P_NAME_RAZ );


################### Création du subset  dans Phase ################### 

IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'ACT' , 1 );
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );


################### Création du subset  dans Period_YTD ################### 

IF( SubsetExists( 'Period_YTD' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Period_YTD' , P_NAME_RAZ , pPeriod | '_YTD', 1 );
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Period_YTD' , P_NAME_RAZ );

###################  Nettoyage du cube ################### 
#Mantis 2189
#ViewZeroOut( zCube, P_NAME_RAZ );

###################  Suppression des subsets ################### 
#ViewDestroy( zCube , P_NAME_RAZ );
#SubsetDestroy( 'Phase' , P_NAME_RAZ );
#SubsetDestroy( 'Period_YTD' , P_NAME_RAZ );


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

################### Initialisation des variables ###################


##### PROVISOIRE :  A MODIFIER######
#vProjets = ' Code_coda ';
#vTiers = ' Code_coda ';
###############################

IF ( vPhase @= 'REALISE');
     vPhase = 'ACT';
ENDIF;

# Mantis 2196 - Si la période est différente de la periode définie dans le cube z_Admin_Param , pas de purge du cube.

# if the Period is different of the period in the file this record is reject
nb_ligne = nb_ligne + 1;

IF (nb_ligne = 1);
   IF( vPeriode @<> pPeriod );
      zerror_message='Rejected Data : The period in parameter is different of the period in the file at lign ' |  numbertostring(nb_lign) ;
      CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l1', 'Error_Message');
      CubeSetLogChanges(zCube, 1);
      ProcessQuit;
    
   ELSE;
      ExecuteProcess( 'z_Purge_DL_ST', 'Cube_Name' , zCube ,'Cube_View' , P_NAME_RAZ  );
     ENDIF;
ENDIF;



vIndicator = '';
vDevise = ' LCL ';
vIntegrationRate = ' NO_APP ';
vGaap = 'Local_Gaap_Mgmt_tool';

zRecord = vEntite | '-' | vOrganisation_Man| ';' | vPhase | ';' | vDevise | ';' | vNat_analytique | ';' | vComptes | ';' |
vGaap | ';' | vProjets | ';' | vMatricules | ';' | vTiers| ';' | vPeriode | ';' | numbertostring(Valeur);

Nb_Lign=Nb_Lign+1;
#################################################################################
#                                                                             GESTION DES REJETS
#################################################################################


################### PERIODE : La periode est vide , la ligne est rejetée #####################################################

IF( vPeriode @='' );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : La periode est vide à la ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### PERIODE : La periode n'existe pas dans la dimension , la ligne est rejetée #######################################

IF( Dimix(' Period ', vPeriode) = 0  );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées :' | vPeriode | ' absente de la dimension.Ligne ' |  numbertostring( Nb_Lign );

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### PERIODE : Elle est différente de la periode définie dans le cube z_Admin_Param , la ligne est rejetée #####################

IF( vPeriode @<>pPeriod );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : La periode est différente de la periode en paramètre. Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### ORGANISATION MANAGERIALE : Elle n'existe pas dans la dimension , la ligne est rejetée #############################

IF( DIMIX ( 'Management_Organization_Corp' ,vOrganisation_Man) = 0 );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : '| vOrganisation_Man |' est absente de la dimension Management_Organization_Corp . Ligne ' |  numbertostring(
 Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### ORGANISATION LEGALE : Elle n'existe pas dans la dimension , la ligne est rejetée ##################################

IF( DIMIX ( 'Legal_Organization_Corp' ,vEntite) = 0 );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : '| vEntite |' est absente de la dimension Legal_Organization_Corp . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### NATURE ANALYTIQUE : Elle n'existe pas dans la dimension , la ligne est rejetée ####################################

IF( DIMIX ( 'Nat_Analytique' ,vNat_Analytique) = 0 );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : '| vNat_analytique |' est absente de la dimension Nat_Analytique . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### IINDICATEUR : Vérification de la transco dans le cube TC_IND_PL_CODA ########################################

IF ( CellGetS(zCube_Ind , vNat_analytique , vOrganisation_Man , 'STR_VAR1') @='');

   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : ' | vNat_analytique | ';' |vOrganisation_Man| ' est absent du cube de transco TC_IND_PL_CODA. Ligne ' | numbe
rtostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;

ELSE;

   vIndicator = CellGetS(zCube_Ind , vNat_analytique , vOrganisation_Man , 'STR_VAR1');

ENDIF;

################### COMPTE COMPTABLE : Le code n'existe pas dans la dimension , la ligne est rejetée ##################################

IF( Dimix('Comptes_Comptables', vComptes) = 0  );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées :' | vComptes | ' absente de la dimension Comptes_Comptables .Ligne ' |  numbertostring( Nb_Lign );

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### PROJETS : La cellule est vide , la ligne est rejetée ##########################################

IF( vProjets @= ''  );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées :Code Projet vide .Ligne ' |  numbertostring( Nb_Lign );

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### PROJETS : Le code n'existe pas dans la dimension , la ligne est rejetée ##########################################

IF( Dimix(' Projets', vProjets) = 0  );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées :' | vProjets | ' absente de la dimension Projets .Ligne ' |  numbertostring( Nb_Lign );

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;


################### TIERS : Le code n'existe pas dans la dimension , la ligne est rejetée #############################################
IF( Dimix(' Tiers', vTiers) = 0 & vTiers @<>'' );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées :' | vTiers | ' absente de la dimension Tiers .Ligne ' |  numbertostring( Nb_Lign );

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### MATRICULES : Le code n'existe pas dans la dimension , la ligne est rejetée ########################################

IF( Dimix(' Matricules', vMatricules) = 0  & vMatricules @<>'' );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées :' | vMatricules | ' absente de la dimension Matricules .Ligne ' |  numbertostring( Nb_Lign );

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;


################################################################################
#                                                       CHARGEMENT DES DONNEES : Cube => ST_PL_YTD_Corp
################################################################################

#### Periode YTD ####
vPeriode_YTD = vPeriode|'_YTD';


################### MATRICULES : Le code est vide => NA ########################################

IF( vMatricules @= ''  );

    vMatricules = 'NA';

ENDIF;


################### TIERS : Le code est vide => SU9999#############################################

IF( vTiers @= ''  );
   
     vTiers = 'SU9999';
ENDIF;


CellPutN ( Valeur, zCube,  vDevise, vGaap, vIntegrationRate, vProjets, vMatricules, vEntite,
vOrganisation_Man, vTiers, vNat_analytique, vComptes, vPeriode_YTD, vPhase, vIndicator);

################### Eliminations Management Interco ###################

IF( ELPAR ('Tiers', vTiers, 1) @<> 'SU9999_Conso' & ELPAR ('Tiers', vTiers, 1)  @<> 'Other_VE_entities') ; 

     Elim_Mgmt_Interco = CellGetN ( zCube,  vDevise, 'Eliminations_Mgmt_interco', vIntegrationRate, vProjets, vMatricules, vEntite,
 vOrganisation_Man, vTiers, vNat_analytique, vComptes, vPeriode_YTD, vPhase, vIndicator);
     
     CellPutN( ( ( (-1) * Valeur ) + Elim_Mgmt_Interco ) , zCube,  vDevise, 'Eliminations_Mgmt_interco', vIntegrationRate, vProjets, vMatricules, vEnt
ite,
 vOrganisation_Man, vTiers, vNat_analytique, vComptes, vPeriode_YTD, vPhase, vIndicator);

ENDIF;


Nb_Load = Nb_Load + 1;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Mantis 2089-2090

#-- Delete subset
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Period_YTD' , P_NAME_RAZ );


CubeSetLogChanges(zCube, 1);
#-- Copy the file data in historical directory
ExecuteProcess( 'z_Tools_Data_Transfert' , 'zFile' , zsource , 'zAnnee' , SUBST( pPeriod , 1 , 4 ) , 'zMois' , SUBST( pPeriod , 6 , 2 )  );




zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################

CellPutS(zDateTimeLoadingStart , zCube_Process, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) , zCube_Process, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(nb_lign = nb_load);
    CellPutS('OK' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
else;
    CellPutS('KO' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
endif;

#################################################################################
#                                                                             END PROCESS
#################################################################################

#endregion