#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################
# Project : Tango - ST_PL_YTD -> RP_PL
# Created by : FBU
# Created at : 24/11/2011
# Modified by : BTA
# Modified at : 27/10/2016
# Modify reason : Modification to input clearer instructions to end users about the rejects + Deactivate alerts on type of client and the economic model
#########################################

zCube_Cible_PL = 'RP_PL';
zCube_Cible_Economic_Type_Client = 'RP_Economic_Type_Client';
zCube_Source = 'ST_PL_YTD';

zCube_Transco_ECO = 'TC_CONTRACT_ECO_MO_TYP_CLI';
pCountry=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');
zProcess = 'DL_RP_PL_ST_PL_YTD_by_SRC_YEAR';

zCube_Reject = 'ZZ_PROCESS_REJECT_BY_SOURCE';
zCube_Process = 'ZZ_PROCESS_DETAIL_BY_SOURCE';

Nb_Lign = 0;
Nb_Reject = 0;
Nb_Load = 0;

zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');

pPeriod_Cube=CellGetS( 'z_Admin_Param' , 'YEAR_BUDGET_FORECAST' , 'STR_VAR1');

####################
#-- Test version
####################
Phase = pPhase;
IF( DIMIX( 'Phase' , Phase ) = 0 );
   ItemReject( 'Warning!!!! The phase ' | Phase | ' does not exist in the dimension Phase' );
   ProcessError();
ENDIF;



####################
#-- Test date
####################
# MRE - 15/03/2012 : modification pour prendre en compte le comportement "default"
IF( pPeriod @= 'default' );
    pPeriod = pPeriod_Cube ;
ELSE;
    pPeriod = pPeriod;
ENDIF;

#################################################################################
#                                                               Clear Reject Cube
#################################################################################

######
#Call process DB_zz_Date_Time_loading in order to add the new day in the dimension zz_Date_Time_loading
ExecuteProcess( 'DB_zz_Date_Time_loading' );
######

P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );

#-- Create subset in zz_Date_Time_loading and }Processes
IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );
SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );

ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipCalcsSet ( zCube_Reject , P_NAME_RAZ , 1 );

#-- Clear cube
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );

#################################################################################
#                                                               Clear CUBE RP_PL
#################################################################################
P_NAME_RAZ = zCube_Cible_PL | '_RAZ';
ViewDestroy( zCube_Cible_PL , P_NAME_RAZ );
ViewCreate( zCube_Cible_PL , P_NAME_RAZ );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ , Phase , 1 );
ViewSubsetAssign( zCube_Cible_PL , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );

#-- Create subset in Legal_Organization
SubsetDestroy( 'Legal_Organization' , P_NAME_RAZ );
SubsetCreate( 'Legal_Organization' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization' )+1 );
   ElemE = DIMNM( 'Legal_Organization' , i );
      IF ( ATTRS ( 'Legal_Organization' , ElemE,'Source_entity' ) @= pSource ) ;
           SubsetElementInsert( 'Legal_Organization' , P_NAME_RAZ , ElemE , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible_PL , P_NAME_RAZ , 'Legal_Organization' , P_NAME_RAZ );


#-- Create subset in Indicator
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetCreate( 'Indicator' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Indicator' ) + 1 );
   ElemI = DIMNM( 'Indicator' , i );
#      IF ( ELISANC( 'Indicator' , 'Ind_fi_pl_nat' , ElemI ) > 0 );
# Modif RSJC 20151208 non suppression des donn√©es des indicateurs Vector
IF( ( ELLEV( 'Indicator' , ElemI ) = 0) & (ATTRS( 'Indicator' , ElemI , 'Source_Indicator' ) @<> 'Vector') );
           SubsetElementInsert( 'Indicator' , P_NAME_RAZ , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible_PL , P_NAME_RAZ , 'Indicator' , P_NAME_RAZ );


#-- Create subset in Period
SubsetDestroy( 'Period' , P_NAME_RAZ );
SubsetCreate( 'Period' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Period' ) + 1 );
   ElemP = DIMNM( 'Period' , i );
      IF ( ELISANC( 'Period' , pPeriod , ElemP ) > 0 & ELLEV( 'Period', ElemP ) = 0 );
           SubsetElementInsert( 'Period' , P_NAME_RAZ , ElemP , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible_PL , P_NAME_RAZ , 'Period' , P_NAME_RAZ );


#-- Create subset in Integration_Rate
IF( SubsetExists( 'Integration_Rate' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Integration_Rate' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Integration_Rate' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Integration_Rate' , P_NAME_RAZ , 'NO_APP' , 1 );
ViewSubsetAssign( zCube_Cible_PL , P_NAME_RAZ , 'Integration_Rate' , P_NAME_RAZ );


#-- Clear cube
ViewZeroOut(zCube_Cible_PL , P_NAME_RAZ );

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Cible_PL , P_NAME_RAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Cible_PL , P_NAME_RAZ , 1 );
ViewExtractSkipCalcsSet ( zCube_Cible_PL , P_NAME_RAZ , 1 );

#-- Delete subset
ViewDestroy( zCube_Cible_PL , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetDestroy( 'Integration_Rate' , P_NAME_RAZ );
SubsetDestroy( 'Legal_Organization' , P_NAME_RAZ );
SubsetDestroy( 'Period' , P_NAME_RAZ );


#################################################################################
#                                                               Clear CUBE RP_Economic_Type_Client
#################################################################################
P_NAME_RAZ = zCube_Cible_Economic_Type_Client | '_RAZ';
ViewDestroy( zCube_Cible_Economic_Type_Client , P_NAME_RAZ );
ViewCreate( zCube_Cible_Economic_Type_Client , P_NAME_RAZ );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ ,Phase , 1 );
ViewSubsetAssign( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );

#-- Create subset in Legal_Organization
SubsetDestroy( 'Legal_Organization' , P_NAME_RAZ );
SubsetCreate( 'Legal_Organization' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization' )+1 );
   ElemE = DIMNM( 'Legal_Organization' , i );
      IF ( ATTRS ( 'Legal_Organization' , ElemE,'Source_entity' ) @= pSource ) ;
           SubsetElementInsert( 'Legal_Organization' , P_NAME_RAZ , ElemE , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible_Economic_Type_Client  , P_NAME_RAZ , 'Legal_Organization' , P_NAME_RAZ );

#-- Create subset in Indicator
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetCreate( 'Indicator' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Indicator' ) + 1 );
   ElemI = DIMNM( 'Indicator' , i );
#      IF ( ELISANC( 'Indicator' , 'Ind_fi_pl_nat' , ElemI ) > 0 );
IF( ELLEV( 'Indicator' , ElemI ) = 0 );
           SubsetElementInsert( 'Indicator' , P_NAME_RAZ , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 'Indicator' , P_NAME_RAZ );

#-- Create subset in Period
SubsetDestroy( 'Period' , P_NAME_RAZ );
SubsetCreate( 'Period' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Period' ) + 1 );
   ElemP = DIMNM( 'Period' , i );
      IF ( ELISANC( 'Period' , pPeriod , ElemP ) > 0 & ELLEV( 'Period', ElemP ) = 0 );
           SubsetElementInsert( 'Period' , P_NAME_RAZ , ElemP , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 'Period' , P_NAME_RAZ );


#-- Create subset in Integration_Rate
IF( SubsetExists( 'Integration_Rate' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Integration_Rate' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Integration_Rate' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Integration_Rate' , P_NAME_RAZ , 'NO_APP' , 1 );
ViewSubsetAssign( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 'Integration_Rate' , P_NAME_RAZ );


#-- Clear cube
ViewZeroOut(zCube_Cible_Economic_Type_Client , P_NAME_RAZ );

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 1 );
ViewExtractSkipCalcsSet ( zCube_Cible_Economic_Type_Client , P_NAME_RAZ , 1 );

#-- Delete subset
ViewDestroy( zCube_Cible_Economic_Type_Client , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetDestroy( 'Integration_Rate' , P_NAME_RAZ );
SubsetDestroy( 'Legal_Organization' , P_NAME_RAZ );
SubsetDestroy( 'Period' , P_NAME_RAZ );


#################################################################################
#                                                               Source CUBE ST_PL_YTD
#################################################################################
P_NAME_SOURCE = zCube_Source | '_Vue';
ViewDestroy( zCube_Source , P_NAME_SOURCE );
ViewCreate( zCube_Source , P_NAME_SOURCE );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Phase' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_SOURCE ,Phase , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Phase' , P_NAME_SOURCE );

#-- Create subset in Legal_Organization
SubsetDestroy( 'Legal_Organization' , P_NAME_SOURCE );
SubsetCreate( 'Legal_Organization' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization' )+1 );
   ElemE = DIMNM( 'Legal_Organization' , i );
      IF ( ATTRS ( 'Legal_Organization' , ElemE,'Source_entity' ) @= pSource ) ;
           SubsetElementInsert( 'Legal_Organization' , P_NAME_SOURCE , ElemE , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Legal_Organization' , P_NAME_SOURCE );

#-- Create subset in Management_Organization
SubsetDestroy( 'Management_Organization' , P_NAME_SOURCE );
SubsetCreate( 'Management_Organization' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Management_Organization' )+1 );
   ElemM = DIMNM( 'Management_Organization' , i );
           IF( ELLEV( 'Management_Organization' , ElemM ) = 0 );
                  SubsetElementInsert( 'Management_Organization' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Management_Organization' , P_NAME_SOURCE );

#-- Create subset in Indicator
SubsetDestroy( 'Indicator' , P_NAME_SOURCE );
SubsetCreate( 'Indicator' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Indicator' ) + 1 );
   ElemI = DIMNM( 'Indicator' , i );
      IF ( ELLEV( 'Indicator' , ElemI ) = 0 );
           SubsetElementInsert( 'Indicator' , P_NAME_SOURCE , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Indicator' , P_NAME_SOURCE );

#-- Create subset in Gaap
SubsetDestroy( 'Gaap' , P_NAME_SOURCE );
SubsetCreate( 'Gaap' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Gaap' ) + 1 );
   ElemG = DIMNM( 'Gaap' , i );
      IF ( ELLEV( 'Gaap' , ElemG ) = 0 );
           SubsetElementInsert( 'Gaap' , P_NAME_SOURCE , ElemG , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Gaap' , P_NAME_SOURCE );

#-- Create subset in Activity
SubsetDestroy( 'Activity' , P_NAME_SOURCE );
SubsetCreate( 'Activity' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Activity' ) + 1 );
   ElemA = DIMNM( 'Activity' , i );
      IF( ELLEV( 'Activity' , ElemA ) = 0 );
           SubsetElementInsert( 'Activity' , P_NAME_SOURCE , ElemA , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Activity' , P_NAME_SOURCE );

#-- Create subset in Period
SubsetDestroy( 'Period_YTD' , P_NAME_SOURCE );
SubsetCreate( 'Period_YTD' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Period_YTD' ) + 1 );
   ElemP = DIMNM( 'Period_YTD' , i );
      IF( ELISANC( 'Period_YTD' , 'Total_' | pPeriod , ElemP ) > 0 & ELLEV( 'Period_YTD' , ElemP ) = 1 );
           SubsetElementInsert( 'Period_YTD' , P_NAME_SOURCE , ElemP , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Period_YTD' , P_NAME_SOURCE );

#-- Create subset in Currency
IF( SubsetExists( 'Currency' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Currency' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Currency' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Currency' , P_NAME_SOURCE , 'LCL' , 1 );
SubsetElementInsert( 'Currency' , P_NAME_SOURCE , 'EUR' , 2 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Currency' , P_NAME_SOURCE );

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Source , P_NAME_SOURCE , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Source , P_NAME_SOURCE , 0 );
ViewExtractSkipCalcsSet ( zCube_Source , P_NAME_SOURCE , 0 );


DatasourceNameForServer = zCube_Source ;
DatasourceCubeview = P_NAME_SOURCE ;








#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



#-- Currency
Currency = vCurrency;

#-- Integration Rate
Integration_Rate = 'NO_APP';

#-- Period
Period = vPeriod_YTD;

Value = vValue;

zRecord = vActivity | '-' | vCurrency | '; ' | vLegal_Organization | '; ' | vManagement_Organization | '; ' | vGaap | '; ' | 
vPeriod_YTD | '; ' | vPhase | '; ' | vIndicator ;

VS_VAR_ERR_TECH_MESSAGE = '';
VS_VAR_ERR_FUNCT_MESSAGE = '';
VS_VAR_ERR_INSTRUCTION_MESSAGE = '';

#################################################################################
#                                                                             REJECT SECTION
#################################################################################
Nb_Lign = Nb_Lign + 1;

#-- If the Legal_org/Mgmt_Orga/Activity does not exist in the TC_CONTRACT_ECO_MO_TYP_CLI cube, this record is reject 
IF( CellGetS ( zCube_Transco_ECO , vActivity , vLegal_Organization , vManagement_Organization , 'STR_VAR1' ) @='' );
   Nb_Reject = Nb_Reject + 1;
   zError_Message = vActivity | '/' | vLegal_Organization  | '/' |  vManagement_Organization | ' does not exist in 
TC_CONTRACT_ECO_MO_TYP_CLI : Data is rejeted' ;
   CellPutS( zRecord , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Record' );
   CellPutS( zError_Message , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Error_Message' );

	#-- BTA 27/10/2016 - Clearer instruction for end users
	VS_VAR_ERR_TECH_MESSAGE = 'Rejected Data : ' | vActivity | '/' | vLegal_Organization  | '/' |  vManagement_Organization | ' does not exist in TC_CONTRACT_ECO_MO_TYP_CLI '  ;
	VS_VAR_ERR_FUNCT_MESSAGE = 'Loading data on the crossing ' | vActivity | '/' | vLegal_Organization  | '/' |  vManagement_Organization |  ' is not authorized' ; 
	VS_VAR_ERR_INSTRUCTION_MESSAGE = 'Please update the file Mgmt_Orga_Mapping_' | pSource | ' and reload data or contact Tango support' ;

	CellPutS( VS_VAR_ERR_TECH_MESSAGE , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l1', 'Technical_Message');	
	CellPutS( VS_VAR_ERR_FUNCT_MESSAGE  , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l1', 'Functional_Message');
	CellPutS( VS_VAR_ERR_INSTRUCTION_MESSAGE  , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l1', 'Instruction_to_Resolve_the_issue');

   ItemSkip;
ENDIF;

################################################################################
#                                                               INPUT SECTION : Cube => RP_PL
################################################################################

#-- => RP_PL
IF( CellIsUpdateable( zCube_Cible_PL , vActivity , Currency , vGaap , Integration_Rate , vLegal_Organization , 
vManagement_Organization , Period , vPhase , vIndicator ) = 1 );
    CellPutN( Value , zCube_Cible_PL , vActivity , Currency , vGaap , Integration_Rate , vLegal_Organization , 
    vManagement_Organization , Period , vPhase , vIndicator );
ENDIF;

#################################################################################
#                                                                             REJECT SECTION
#################################################################################
#-- Type_Client
Type_Client = CellGetS ( zCube_Transco_ECO , vActivity , vLegal_Organization , vManagement_Organization , 'STR_VAR1' );

#-- Economic_Model
Economic_Model = CellGetS ( zCube_Transco_ECO , vActivity , vLegal_Organization , vManagement_Organization , 'STR_VAR2' );

#-- if the Type of client is empty, this record is reject
#IF( ATTRS( 'Management_Organization' , vManagement_Organization , 'Type Contract'  ) @<> 'Contract bundle' 
#& Type_Client @='' );
#   Nb_Reject = Nb_Reject + 1;
#   zError_Message = 'The Type of Client  is empty in the cube ' |  zCube_Transco_ECO | ' for ' |  zRecord ;
#   CellPutS( zRecord ,  zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Record' );
#   CellPutS( zError_Message , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Error_Message' );
#   Type_Client = 'Reject_Data';
#ENDIF;

#-- if the type client does not exist in Type_Client dimension, this record is reject
#IF( ATTRS( 'Management_Organization' , vManagement_Organization , 'Type Contract'  ) @<> 'Contract bundle' 
#& Dimix('Type_Client', Type_Client ) = 0 );
#   Nb_Reject = Nb_Reject + 1;
#   zError_Message = Type_Client  | ' does not exist in dimension Type_Client  in the cube ' |  zCube_Transco_ECO | ' for ' |  zRecord;
#   CellPutS( zRecord , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Record' );
#   CellPutS( zError_Message , zCube_Reject , pSource, zProcess  , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Error_Message' );
#   Type_Client = 'Reject_Data';
#ENDIF;

#-- if the Economic model is empty, this record is reject
#IF( ATTRS( 'Management_Organization' , vManagement_Organization , 'Type Contract'  ) @<> 'Contract bundle' 
#& Economic_Model @='' );
#   Nb_Reject = Nb_Reject + 1;
#   zError_Message = 'The Economic Model  is empty in the cube ' |  zCube_Transco_ECO | ' for ' |  zrecord ;
#   CellPutS( zRecord,  zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Record');
#   CellPutS( zError_message , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Error_Message');
#   Economic_Model = 'Reject_Data';
#ENDIF;

#-- if the Economic Model does not exist in Economic_Model dimension, this record is reject
#IF( ATTRS( 'Management_Organization' , vManagement_Organization , 'Type Contract'  ) @<> 'Contract bundle' 
#& Dimix('Economic_Model', Economic_Model ) = 0 );
#   Nb_Reject = Nb_Reject + 1;
#   zError_Message = Economic_Model  | ' does not exist in dimension Economic_Model  in the cube ' |  zCube_Transco_ECO | ' for ' |  zRecord;
#   CellPutS( zRecord,  zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Record');
#   CellPutS( zError_message , zCube_Reject , pSource, zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) , 'Error_Message');
#   Economic_Model = 'Reject_Data';
#ENDIF;

#-- if the Type of contract is "Contract_Bundle" => We affected NA to Economic Model & Type Client 
IF( ATTRS( 'Management_Organization' , vManagement_Organization , 'Type Contract' ) @= 'Contract bundle' );
    Economic_Model = 'NA';
   Type_Client = 'NA';
ENDIF;


################################################################################
#                                                               INPUT SECTION : Cube => RP_Economic_Type_Client
################################################################################

#-- => RP_Economic_Type_Client
IF( CellIsUpdateable( zCube_Cible_Economic_Type_Client , vActivity , Currency , Economic_Model , vGaap , 
Integration_Rate , vLegal_Organization , vManagement_Organization , Period , vPhase , Type_Client , vIndicator ) = 1 ) ;
   CellPutN(Value , zCube_Cible_Economic_Type_Client , vActivity , Currency , Economic_Model , vGaap , 
   Integration_Rate , vLegal_Organization , vManagement_Organization , Period , vPhase , Type_Client , vIndicator );
ENDIF;

IF( Economic_Model @<> 'Reject_Data' & Type_Client @<> 'Reject_Data' );
     Nb_Load = Nb_Load + 1;
ENDIF;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****



#-- Delete view and subsets
ViewDestroy( zCube_Source , P_NAME_SOURCE );
SubsetDestroy( 'Management_Organization' , P_NAME_SOURCE );
SubsetDestroy( 'Legal_Organization' , P_NAME_SOURCE );
SubsetDestroy( 'Indicator' , P_NAME_SOURCE );
SubsetDestroy( 'Gaap' , P_NAME_SOURCE );
SubsetDestroy( 'Activity' , P_NAME_SOURCE );
SubsetDestroy( 'Phase' , P_NAME_SOURCE );
SubsetDestroy( 'Period_YTD' , P_NAME_SOURCE );
SubsetDestroy( 'Currency' , P_NAME_SOURCE );


zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             PROCESS with PERIOD and INSTANCE
#################################################################################
#zCube_Process_PP = 'ZZ_PROCESS_Detail_Instance';
#IF( pCountry@='CM' );
#     pChore='Task5_CM_Import_CM_Data_Export_CO_Data';
#ELSE;
#     pChore='Task4_CO_Import_Vector_Parameter_Export_CM_Data_' | pCountry;
#ENDIF;

#CellPutS(zDateTimeLoadingStart , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'Start_date');
#CellPutS(zDateTimeLoadingEnd , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'End_date');
#CellPutS(numbertostring(nb_lign) , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'Nb_Input_records');
#CellPutS(numbertostring(nb_reject) , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,'Nb_reject_records');
#CellPutS(numbertostring(nb_load) ,  zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry ,psource, 'Nb_load_records');
#IF( nb_lign = nb_load);
#    CellPutS('OK' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,  'Status');
#ELSE;
#    CellPutS('KO' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,  'Status');
#ENDIF;


#################################################################################
#                                                                             PROCESS with PERIOD and PHASE
#################################################################################
zCube_Process_PP = 'ZZ_PROCESS_DETAIL_PERIOD_PHASE';

CellPutS(zDateTimeLoadingStart , zCube_Process_PP, zProcess ,pPeriod, Phase,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process_PP, zProcess ,pPeriod ,Phase,zDateLoadingStart , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) ,  zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Nb_load_records');
IF( nb_lign = nb_load);
    CellPutS('OK' ,zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart ,   'Status');
ELSE;
    CellPutS('KO' ,  zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Status');
ENDIF;

#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################


CellPutS(zDateTimeLoadingStart , zCube_Process, pSource, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process, pSource, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process, pSource, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process, pSource, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) , zCube_Process, pSource, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(nb_lign = nb_load);
    CellPutS('OK' , zCube_Process, pSource, zProcess ,zDateLoadingStart , 'Status');
ELSE;
    CellPutS('KO' , zCube_Process, pSource, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail_By_Source and  zz_Process_Reject_By_S
ource' );
ENDIF;

#################################################################################
#                                                                             END PROCESS
#################################################################################




#endregion