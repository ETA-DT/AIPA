#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#########################################
# Project : Tango - Data Load -> Storage Cube RP_PL_VECTOR
# Created by : FBU
# Created at : 30/08/2011
# Modified by : 
# Modified at : 
# Modify reason :
#########################################
pCountry=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');
zCube = 'RP_PL';
zCube2 = 'RP_Vector';
zCube3 = 'RP_Economic_Type_Client';
zCube_Source = 'ST_VECTOR_YTD';

zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';

nb_lign = 0;
nb_reject = 0;
nb_load = 0;

zSource = 'VTD_Vector';
zSource1 = 'FR_SCENARIO';
zSource2 = 'US_ORACLE';

zProcess = 'DL_RP_PL_VECTOR_Actual_PL';

zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');
pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_ACTUAL' , 'STR_VAR1');

Source_File = CellGetS( 'z_Admin_Param' , 'REP_DATA' , 'STR_VAR1') | '\Data_P&L_Actual_' |  zSource | '.csv';
DataSourceNameForServer = Source_File;


####################
#-- Test date
####################
IF( pPeriod @= 'previous_month' );
    pPeriod = ATTRS( 'Period' , TIMST( NOW ,'\Y.\m' ) , 'M-1' ) ;
ENDIF;

Phase ='ACT';


#################################################################################
#                                                               Clear Reject Cube
#################################################################################

######
#Call process DB_zz_Date_Time_loading in order to add the new day in the dimension zz_Date_Time_loading
ExecuteProcess('DB_zz_Date_Time_loading');
######

P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );

#-- Create subset in zz_Date_Time_loading and }Processes
IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );
SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );

ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);

#-- Clear cube
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipCalcsSet ( zCube_Reject , P_NAME_RAZ , 1 );

#-- Delete subset
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );


#################################################################################
#                                                               Clear CUBE RP_PL
#################################################################################
P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube , P_NAME_RAZ );
ViewCreate( zCube , P_NAME_RAZ );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ , phase, 1 );
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );


#-- Create subset in Indicator
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetCreate( 'Indicator' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Indicator' ) + 1 );
   ElemI = DIMNM( 'Indicator' , i );
      IF( ATTRS( 'Indicator' , ElemI , 'Source_Indicator' ) @= 'Vector' );
           SubsetElementInsert( 'Indicator' , P_NAME_RAZ , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Indicator' , P_NAME_RAZ );

#-- Create subset in Period
IF( SubsetExists( 'Period' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Period' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Period' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Period' , P_NAME_RAZ , pPeriod , 1 );
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Period' , P_NAME_RAZ );

#-- Clear cube
ViewZeroOut( zCube , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Period' , P_NAME_RAZ );
SubsetDestroy( 'Indicator' , P_NAME_RAZ );

#################################################################################
#                                                               Clear CUBE RP_VECTOR
#################################################################################
P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube2 , P_NAME_RAZ );
ViewCreate( zCube2 , P_NAME_RAZ );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ , phase , 1 );
ViewSubsetAssign( zCube2 , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );


#-- Create subset in Period
IF( SubsetExists( 'Period' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Period' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Period' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Period' , P_NAME_RAZ , pPeriod, 1 );
ViewSubsetAssign( zCube2 , P_NAME_RAZ , 'Period' , P_NAME_RAZ );

#-- Clear cube
ViewZeroOut( zCube2 , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube2 , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Period' , P_NAME_RAZ );
SubsetDestroy( 'Indicator_Vector' , P_NAME_RAZ );

#################################################################################
#                                                               Clear CUBE RP_ECO_TYP_CLI
#################################################################################
P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube3 , P_NAME_RAZ );
ViewCreate( zCube3 , P_NAME_RAZ );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ , phase, 1 );
ViewSubsetAssign( zCube3 , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );


#-- Create subset in Indicator
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetCreate( 'Indicator' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Indicator' ) + 1 );
   ElemI = DIMNM( 'Indicator' , i );
      IF ( ATTRS( 'Indicator' , ElemI , 'Source_Indicator' ) @= 'Vector' );
           SubsetElementInsert( 'Indicator' , P_NAME_RAZ , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube3 , P_NAME_RAZ , 'Indicator' , P_NAME_RAZ );


#-- Create subset in Period
IF( SubsetExists( 'Period' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Period' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Period' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Period' , P_NAME_RAZ , pPeriod, 1 );
ViewSubsetAssign( zCube3 , P_NAME_RAZ , 'Period' , P_NAME_RAZ );

#-- Clear cube
ViewZeroOut( zCube3 , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube3 , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Period' , P_NAME_RAZ );
SubsetDestroy( 'Indicator' , P_NAME_RAZ );



#################################################################################
#                                                               Source Cube : ST_VECTOR_YTD
#################################################################################
P_NAME_SOURCE = zCube_Source | '_Vue';
ViewDestroy( zCube_Source , P_NAME_SOURCE );
ViewCreate( zCube_Source , P_NAME_SOURCE );


#-- Create subset in Audit_ID
IF( SubsetExists( 'Audit_ID' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Audit_ID' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Audit_ID' , P_NAME_SOURCE );
ENDIF;
i=1;
WHILE( i < DIMSIZ ( 'Audit_ID' ) + 1 );
   ElemA = DIMNM( 'Audit_ID' , i );
           IF( ELLEV( 'Audit_ID' , ElemA ) = 0 );
                  SubsetElementInsert( 'Audit_ID' , P_NAME_SOURCE , ElemA , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Audit_ID' , P_NAME_SOURCE );


#-- Create subset in Legal_Organization
IF( SubsetExists( 'Legal_Organization' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Legal_Organization' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Legal_Organization' , P_NAME_SOURCE );
ENDIF;
i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization' )+1 );
   ElemE = DIMNM( 'Legal_Organization' , i );
           IF( ELLEV( 'Legal_Organization' , ElemE ) = 0 );
                  SubsetElementInsert( 'Legal_Organization' , P_NAME_SOURCE , ElemE , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Legal_Organization' , P_NAME_SOURCE );


#-- Create subset in Period
IF( SubsetExists( 'Period_YTD' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Period_YTD' , P_NAME_SOURCE , pPeriod , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Period_YTD' , P_NAME_SOURCE );


#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Phase' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_SOURCE , Phase , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Phase' , P_NAME_SOURCE );


#-- Create subset in Indicator_Vector
IF( SubsetExists( 'Indicator_Vector' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Indicator_Vector' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Indicator_Vector' , P_NAME_SOURCE );
ENDIF;
i=1;
WHILE( i < DIMSIZ ( 'Indicator_Vector' ) + 1 );
   ElemI = DIMNM( 'Indicator_Vector' , i );
      IF ( ELLEV( 'Indicator_Vector' , ElemI ) = 0 );
           SubsetElementInsert( 'Indicator_Vector' , P_NAME_SOURCE , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Indicator_Vector' , P_NAME_SOURCE );


#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Source , P_NAME_SOURCE , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Source , P_NAME_SOURCE , 0 );
ViewExtractSkipCalcsSet ( zCube_Source , P_NAME_SOURCE , 0 );


DatasourceNameForServer = zCube_Source ;
DatasourceCubeview = P_NAME_SOURCE ;




#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



zRecord = Audit_ID | '-' | Legal_Organization | '-' | Period_YTD | '-' | Phase | '-' | Indicator_Vector | '-' | NumberToString( Value ) ;


#################################################################################
#                                                                             REJECT SECTION
#################################################################################
Nb_lign = Nb_lign + 1;


################################################################################
#                                                                   INPUT SECTION : Cube => RP_PL
################################################################################
#-- Gaap
Gaap = ATTRS( 'Audit_ID' , Audit_ID , 'Transco_Gaap' );


#-- Import data
#IF( (CellIsUpdateable( zCube , 'NA' , Currency , Gaap , Integration_Rate , Legal_Organization , 'NA' , SUBST( Period_YTD , 1 , 7 ) , Phase , Indicator_Vector ) = 1) & SUBST( Indicator_Vector, 1 , 3 ) @<> 'PL1' ); 
#
#   IF( Gaap @= 'Eliminations_Mgmt_interco' & Integration_Rate @= 'NO_APP' );

#-- No load in NO_APP for eliminations
          
#     ELSE;

#           Cumul = CellGetN( zCube , 'NA' , Currency , Gaap , Integration_Rate , Legal_Organization , 'NA' , SUBST( Period_YTD , 1 , 7 ) , 
#         Phase , Indicator_Vector ); 

#           CellPutN( Cumul + Value , zCube , 'NA' , Currency , Gaap , Integration_Rate , Legal_Organization , 'NA' , SUBST( Period_YTD , 1 , 7 ) , 
#           Phase , Indicator_Vector ); 

#     ENDIF;

#ENDIF;

#Mantis 1195 - Split des données du Bilan & Cash par activité
vActivity_Entity = attrs('Legal_Organization', Legal_Organization, 'Activity_Entity');

#-- Import data

## RSJC 27/05/2021 Ajout condition source Indicateur Vector
IF(ATTRS( 'Indicator' , Indicator_Vector , 'Source_Indicator' ) @= 'Vector') ;
IF( (CellIsUpdateable( zCube , vActivity_Entity , Currency , Gaap , Integration_Rate , Legal_Organization , 'NA' , SUBST( Period_YTD , 1 , 7 ) , Phase , Indicator_Vector ) = 1) & SUBST( Indicator_Vector, 1 , 3 ) @<> 'PL1' ); 


    IF( Gaap @= 'Eliminations_Mgmt_interco' & Integration_Rate @= 'NO_APP' );
 
#-- No load in NO_APP for eliminations
          
     ELSE;

           Cumul = CellGetN( zCube ,vActivity_Entity, Currency , Gaap , Integration_Rate , Legal_Organization , 'NA' , SUBST( Period_YTD , 1 , 7 ) , 
           Phase , Indicator_Vector ); 

           CellPutN( Cumul + Value , zCube ,vActivity_Entity, Currency , Gaap , Integration_Rate , Legal_Organization , 'NA' , SUBST( Period_YTD , 1 ,
 7 ) , 
           Phase , Indicator_Vector ); 

     ENDIF;

ENDIF;
ENDIF;


################################################################################
#                                                                   INPUT SECTION : Cube => RP_VECTOR
################################################################################
#-- Import data
IF( CellIsUpdateable( zCube2 , Audit_Id , Currency , Integration_Rate , Legal_Organization , SUBST( Period_YTD , 1 , 7 ) , 
Phase , Indicator_Vector ) = 1 ); 

     Cumul = CellGetN( zCube2 , Audit_Id , Currency , Integration_Rate , Legal_Organization , SUBST( Period_YTD , 1 , 7 ) , 
     Phase , Indicator_Vector );

     CellPutN( Cumul + Value , zCube2 , Audit_Id , Currency , Integration_Rate , Legal_Organization , SUBST( Period_YTD , 1 , 7 ) , 
     Phase , Indicator_Vector );

ENDIF;


################################################################################
#                                                                   INPUT SECTION : Cube => RP_Economic_Type_client
################################################################################
#-- Import data
IF( (CellIsUpdateable( zCube3 , 'NA' , Currency , 'NA' , Gaap , Integration_Rate , Legal_Organization , 'NA' , 
SUBST( Period_YTD , 1 , 7 ) , Phase , 'NA' , Indicator_Vector ) = 1) 
& SUBST( Indicator_Vector, 1 , 3 ) @<> 'PL1' ); 

     IF( Gaap @= 'Eliminations_Mgmt_interco' & Integration_Rate @= 'NO_APP' );

#-- No load in NO_APP for eliminations
          
     ELSE;

          Cumul = CellGetN( zCube3 , 'NA' , Currency , 'NA' , Gaap , Integration_Rate , Legal_Organization , 'NA' , 
          SUBST( Period_YTD , 1 , 7 ) , Phase , 'NA' , Indicator_Vector ); 

          CellPutN( Cumul + Value , zCube3 , 'NA' , Currency , 'NA' , Gaap , Integration_Rate , Legal_Organization , 'NA' , 
          SUBST( Period_YTD , 1 , 7 ) , Phase , 'NA' , Indicator_Vector ); 

    ENDIF;

ENDIF;

Nb_Load = Nb_Load + 1;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****



#-- Delete View and subset
#ViewDestroy( zCube_Source , P_NAME_SOURCE );
#SubsetDestroy( 'Audit_ID' , P_NAME_SOURCE );
#SubsetDestroy( 'Legal_Organization' , P_NAME_SOURCE );
#SubsetDestroy( 'Period_YTD' , P_NAME_SOURCE );
#SubsetDestroy( 'Phase' , P_NAME_SOURCE );
#SubsetDestroy( 'Integration_Rate' , P_NAME_SOURCE );
#SubsetDestroy( 'Indicator_Vector' , P_NAME_SOURCE );


zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');

#################################################################################
#                                                                             PROCESS with PERIOD and INSTANCE
#################################################################################
#zCube_Process_PP = 'ZZ_PROCESS_Detail_Instance';
#pChore = 'Task5_CM_Import_CM_Data_Export_CO_Data';
#pSource = 'CORE_MODEL';

#CellPutS( zDateTimeLoadingStart , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pCountry , pSource , 'Start_date');
#CellPutS( zDateTimeLoadingEnd , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pCountry , pSource , 'End_date');
#CellPutS( NumberToString(Nb_lign) , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pCountry , pSource , 'Nb_Input_records');
#CellPutS( NumberToString(Nb_reject) , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pCountry , pSource , 'Nb_Reject_records');
#CellPutS( NumberToString(Nb_load) , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pCountry , pSource , 'Nb_load_records');
#IF(Nb_lign = Nb_load);
#    CellPutS('OK' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,  'Status');
#ELSE;
#    CellPutS('KO' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry , psource,  'Status');
#ENDIF;


#################################################################################
#                                                                             PROCESS with PERIOD and PHASE
#################################################################################
zCube_Process_PP = 'ZZ_PROCESS_DETAIL_PERIOD_PHASE';

CellPutS( zDateTimeLoadingStart , zCube_Process_PP, zProcess ,pPeriod, Phase,zDateLoadingStart , 'Start_date');
CellPutS( zDateTimeLoadingEnd , zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'End_date');
CellPutS( NumberToString(Nb_lign) , zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Nb_Input_records');
CellPutS( NumberToString(Nb_reject) , zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Nb_reject_records');
CellPutS( NumberToString(Nb_load) ,  zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Nb_load_records');
IF(Nb_lign = Nb_load);
    CellPutS('OK' ,zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart ,   'Status');
ELSE;
    CellPutS('KO' ,  zCube_Process_PP, zProcess ,pPeriod , Phase,zDateLoadingStart , 'Status');
ENDIF;

#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################

CellPutS( zDateTimeLoadingStart , zCube_Process, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS( zDateTimeLoadingEnd , zCube_Process, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS( NumberToString(Nb_lign) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS( NumberToString(Nb_reject) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS( NumberToString(Nb_load) , zCube_Process, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(Nb_lign = Nb_load);
    CellPutS('OK' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
ELSE;
    CellPutS('KO' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
ENDIF;

#################################################################################
#                                                                             END PROCESS
#################################################################################

#endregion