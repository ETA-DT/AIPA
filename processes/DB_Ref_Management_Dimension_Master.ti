#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


######################################################
# -- Process : Process Master to create, upgrade or export dimension
# -- MTA - Datatilt - 31/12/2021
######################################################

# -- Global variables
zProcessName = GetProcessName();

# -- Itération du process
zIteration = TimSt( Now(), '\Y-\m-\d \h:\i:\s');
zProcessIteration = zIteration |' '| zProcessName;

# -- Utilisateur en cours
IF( DIMIX('}Clients',TM1User() ) = 0 );
	# Default User = Admin --> Anticipation des exécutions par Chore
	zProcessUser = 'Admin';
  	zUserName = zProcessUser;
ELSE;
	#zProcessUser = AttrS('}Clients',TM1User(),'}TM1_DefaultDisplayValue');
    	#zUserName = SUBST(zProcessUser, SCAN('/', zProcessUser) +1,LONG (zProcessUser));
	zUserName =TM1User(); 
	
ENDIF;

vsTemporaryNm = TimSt( Now(), '\Y\m\d_\h\i\s') | '_' | zUserName ; 

# -- Manage Dim (Create % Export % Create)
IF(pManage @= 'Create');

	# Controle si le fichier existe
	IF(pFile@='');
  		zFile= pDimension | '.csv';
	ELSE;
  		zFile= pFile | '.csv';
	ENDIF;

	INPUT_FILE = CellGetS( 'Z_ADMIN_PARAM', 'REP_ITF', 'STR_VAR1' );
	#File = INPUT_FILE  | '\TEST_MTA\'|zFile;
	File = INPUT_FILE  |'\'|zFile;
	IF(FileExists(File)=0);
		ASCIIOutput( INPUT_FILE | 'Warning_message.txt', 'Warning: The file doesnt exist here' | File);
	ENDIF; 
	processreturncode = ExecuteProcess('DB_Dim_Generique_Referentiel_Step_1', 'pDim', pDimension, 'pFile', pDimension );
    
	If(ProcessReturnCode<> ProcessExitNormal());
		If(ProcessReturnCode = ProcessExitMinorError());
			Status = 'Exit with Minor Error';
		Endif;
		If(ProcessReturnCode = ProcessExitByQuit());
			Status = 'Exit by Quit';
		Endif;
		If(ProcessReturnCode = ProcessExitWithMessage());
			Status = 'Exit with Message';
		Endif;
		If(ProcessReturnCode = ProcessExitSeriousError());
			Status = 'Exit with Serious Error';
		Endif;
		If(ProcessReturnCode = ProcessExitByBreak());
			Status = 'Exit by Break';
		Endif;
	ELSE;
		Status = 'Dimension modified with success';

	ENDIF;
ELSE;

	# ----- Declaration des Sources et des Cibles (Cubes, Views, Subsets, etc.)

	psCubeNameSource = 'REF_MANAGEMENT'; 

	sCube = psCubeNameSource; 
	sSub =  vsTemporaryNm|'_Source'; 
	sView = vsTemporaryNm|'_Source'; 


	ViewDestroy(sCube, sView);
	ViewCreate(sCube, sView);

	vDim = '}Dimensions';
	SubsetDestroy( vDim, sSub );
	Subsetcreate( vDim, sSub );
	i=1;
	j=1;
	vNbrElt=DIMSIZ(vDim);
	WHILE(i<=vNbrElt);
			sElt=DIMNM(vDim,i);
			IF(ELLEV( vDim, sElt ) = 0 & SUBST( sElt, 1, 2 ) @<> '}');
				SubsetElementInsert(vDim,sSub,sElt,j);
			j=j+1;
			ENDIF;
			i=i+1;
	END;  
	ViewSubsetAssign( sCube, sView, vDim, sSub); 


	vDim = 'Ref_Management_Info';
	SubsetDestroy( vDim, sSub );
	Subsetcreate( vDim, sSub );

	IF(pManage @= 'Update');
		# -- Normalement c'est dans un ecran qu'on vient mettre le flag 0 % 1 mais ici, on le fait automatiquement avec le pManage car il n'y a pas d'écran
		CellPutN( 1, 'REF_MANAGEMENT', pDimension, pManage );
		SubsetElementInsert(vDim,sSub,'Update', 1);
	ELSEIF(pManage @= 'Export');
		CellPutN( 1, 'REF_MANAGEMENT', pDimension, pManage );
		SubsetElementInsert(vDim,sSub,'Export', 1);
	ENDIF;
	ViewSubsetAssign( sCube, sView, vDim, sSub); 

	#######################################################
	ViewExtractSkipZeroesSet (sCube,DatasourceCubeview,1);
	ViewExtractSkipCalcsSet(sCube, DatasourceCubeview, 0);
	ViewExtractSkipRuleValuesSet(sCube, DatasourceCubeview, 0);

	#######################################################
	# -- Définition de la source de données 

	DataSourceType = 'VIEW'; 
	DatasourceNameForClient = sCube; 
	DataSourceNameForServer = sCube; 
	DataSourceCubeView = sView; 


	# --Variable Execute TI

	IF(pManage @= 'Export');
		Last_MAJ = 'Last_Export';
		User_MAJ = 'User_Export';
		Status_MAJ = 'Status_Export';
		Flag_MAJ = 'Export';
	ELSEIF(pManage @= 'Update');
		Last_MAJ = 'Last_Update';
		User_MAJ = 'User_Update';
		Status_MAJ = 'Status_Update';
		Flag_MAJ = 'Update';
	ENDIF;


ENDIF;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

# -- Statut Cube Info
# -- Derniere Execution
# -- Utilisateur
# -- pManage = CREATE % EXPORT % UPDATE

IF(pManage @<> 'Create');

	CellPutS( zIteration , 'REF_MANAGEMENT', Dimension, Last_MAJ  );
	CellPutS( zUserName, 'REF_MANAGEMENT', Dimension, User_MAJ);  

	IF(pManage @= 'Export');
	
		processreturncode = ExecuteProcess('DB_Dim_Export_Referentiel', 'pDimension', Dimension, 'pExportFile', Dimension|'.csv' );
	
		If(ProcessReturnCode<> ProcessExitNormal());
			If(ProcessReturnCode = ProcessExitMinorError());
				Status = 'Exit with Minor Error';
			Endif;
			If(ProcessReturnCode = ProcessExitByQuit());
				Status = 'Exit by Quit';
			Endif;
			If(ProcessReturnCode = ProcessExitWithMessage());
				Status = 'Exit with Message';
			Endif;
			If(ProcessReturnCode = ProcessExitSeriousError());
				Status = 'Exit with Serious Error';
			Endif;
			If(ProcessReturnCode = ProcessExitByBreak());
				Status = 'Exit by Break';
			Endif;
		ELSE;
			Status = 'Dimension exported with success';

		ENDIF;
    
		# -- Status MAJ
		CellPutS( Status, 'REF_MANAGEMENT', Dimension, Status_MAJ );
		
		# -- RAZ Flag
		CellPutN( 0, 'REF_MANAGEMENT', Dimension, Flag_MAJ );

	ELSEIF( pManage @= 'Update');
		
		processreturncode = ExecuteProcess('DB_Dim_Generique_Referentiel_Step_1', 'pDim', Dimension, 'pFile', Dimension );

		If(ProcessReturnCode<> ProcessExitNormal());
			If(ProcessReturnCode = ProcessExitMinorError());
				Status = 'Exit with Minor Error';
			Endif;
			If(ProcessReturnCode = ProcessExitByQuit());
				Status = 'Exit by Quit';
			Endif;
			If(ProcessReturnCode = ProcessExitWithMessage());
				Status = 'Exit with Message';
			Endif;
			If(ProcessReturnCode = ProcessExitSeriousError());
				Status = 'Exit with Serious Error';
			Endif;
			If(ProcessReturnCode = ProcessExitByBreak());
				Status = 'Exit by Break';
			Endif;
		ELSE;
			Status = 'Dimension modified with success';

		ENDIF;
			CellPutS( Status, 'REF_MANAGEMENT', Dimension, Status_MAJ );

		# -- RAZ Flag
		CellPutN( 0, 'REF_MANAGEMENT', Dimension, Flag_MAJ );

	ENDIF;

ENDIF;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

IF(pManage @<> 'Create');
	If( ViewExists( psCubeNameSource , sView) = 1); 
                	ViewDestroy( psCubeNameSource, sView); 
   	EndIf; 

	# -- Destroying temporay subsets 
 		vn = 1; 
        		vsDim = TabDim( psCubeNameSource, vn); 
       		While( vsDim @<> ''); 
                		If( SubsetExists( vsDim, sSub)= 1); 
                        			SubsetDestroy( vsDim,  sSub); 
			EndIf; 
                		vn = vn + 1; 
                		vsDim = TabDim( psCubeNameSource, vn); 
        		End; 
ELSE;

	CellPutS( 'The dimension is correctly created', 'REF_MANAGEMENT', pDimension, 'Status_Create' );
  	CellPutS( zUserName, 'REF_MANAGEMENT', pDimension, 'User_Create' );
   	CellPutS( zIteration, 'REF_MANAGEMENT', pDimension, 'Last_Create' );

ENDIF;





#-- Copy the file structure in historical directory
ExecuteProcess( 'z_Tools_Structure_Transfert' , 'zFile' , pDimension );



#endregion