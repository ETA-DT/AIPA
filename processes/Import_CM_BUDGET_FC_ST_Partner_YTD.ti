#region Prolog
#########################################
# Project : Tango - Multi-instance
# Created by :MBO
# Created at : 14/12/2011
# Modified by : MRE
# Modified at : 20/03/2012
# Modify reason : Add the "Full_Year" possibility in period
#########################################


#****Begin: Generated Statements***
#****End: Generated Statements****


zCube = 'ST_Partner_YTD';
zCube_Reject = 'ZZ_PROCESS_REJECT_INSTANCE';

nb_lign = 0;
nb_reject = 0;
nb_load = 0;

zProcess = 'Import_CM_BUDGET_FC_ST_Partner_YTD';

zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');

# 17 11 2014 ### -- WARNING YDE --- YYYY n'existe pas dans la Dim Period_YTD ... Total_YYYY existe ####

pPeriod = CellGetS( 'z_Admin_Param' , 'PERIOD' , 'STR_VAR1');
ParamPhase = CellGetS( 'z_Admin_Param' , 'TYPE_PHASE' , 'STR_VAR1');


Source_File = '\\'|CellGetS( 'z_Admin_Param_Instance' , 'SERVER_NAME' ,'CM','STR_VAR1') | CellGetS( 'z_Admin_Param_Instance' , 'REP_CO_DATA_EXPORT' ,'
CM', 'STR_VAR1') |  pCountry | '_Data_BUDGET_FC_' | zCube | '.csv';

DataSourceNameForServer = Source_File;

#################################################################################
#                                                               Clear Reject Cube
#################################################################################

######
#Call process DB_zz_Date_Time_loading in order to add the new day in the dimension zz_Date_Time_loading
ExecuteProcess('DB_zz_Date_Time_loading');
######

P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );

#-- Create subset in zz_Date_Time_loading and }Processes
IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( 'zz_Process_Source' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Process_Source' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'zz_Process_Source' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );
SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );
SubsetElementInsert( 'zz_Process_Source' , P_NAME_RAZ , pCountry , 1 );

ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Process_Source', P_NAME_RAZ);

#-- Clear cube
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );



#################################################################################
#                                                               Clear CUBE
#################################################################################
P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube , P_NAME_RAZ );
ViewCreate( zCube , P_NAME_RAZ );

#-- Create subset in Legal_Organization
SubsetDestroy( 'Legal_Organization' , P_NAME_RAZ );
SubsetCreate( 'Legal_Organization' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization' )+1 );
   ElemE = DIMNM( 'Legal_Organization' , i );
       IF ( ATTRS ( 'Legal_Organization' , ElemE,'Country_entity' ) @= pCountry ) ;
           SubsetElementInsert( 'Legal_Organization' , P_NAME_RAZ , ElemE , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Legal_Organization' , P_NAME_RAZ );

#-- Create subset in Indicator
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetCreate( 'Indicator' , P_NAME_RAZ );
i=1;
WHILE( i < DIMSIZ ( 'Indicator' ) + 1 );
   ElemI = DIMNM( 'Indicator' , i );
      IF ( ELISANC( 'Indicator' , 'Ind_fi_pl_nat' , ElemI ) > 0 );
           SubsetElementInsert( 'Indicator' , P_NAME_RAZ , ElemI , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Indicator' , P_NAME_RAZ );

############# Create subset in Period #############

IF( SubsetExists( 'Period_YTD' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_RAZ );
ENDIF;
If( SUBST(pPeriod, 1, 6)@='F_year' );
    SubsetElementInsert( 'Period_YTD' , P_NAME_RAZ , pPeriod , 1 );
Else;
    i=1;
    WHILE( i < DIMSIZ ( 'Period_YTD' )+1 );
         ElemP = DIMNM( 'Period_YTD' , i );
         IF( ELLEV( 'Period_YTD' , ElemP ) = 0 & ELISANC( 'Period_YTD' , 'Total_'|pPeriod , ElemP) > 0 );
              SubsetElementInsert( 'Period_YTD' , P_NAME_RAZ , ElemP , 1 );
         ENDIF;
         i=i+1;
     END;
Endif;
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Period_YTD' , P_NAME_RAZ );

########################### Create subset in Phase ###########################

IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;

IF(ParamPhase @= 'Budget');

   i= 0;
   While (i <= 1 );
      pPhase = 'BUDG_V'|NumberToString(i );
      pPhase2 = 'MAN_BUDG_V'|NumberToString(i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , pPhase , i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , pPhase2 , i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'BUDG_VC' , 1 );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'MAN_BUDG_VC' , 1 );

      i=i+1;
   END;
ENDIF;

IF(ParamPhase @= 'Forecast1');

   i= 0;
   While (i <=1 );
      pPhase = 'FC_1_V'|NumberToString(i);
      pPhase2 = 'MAN_FC_1_V'|NumberToString(i);
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , pPhase , i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , pPhase2 , i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'FC_1_VC' , 1 );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'MAN_FC_1_VC' , 1 );

      i=i+1;
   END;
ENDIF;

IF(ParamPhase @= 'Forecast2');

   i= 0;
   While (i <= 1 );
      pPhase = 'FC_2_V'|NumberToString(i);
      pPhase2 = 'MAN_FC_2_V'|NumberToString(i);
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , pPhase , i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , pPhase2 , i );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'FC_2_VC' , 1 );
      SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'MAN_FC_2_VC' , 1 );

      i=i+1;
   END;
ENDIF;

ViewSubsetAssign( zCube , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );
#-- Clear cube
ViewZeroOut( zCube , P_NAME_RAZ );


#-- Delete subset
ViewDestroy( zCube , P_NAME_RAZ );
SubsetDestroy( 'Indicator' , P_NAME_RAZ );
SubsetDestroy( 'Legal_Organization' , P_NAME_RAZ );
SubsetDestroy( 'Period_YTD' , P_NAME_RAZ );




#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


zrecord = vIntegration_rate | ';' | vActivity | ';' | vCurrency | ';' | vGaap | ';' | vLegal_Organization | ';' | vManagement_Organization | ';' |
vPartner | ';' | vPeriod_YTD | ';' | vPhase | ';' | vIndicator | ';' | numbertostring(vValue) ;

#################################################################################
#                                                                             REJECT SECTION
#################################################################################
nb_lign=nb_lign+1;

#-- if the Managment_organization does not exist in management_organization dimension, this record is reject
IF( Dimix( 'Management_Organization' , vManagement_Organization ) = 0 );
      nb_reject=nb_reject+1;
      zerror_message= vActivity | 'does not exist in Activity Dimension : Data is rejeted' ;
      CellPutS( zRecord , zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) ,pCountry, 'Record' );
      CellPutS( zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) ,pCountry, 'Error_Message' );
   Management_Organization=pCountry | '_Reject';
ENDIF;

#-- if there isn't an Integration Rate for the Legal Organization, the Phase and the Period in the cube ST_Entity_Rates, the record is reject
IF(Management_Organization@<>pCountry | '_Reject');
   IF( CellGetN( 'ST_Entity_Rates' , vlegal_organization , pPeriod , vPhase, 'NUM_VAR1') = 0 & CellGetN( 'ST_Entity_Rates' , vlegal_organization  , pP
eriod , vPhase, 'NUM_VAR2') = 0);
         nb_reject=nb_reject+1;
         zerror_message= ' Rejected Data : There is not an Integration Rate in the cube ST_Entity_Rates with the mapping between ' | vlegal_organizati
on  | ', ' | vPhase | ' and ' | pPeriod | ' at line ' |  numbertostring(nb_lign) ;
      CellPutS( zRecord , zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) ,pCountry, 'Record' );
      CellPutS( zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString(Nb_Reject) ,pCountry, 'Error_Message' );
         ItemSkip;
    ENDIF;
ENDIF;

################################################################################
#                                                               INPUT SECTION : Cube => RP_PL
################################################################################

#-- => RP_PL
if(Management_Organization @<>pCountry | '_Reject');
        Management_Organization=vmanagement_Organization;
endif;


IF( CellIsUpdateable (zCube , vIntegration_rate , vActivity , vCurrency ,vGaap ,vLegal_Organization,vManagement_Organization ,vPartner
,vPeriod_YTD, vPhase , vIndicator) <> 0 );

  CellPutN( vValue , zCube , vIntegration_rate , vActivity , vCurrency ,vGaap ,vLegal_Organization,vManagement_Organization ,vPartner
  ,vPeriod_YTD, vPhase , vIndicator);

ENDIF;

if(Management_Organization @<>pCountry | '_Reject');
    nb_load=nb_load+1;
endif;


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****



zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             PROCESS with PERIOD and INSTANCE
#################################################################################
zCube_Process_PP = 'ZZ_PROCESS_Detail_Instance';
pChore = 'Task5_CM_Import_CM_Data_Export_CO_Data';

pInstance=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');
pSource =pCountry;

pPeriod=CellGetS( 'z_Admin_Param' , 'PERIOD' , 'STR_VAR1');

CellPutS(zDateTimeLoadingStart , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pInstance ,pSource ,'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pInstance ,pSource ,'End_date');

CellPutS( NumberToString(nb_lign) , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pInstance ,pSource , 'Nb_Input_records');
CellPutS( NumberToString(nb_reject) , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart ,pInstance ,pSource , 'Nb_reject_records');
CellPutS( NumberToString(nb_load) , zCube_Process_PP , pChore , zProcess , pPeriod , zDateLoadingStart , pInstance ,pSource , 'Nb_load_records');

CellPutS('OK' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pInstance ,pSource , 'Status');

IF( Nb_Lign = Nb_Load);
    CellPutS( 'OK' , zCube_Process_PP, pChore , zProcess , pPeriod , zDateLoadingStart ,
    pInstance ,pSource, 'Status');
ELSE;
    CellPutS( 'KO' , zCube_Process_PP, pChore , zProcess , pPeriod , zDateLoadingStart ,
   pInstance ,pSource , 'Status');
ENDIF;

#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################
zCube_Process = 'ZZ_PROCESS_DETAIL';

CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date');
CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date');
CellPutS( NumberToString(nb_lign) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_Input_records');
CellPutS( NumberToString(nb_reject) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_reject_records');
CellPutS( NumberToString(nb_load) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_load_records');

IF( Nb_Lign = Nb_Load);
    CellPutS( 'OK' , zCube_Process , zProcess , zDateLoadingStart , 'Status');
ELSE;
    CellPutS( 'KO' , zCube_Process , zProcess , zDateLoadingStart , 'Status');
    ItemReject( 'Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail_instance and  zz_Process_Reject_instan
ce' );
ENDIF;

#################################################################################
#                                                                             END PROCESS
#################################################################################
#endregion