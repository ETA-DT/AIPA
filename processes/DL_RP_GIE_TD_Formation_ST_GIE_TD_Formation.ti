#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

################### Cubes ###################
zCube_Source = 'ST_GIE_Transdev_Formation';
zCube_Cible = 'RP_GIE_Transdev_Formation';
zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';

################### Initialisation des compteurs ###################
Nb_Lign = 0;
Nb_Reject = 0;
Nb_Load = 0;


################### Paramètres ###################
zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');


 #-- Default execution  
      IF( PS_Period @= 'Param');

      VS_VAR_PERIOD = CellGetS( 'z_Admin_Param' , 'MONTH_CORPORATE' , 'STR_VAR1');
      
      ELSE;

      #-- Unusual execution with a specific value

      VS_VAR_PERIOD = PS_PERIOD;

     ENDIF;



zProcess = 'DL_RP_GIE_TD_Formation_ST_GIE_TD_Formation';

################### MAJ de la dimension date ###################

ExecuteProcess('DB_zz_Date_Time_loading');


#################################################################################
#   PURGE DU CUBE ciblée RP_GIE_Transdev_Formation 
#################################################################################


P_NAME_Cible = zCube_Cible  | '_RAZ';
ViewDestroy( zCube_Cible , P_NAME_Cible);
ViewCreate( zCube_Cible  , P_NAME_Cible );

################### Création du subset  dans Phase ################### 

IF( SubsetExists( 'Phase' , P_NAME_Cible ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_Cible);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_Cible );
ENDIF;

SubsetElementInsert( 'Phase' ,P_NAME_Cible , 'ACT' , 1 );
ViewSubsetAssign( zCube_Cible, P_NAME_Cible , 'Phase' , P_NAME_Cible );


################### Création du subset  dans Period_YTD ################### 

IF( SubsetExists( 'Period' , P_NAME_Cible) = 1 );
    SubsetDeleteAllElements( 'Period' , P_NAME_Cible);
ELSE;
    SubsetCreate( 'Period' , P_NAME_Cible );
ENDIF;

#SubsetElementInsert( 'Period' , P_NAME_Cible , PS_Period, 1 );
SubsetElementInsert( 'Period' , P_NAME_Cible , VS_VAR_PERIOD, 1 );
ViewSubsetAssign( zCube_Cible , P_NAME_Cible , 'Period' ,  P_NAME_Cible  );


###################  Nettoyage du cube ################### 

ViewZeroOut( zCube_Cible,  P_NAME_Cible  );

###################  Suppression des subsets ################### 

ViewDestroy( zCube_Cible ,  P_NAME_Cible  );
SubsetDestroy( 'Phase' ,  P_NAME_Cible  );
SubsetDestroy( 'Period_YTD' ,  P_NAME_Cible  );


#################################################################################
#   Vue source du cube ST_GIE_Transdev_Formation
#################################################################################


P_NAME_SOURCE = zCube_Source | '_RAZ';
ViewDestroy( zCube_Source , P_NAME_SOURCE );
ViewCreate( zCube_Source , P_NAME_SOURCE );


################### Création du subset  dans  GIE_Antennes ################### 


IF( SubsetExists( 'GIE_Antennes'  , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements('GIE_Antennes'  , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'GIE_Antennes'  , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ('GIE_Antennes'  )+1 );
   ElemM = DIMNM( 'GIE_Antennes' , i );
           IF( ELLEV( 'GIE_Antennes'  , ElemM ) = 0 );
                  SubsetElementInsert( 'GIE_Antennes' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'GIE_Antennes', P_NAME_SOURCE);



################### Création du subset  dans  GIE_Type_formation ################### 


IF( SubsetExists( 'GIE_Type_formation' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'GIE_Type_formation' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'GIE_Type_formation' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'GIE_Type_formation' )+1 );
   ElemM = DIMNM( 'GIE_Type_formation' , i );
           IF( ELLEV( 'GIE_Type_formation' , ElemM ) = 0 );
                  SubsetElementInsert( 'GIE_Type_formation' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'GIE_Type_formation' , P_NAME_SOURCE);



################### Création du subset  dans  GIE_Partenaires ################### 


IF( SubsetExists( 'GIE_Partenaires' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'GIE_Partenaires' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'GIE_Partenaires' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'GIE_Partenaires' )+1 );
   ElemM = DIMNM( 'GIE_Partenaires' , i );
           IF( ELLEV( 'GIE_Partenaires' , ElemM ) = 0 );
                  SubsetElementInsert( 'GIE_Partenaires' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'GIE_Partenaires' , P_NAME_SOURCE);



################### Création du subset  dans Phase ################### 

IF( SubsetExists( 'Phase' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_SOURCE , 'ACT' , 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Phase' , P_NAME_SOURCE );


################### Création du subset  dans Period_YTD ################### 

IF( SubsetExists( 'Period_YTD' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_SOURCE);
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_SOURCE );
ENDIF;
#SubsetElementInsert( 'Period_YTD' , P_NAME_SOURCE , ps_Period, 1 );
SubsetElementInsert( 'Period_YTD' , P_NAME_SOURCE , VS_VAR_PERIOD, 1 );
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'Period_YTD' , P_NAME_SOURCE );



################### Création du subset dans GIE_Nat_Analytique ################### 


IF( SubsetExists( 'GIE_Nat_Analytique' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'GIE_Nat_Analytique' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'GIE_Nat_Analytique' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'GIE_Nat_Analytique' )+1 );
   ElemM = DIMNM( 'GIE_Nat_Analytique' , i );
           IF( ELLEV( 'GIE_Nat_Analytique' , ElemM ) = 0 );
                  SubsetElementInsert( 'GIE_Nat_Analytique' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'GIE_Nat_Analytique' , P_NAME_SOURCE);



################### Création du subset  dans  GIE_Indicator ################### 


IF( SubsetExists( 'GIE_Indicator' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'GIE_Indicator' , P_NAME_SOURCE);
ELSE;
     SubsetCreate( 'GIE_Indicator' , P_NAME_SOURCE );
ENDIF;

i=1;
WHILE( i < DIMSIZ ( 'GIE_Indicator' )+1 );
   ElemM = DIMNM( 'GIE_Indicator' , i );
           IF( ELLEV( 'GIE_Indicator' , ElemM ) = 0 );
                  SubsetElementInsert( 'GIE_Indicator' , P_NAME_SOURCE , ElemM , 1 );
           ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube_Source , P_NAME_SOURCE , 'GIE_Indicator' , P_NAME_SOURCE);



###################  Paramètre d'extraction ################### 

ViewExtractSkipZeroesSet ( zCube_Source , P_NAME_SOURCE , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Source , P_NAME_SOURCE , 0 );
ViewExtractSkipCalcsSet ( zCube_Source , P_NAME_SOURCE , 0 );


DatasourceNameForServer = zCube_Source ;
DatasourceCubeview = P_NAME_SOURCE ;










#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


Nb_Lign=Nb_Lign + 1;

#################################################################################
#                                                               Chargement du cube RP_GIE_Transdev_Formation
#################################################################################

IF( CellIsUpdateable( zCube_Cible , VS_DAT_ANTENNES, VS_DAT_TYPE_FORMATION, VS_DAT_PARTENAIRES, VS_DAT_PHASE, VS_DA
T_PERIOD_YTD, VS_DAT_NAT_ANALYTIQUE, VS_DAT_INDICATOR) = 1 );

TextOutput( GetProcessName() | '.csv', VS_DAT_ANTENNES , VS_DAT_TYPE_FORMATION , VS_DAT_PARTENAIRES , VS_DAT_PHASE , VS_DAT_NAT_ANALYTIQUE , VS_DAT_INDICATOR , NUMBERTOSTRING( VN_DAT_VALUE ) ) ;


                CellPutN ( VN_DAT_Value, zCube_Cible,  VS_DAT_ANTENNES, VS_DAT_TYPE_FORMATION, VS_DAT_PARTENAIRES, VS_DAT_PHASE, VS_DA
T_PERIOD_YTD, VS_DAT_NAT_ANALYTIQUE, VS_DAT_INDICATOR);

ENDIF;



Nb_Load=Nb_Load + 1;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

###################  Suppression des subsets ################### 


ViewDestroy( zCube_Source , P_NAME_SOURCE );

SubsetDestroy( 'GIE_Antennes' , P_NAME_SOURCE );
SubsetDestroy( 'GIE_Type_formation' , P_NAME_SOURCE );
SubsetDestroy( 'GIE_Partenaires' , P_NAME_SOURCE );
SubsetDestroy( 'Phase' , P_NAME_SOURCE );
SubsetDestroy( 'Period' , P_NAME_SOURCE );
SubsetDestroy( 'GIE_Nat_Analytique' , P_NAME_SOURCE );
SubsetDestroy( 'GIE_Indicator' , P_NAME_SOURCE );



zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');

#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################

CellPutS(zDateTimeLoadingStart , zCube_Process, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) , zCube_Process, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(nb_lign = nb_load);
    CellPutS('OK' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
else;
    CellPutS('KO' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
endif;


#################################################################################
#                                                                             END PROCESS
#################################################################################
#endregion