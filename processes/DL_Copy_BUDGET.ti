#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****




#-- Variables
zProcess = 'DL_Copy_BUDGET';
zDateLoadingStart = TIMST( NOW , '\Y-\M-\D' );
zDateTimeLoadingStart = TIMST( NOW , '\Y-\M-\D \h:\i:\s' );

zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';

#################################################################################
#                                                               Clear Reject Cube
#################################################################################

######
#Call process DB_zz_Date_Time_loading in order to add the new day in the dimension zz_Date_Time_loading
ExecuteProcess('DB_zz_Date_Time_loading');
######

P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );

#-- Create subset in zz_Date_Time_loading and }Processes
IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );
SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );

ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);

#-- Clear cube
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');

#-- If the period does not exist in Period dimension, this process is rejected
IF( DIMIX( 'Period' , pPeriod ) = 0 );
   zError_message = 'Rejected Data : ' | pPeriod | ' does not exist in dimension Period' ;
   CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
   CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
   CellPutS( 'KO' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
   CellPutS( zError_message , zCube_Reject, zProcess , zDateLoadingStart , 'l1', 'Error_Message' );
   ItemSkip;
ELSE;
   CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
   CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
   CellPutS( 'OK' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
ENDIF;

#-- If the Phase does not exist in Phase dimension, this process is rejected
IF( DIMIX( 'Phase' , pSourceVersion ) = 0 );
   zError_message = 'Rejected Process : ' | pSourceVersion | ' does not exist in dimension Phase' ;
   CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
   CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
   CellPutS( 'KO' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
   CellPutS( zError_message , zCube_Reject, zProcess , zDateLoadingStart , 'l1', 'Error_Message' );
   ItemSkip;
ELSE;
   CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
   CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
   CellPutS( 'OK' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
ENDIF;

#-- If the Phase does not exist in Phase dimension, this process is rejected
IF( DIMIX( 'Phase' , pTargetVersion ) = 0 );
   zError_message = 'Rejected Process : ' | pTargetVersion | ' does not exist in dimension Phase' ;
   CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
   CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
   CellPutS( 'KO' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
   CellPutS( zError_message , zCube_Reject, zProcess , zDateLoadingStart , 'l1', 'Error_Message' );
   ItemSkip;
ELSE;
   CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
   CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
   CellPutS( 'OK' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
ENDIF;



########################################
########################################
########################################
#ExecuteProcess( 'z_Rules_Copy' );

ExecuteProcess( 'DL_Copy_BUDGET_FC_ST_CURRENCY' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod );

ExecuteProcess( 'DL_Copy_BUDGET_FC_ST_ENTITY_RATES' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );

ExecuteProcess( 'DL_Copy_BUDGET_FC_ST_PARTNER_YTD' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );
#ExecuteProcess( 'z_Rules_Paste_ST_PARTNER_YTD' );

ExecuteProcess( 'DL_Copy_BUDGET_FC_ST_PARTNER_VECTOR_YTD' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );
#ExecuteProcess( 'z_Rules_Paste_ST_PARTNER_VECTOR_YTD' );

ExecuteProcess( 'DL_Copy_BUDGET_FC_RP_Comments_PL_Budget', 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod );

ExecuteProcess( 'DL_Copy_BUDGET_FC_RP_Vector' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );

ExecuteProcess( 'DL_Copy_BUDGET_FC_RP_PL' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );
#ExecuteProcess( 'z_Rules_Paste_RP_PL' );

ExecuteProcess( 'DL_Copy_BUDGET_FC_RP_Economic_Type_client' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );
#ExecuteProcess('z_Rules_Paste_RP_Economic_Type_client');

ExecuteProcess( 'DL_Copy_BUDGET_FC_Report_PL' , 'pSourceVersion' , pSourceVersion ,
'pTargetVersion' , pTargetVersion , 'pPeriod' , pPeriod , 'pSource' , pSource );
#ExecuteProcess( 'z_Rules_Paste_Report_PL' );

#endregion