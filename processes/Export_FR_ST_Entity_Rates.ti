#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#-- Déclaration des variables
zCube = 'ST_Entity_Rates';
CPT = 1;

#-- Définition du type de délimiter
DatasourceASCIIDelimiter =';';

#-- Définition du nom et de l'emplacement du fichier de message
CTRL_FILE = CellGetS( 'Z_ADMIN_PARAM' , 'REP_OUTPUT' , 'STR_VAR1' ) | '\' | zCube | '_ST_Entity_Rates_vers_PR_Taux' | '.txt';
IF( FileExists( CTRL_FILE ) = 1 );
   ASCIIDELETE( CTRL_FILE );
ENDIF;

#-- Définiton du fichier d'export
Export_File = CellGetS( 'z_Admin_Param' , 'REP_DATA_TANGO_FR' , 'STR_VAR1' ) | '\' | 'Tango_Fr_Data_' | zCube |'_'| pPhase | '.csv';
IF( FileExists( Export_File ) = 1 );
   ASCIIDELETE( Export_File );
ENDIF;

#-- Définition de la phase et de la période
IF( pPhase @= 'REALISE' );
    pPhase = 'ACT';
    pPeriode = CellGetS( 'z_Admin_Param' , 'MONTH_ACTUAL' , 'STR_VAR1' );
ELSE;
#    pPhase = CellGetS( 'z_Admin_Param' , 'TYPE_PHASE' , 'STR_VAR1' );
    IF( pPhase @= 'BUDGET' );
        pPhase = 'BUDG_VC';
        pPeriode = ATTRS( 'Period' , CellGetS( 'z_Admin_Param' , 'YEAR_ACTUAL' , 'STR_VAR1' ) , 'Next Year' );
    ELSEIF (pPhase @='ESTIME');
        Forecast = CellGetS( 'z_Admin_Param' , 'TYPE_PHASE' , 'STR_VAR1' );
        IF( Forecast @= 'Forecast1' );
             pPhase = 'FC_1_VC';
        ELSEIF( Forecast @= 'Forecast2' );
             pPhase = 'FC_2_VC';
        ENDIF;
             pPeriode = CellGetS( 'z_Admin_Param' , 'YEAR_ACTUAL' , 'STR_VAR1' );
    ENDIF;
ENDIF;

#-- Suppression de la Consignation dans la log
CubeSetLogChanges( zCube , 0 );

#################################################################################
#                                                               Cube Source
#################################################################################
P_NAME_SOURCE = zCube | '_ST_Entity_Rates_vers_PR_Taux_Vue';
ViewDestroy( zCube , P_NAME_SOURCE );
ViewCreate( zCube , P_NAME_SOURCE );

#-- Création du sous-ensemble Legal_Organization
SubsetDestroy( 'Legal_Organization' , P_NAME_SOURCE );
SubsetCreate( 'Legal_Organization' , P_NAME_SOURCE );
i=1;
WHILE( i < DIMSIZ ( 'Legal_Organization' )+1 );
   ElemE = DIMNM( 'Legal_Organization' , i );

# -- BTA 20/01/2016 : Modification pour corriger l'erreur 
#      IF ( ATTRS ( 'Legal_Organization' , ElemE , 'Country_Entity' ) @= 'FR' ) ;
      IF ( ATTRS ( 'Legal_Organization' , ElemE , 'Country_Entity' ) @= 'France' ) ;
           SubsetElementInsert( 'Legal_Organization' , P_NAME_SOURCE , ElemE , 1 );
      ENDIF;
    i=i+1;
END;
ViewSubsetAssign( zCube , P_NAME_SOURCE , 'Legal_Organization' , P_NAME_SOURCE );


#-- Création du sous-ensemble Period
IF( SubsetExists( 'Period' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'Period' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Period' , P_NAME_SOURCE );
ENDIF;
IF( pPhase @= 'ACT' );
    SubsetElementInsert( 'Period' , P_NAME_SOURCE , pPeriode , 1 );
ELSE;
   i = 1;
   WHILE( i < DIMSIZ( 'Period' ) + 1 ) ;
       ElemP = DIMNM( 'Period' , i ) ;
       IF( ELISANC( 'Period' , pPeriode , ElemP ) > 0 & ELLEV( 'Period' , ElemP ) = 0 ) ;
           SubsetElementInsert( 'Period' , P_NAME_SOURCE , ElemP , 1 ) ;
       ENDIF;
       i = i + 1;
   END;
ENDIF;
ViewSubsetAssign( zCube, P_NAME_SOURCE , 'Period' , P_NAME_SOURCE );


#-- Création du sous-ensemble Phase
IF( SubsetExists( 'Phase' , P_NAME_SOURCE ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'Phase' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_SOURCE , pPhase , 1 );
ViewSubsetAssign( zCube , P_NAME_SOURCE , 'Phase' , P_NAME_SOURCE );


#-- Création du sous-ensemble z_Str_Var
IF( SubsetExists( 'z_Str_Var' , P_NAME_SOURCE ) = 1 );
    SubsetDeleteAllElements( 'z_Str_Var' , P_NAME_SOURCE );
ELSE;
    SubsetCreate( 'z_Str_Var' , P_NAME_SOURCE );
ENDIF;
SubsetElementInsert( 'z_Str_Var' , P_NAME_SOURCE , 'NUM_VAR1' , 1 );
ViewSubsetAssign( zCube, P_NAME_SOURCE , 'z_Str_Var' , P_NAME_SOURCE );


#-- Mise à jour des paramètres de la vue source
ViewExtractSkipZeroesSet ( zCube , P_NAME_SOURCE , 1 );
ViewExtractSkipRuleValuesSet ( zCube , P_NAME_SOURCE , 0 );
ViewExtractSkipCalcsSet ( zCube , P_NAME_SOURCE , 1 );

DatasourceNameForServer = zCube ;
DatasourceCubeview = P_NAME_SOURCE ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


#-- Entête de fichier
IF( CPT = 1);
     ASCIIOUTPUT( Export_File , 'Period' , 'Phase' , 'Legal_Organization' , 'z_Str_Var' , 'Valeur' );
     CPT = 0;
ENDIF;

#-- Export du fichier de données
ASCIIOUTPUT( Export_File , Period , Phase , Legal_Organization , z_Str_Var , Valeur );
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#-- Activation de la Consignation dans la log
CubeSetLogChanges( zCube , 1 );

ViewDestroy( zCube , P_NAME_SOURCE );
SubsetDestroy( 'Legal_Organization' , P_NAME_SOURCE );
SubsetDestroy( 'Period' , P_NAME_SOURCE );
SubsetDestroy( 'Phase' , P_NAME_SOURCE );
SubsetDestroy( 'z_Str_Var' , P_NAME_SOURCE );
#endregion