#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#########################################
# Project : Tango - Data Load -> Storage Cube ST_VECTOR_YTD
# Created by : FBU
# Created at : 18/08/2011
# Modified by : 
# Modified at : 
# Modify reason :
#########################################

zCube = 'ST_Vector_YTD';
CubeSetLogChanges(zCube, 0);
zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';
nb_lign = 0;
nb_ligne = 0;
nb_reject = 0;
nb_load = 0;
zSource = 'VTD_Vector';
zProcess = 'DL_ST_Vector_YTD_Actual_PL';
zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');
pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_ACTUAL' , 'STR_VAR1');

#Source_File = CellGetS( 'z_Admin_Param' , 'REP_DATA' , 'STR_VAR1') | '\Data_P&L_Actual_'| pPeriod |'_'| zSource | '.csv';

# -- BTA 13/12/2016 : Modification du repertoire source : REP_DATA_VECTOR
Source_File = CellGetS( 'z_Admin_Param' , 'REP_DATA_VECTOR' , 'STR_VAR1') | '\Data_P&L_Actual_' |  zSource | '.csv';


DataSourceNameForServer = Source_File;

IF (FileExists (Source_File) =0);
      CubeSetLogChanges(zCube, 1);
     ItemReject(  DataSourceNameForServer | ' is not find' );
     ProcessQuit;
ENDIF;

####################
#-- Test date
####################
IF( pPeriod @= 'previous_month' );
    pPeriod = ATTRS( 'Period' , TIMST( NOW ,'\Y.\m' ) , 'M-1' ) ;
ENDIF;


#################################################################################
#                                                               Clear Reject Cube
#################################################################################

######
#Call process DB_zz_Date_Time_loading in order to add the new day in the dimension zz_Date_Time_loading
ExecuteProcess('DB_zz_Date_Time_loading');
######

P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );

#-- Create subset in zz_Date_Time_loading and }Processes
IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );
SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );

ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);

#-- Clear cube
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

#-- Update subset
ViewExtractSkipZeroesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipRuleValuesSet ( zCube_Reject , P_NAME_RAZ , 1 );
ViewExtractSkipCalcsSet ( zCube_Reject , P_NAME_RAZ , 1 );

#-- Delete subset
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );


#################################################################################
#                                                               Clear CUBE
#################################################################################
P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube , P_NAME_RAZ );
ViewCreate( zCube , P_NAME_RAZ );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ , 'ACT' , 1 );
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Phase' , P_NAME_RAZ );


#-- Create subset in Period_YTD
IF( SubsetExists( 'Period_YTD' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_RAZ);
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_RAZ );
ENDIF;
SubsetElementInsert( 'Period_YTD' , P_NAME_RAZ , pPeriod | '_YTD', 1 );
ViewSubsetAssign( zCube , P_NAME_RAZ , 'Period_YTD' , P_NAME_RAZ );

# Mantis 2089-2090

#-- Clear cube
#ViewZeroOut( zCube , P_NAME_RAZ );

#-- Update subset
#ViewExtractSkipZeroesSet ( zCube , P_NAME_RAZ , 1 );
#ViewExtractSkipRuleValuesSet ( zCube , P_NAME_RAZ , 1 );
#ViewExtractSkipCalcsSet ( zCube , P_NAME_RAZ , 1 );

#-- Delete subset
#ViewDestroy( zCube , P_NAME_RAZ );
#SubsetDestroy( 'Phase' , P_NAME_RAZ );
#SubsetDestroy( 'Period_YTD' , P_NAME_RAZ );



#################################################################################
#                                                               Clear CUBE - Cube => ST_PARTNER_VECTOR_YTD
#################################################################################
zCubePar = 'ST_PARTNER_VECTOR_YTD';

P_NAME_RAZ2 = zCubePar | '_RAZ2';
ViewDestroy( zCubePar , P_NAME_RAZ2 );
ViewCreate( zCubePar , P_NAME_RAZ2 );

#-- Create subset in Phase
IF( SubsetExists( 'Phase' , P_NAME_RAZ2 ) =1 );
    SubsetDeleteAllElements( 'Phase' , P_NAME_RAZ2);
ELSE;
    SubsetCreate( 'Phase' , P_NAME_RAZ2 );
ENDIF;
SubsetElementInsert( 'Phase' , P_NAME_RAZ2 , 'ACT' , 1 );
ViewSubsetAssign( zCubePar , P_NAME_RAZ2 , 'Phase' , P_NAME_RAZ2 );

#-- Create subset in Period_YTD
IF( SubsetExists( 'Period_YTD' , P_NAME_RAZ2 ) = 1 );
    SubsetDeleteAllElements( 'Period_YTD' , P_NAME_RAZ2);
ELSE;
    SubsetCreate( 'Period_YTD' , P_NAME_RAZ2 );
ENDIF;
SubsetElementInsert( 'Period_YTD' , P_NAME_RAZ2 , pPeriod | '_YTD', 1 );
ViewSubsetAssign( zCubePar , P_NAME_RAZ2 , 'Period_YTD' , P_NAME_RAZ2 );

# Mantis 2089-2090

#-- Clear cube
#ViewZeroOut( zCubePar , P_NAME_RAZ2 );

#-- Update subset
#ViewExtractSkipZeroesSet ( zCubePar , P_NAME_RAZ2 , 1 );
#ViewExtractSkipRuleValuesSet ( zCubePar , P_NAME_RAZ2 , 1 );
#ViewExtractSkipCalcsSet ( zCubePar , P_NAME_RAZ2 , 1 );

#-- Delete subset
#ViewDestroy( zCubePar , P_NAME_RAZ2 );
#SubsetDestroy( 'Phase' , P_NAME_RAZ2 );
#SubsetDestroy( 'Period_YTD' , P_NAME_RAZ2 );





#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

# Mantis 2089-2090
# if the Period is different of the period in the file this record is reject
nb_ligne = nb_ligne + 1;

IF (nb_ligne = 1);
   IF( Period @<> pPeriod );
      zerror_message='Rejected Data : The period in parameter is different of the period in the file at lign ' |  numbertostring(nb_lign) ;
      CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l1', 'Error_Message');
      ProcessQuit;
   ELSE;
      ExecuteProcess( 'z_Purge_DL_ST', 'Cube_Name' , zCube ,'Cube_View' , P_NAME_RAZ  );
      ExecuteProcess( 'z_Purge_DL_ST', 'Cube_Name' , zCubePar ,'Cube_View' , P_NAME_RAZ2  );
   ENDIF;
ENDIF;


#-- Phase
Phase = 'ACT';

#-- Indicator
#--  RZA => Mantis 1337 : Multiplication par (-1) de 3 indicateurs (TXINV,50NFI240 et 50NFI250) lors du chargement#
IF(Account @='TXINV' % Account @='50NFI240' % Account @='50NFI250' );
Indicator = CellGetS( 'TC_IND_PL_VECTOR' , Flow , Account , 'STR_VAR1' );
    vamount1=Amount_Local*(-1);
    vamount2=Amount_Local_Converti*(-1);
    vamount3=Amount_Consolide*(-1);

ELSE;
Indicator = CellGetS( 'TC_IND_PL_VECTOR' , Flow , Account , 'STR_VAR1' );
    vamount1=Amount_Local;
    vamount2=Amount_Local_Converti;
    vamount3=Amount_Consolide;

ENDIF;


#Mantis 1882 : modification sur le traitement du cash flow ######################################

IF ( Account @='NFI220' % Account @= 'NFI260' % Account @= 'TCI2_F01' % Account @='TCI2_F88' % Account @='TCI2_F91' % Account @='NFI240' % Account @= 
'NFI250' % Account@='NFI270' % Account @='TCI2_F98' % Account @='NFI275' % Account @='AS4300_F13' % Account @='PL2225' % Account @='NFI295' % Account 
@='NFI165' % Account @='NFI150' % Account @='NFI400');

Indicator = CellGetS( 'TC_IND_PL_VECTOR' , Flow , Account , 'STR_VAR1' );    

     IF ( Nature @='5DIS10' % Nature @= '5DIS10SC');
      
          vamount1=Amount_Local*0;
          vamount2=Amount_Local_Converti*0;
          vamount3=Amount_Consolide*0;

       ELSE;
              
           vamount1=Amount_Local;
           vamount2=Amount_Local_Converti;
           vamount3=Amount_Consolide;

      ENDIF;

ENDIF;


#IF ( Account @='NFIDIS');

#Indicator = CellGetS( 'TC_IND_PL_VECTOR' , Flow , Account , 'STR_VAR1' );    

#     IF (Nature @<>'5DIS10' & Nature @<> '5DIS10SC') ;

#          vamount1=Amount_Local*0;
#          vamount2=Amount_Local_Converti*0;
#          vamount3=Amount_Consolide*0;

#      ELSE;
              
#           vamount1=Amount_Local;
#           vamount2=Amount_Local_Converti;
#           vamount3=Amount_Consolide;

#      ENDIF;

#ENDIF;
#################### Fin Mantis 1882 ############################################

#################### YAD NFILEV 07.02.2014 ############################################


IF ( Account @='NFILEV');

      Indicator = CellGetS( 'TC_IND_PL_VECTOR' , Flow , Account , 'STR_VAR1' );    

     IF (  Flow @='F99' & (  Nature @='5DIS10' % Nature @= '5DIS10SC' ) ) ;
          Indicator = 'NFIDIS';
      ENDIF;
              
      vamount1=Amount_Local;
      vamount2=Amount_Local_Converti;
      vamount3=Amount_Consolide;

ENDIF;

#################### FIN YAD NFILEV 07.02.2014 ############################################

#-- FBU => Mantis 1125
IF( Indicator @=' Tech_Acc' );
   ItemSkip;
ENDIF;

zRecord = Phase |';' | Exercice | ';' | Period | ';' | Unite | ';' |  Account | ';' | Nature | ';' | Flow | ';' | Partner | ';' | 
NumberToString(Amount_local) | ';' | NumberToString(Amount_local_converti) | ';' | NumberToString(Amount_consolide);

#################################################################################
#                                                                             REJECT SECTION
#################################################################################
Nb_Lign = Nb_Lign + 1;

#-- If the Period is dIfferent of the period in the file this record is reject
IF( Period @<> pPeriod );
   nb_reject=nb_reject+1;
   zerror_message = 'The period in parameter is different of the period in the file at lign ' |  NumberToString(nb_lign) ;
   CellPutS(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString( nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString( nb_reject), 'Error_Message');
   ItemSkip;
ENDIf;

#-- If the Period is empty, this record is reject
IF( Period @='' );
   nb_reject = nb_reject+1;
   zerror_message = 'The period is empty in the file at lign ' |  NumberToString(nb_lign) ;
   CellPutS(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString( nb_reject) , 'Record');
   CellPutS(zerror_message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString( nb_reject), 'Error_Message');
   ItemSkip;
ENDIf;

#-- If the period is not exists in Period dimension, this record is reject
IF( Dimix('Period', Period) = 0 );
   nb_reject=nb_reject+1;
   zerror_message= Period | ' does not exist in dimension Period at line ' |  NumberToString(nb_lign) ;
   CellPutS(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess , zDateLoadingStart , 'l' | NumberToString(nb_reject), 'Error_Message');
   ItemSkip;
ENDIf;

#-- If the indicator is consolidated element
IF( ELLEV('indicator_vector', Indicator)<> 0 );
   nb_reject=nb_reject+1;
   zerror_message = Indicator | ' is a consolidated element at lign ' |  NumberToString(nb_lign) ;
   CellPutS(zrecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | NumberToString(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess  , zDateLoadingStart , 'l' | NumberToString(nb_reject), 'Error_Message');
   ItemSkip;
ENDIf;

#-- If the Unite is not exists in Legal_Organization dimension
IF( Dimix( 'Legal_Organization ' , unite ) = 0 );
   nb_reject=nb_reject+1;
   zerror_message = Unite | ' does not exists in dimension Legal_Organization at lign ' | NumberToString(nb_lign) ;
   CellPutS(zrecord,  zCube_Reject , zProcess , zDateLoadingStart ,  'l' | NumberToString(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess  , zDateLoadingStart , 'l' | NumberToString(nb_reject), 'Error_Message');
   ItemSkip;
ENDIf;

#-- If the nature is not exists in Audit_ID dimension, this record is reject
IF( Dimix('Audit_ID', Nature) = 0 );
   nb_reject=nb_reject+1;
   zerror_message = nature | ' does not exist in dimension Audit_ID at line ' | NumberToString(nb_lign) ;
   CellPutS(zrecord,  zCube_Reject , zProcess , zDateLoadingStart ,  'l' | NumberToString(nb_reject),'Record');
   CellPutS(zerror_message , zCube_Reject, zProcess  , zDateLoadingStart , 'l' | NumberToString(nb_reject), 'Error_Message');
   ItemSkip;
ENDIf;

################################################################################
#                                                                   INPUT SECTION : Cube => ST_Vector_YTD
################################################################################
#-- Input dans le cube ST_Vector_YTD
#-- Period
Period = pPeriod | '_YTD';



#-- Audit IDItemReject( 'Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
Audit_ID = Nature;

#-- Input
Cumul = CellGetN ( zCube , 'LCL' , Audit_ID , Unite , Period , Phase , 'NO_APP' , Indicator );
CellPutN(vamount1 + Cumul , zCube , 'LCL' , Audit_ID , Unite , Period , Phase , 'NO_APP' , Indicator );

Cumul = CellGetN ( zCube , 'EUR', Audit_ID , Unite , Period , Phase , 'APP' , Indicator );
CellPutN(vamount3 + Cumul , zCube , 'EUR' , Audit_ID , Unite , Period , Phase , 'APP', Indicator );

#-- ModIfication => EUR/NO_APP are now calculated
#Cumul = CellGetN ( zCube , 'EUR' , Audit_ID , Unite , Period , Phase , 'NO_APP' , Indicator );
#CellPutN(vamount2+ Cumul , zCube , 'EUR' , Audit_ID , Unite , Period , Phase , 'NO_APP' , Indicator );


################################################################################
#                                                      INPUT SECTION : Cube => ST_Partner_Vector_YTD
################################################################################
IF( DIMIX( 'Partner' , Partner ) = 0 );
    Partner='Other_VE_entities';
ENDIF;
IF( Partner @= 'S9999' ) ;
    Partner='SU9999';
ENDIF;

IF( DIMIX( 'Indicator_Vector' , Indicator ) > 0 & ELLEV( 'Indicator_Vector' , Indicator ) = 0) ;
    Cumul = CellGetN ( zCubePar , 'NO_APP' ,  'LCL' , Audit_ID, Unite , Partner , Period , Phase , Indicator );
    CellPutN(vamount1+ Cumul , zCubePar , 'NO_APP' , 'LCL', Audit_ID, Unite , Partner , Period , Phase , Indicator );

    Cumul = CellGetN ( zCubePar , 'APP' ,  'EUR' ,Audit_ID, Unite ,  Partner , Period , Phase , Indicator );
    CellPutN(vamount3 + Cumul , zCubePar , 'APP' , 'EUR', Audit_ID , Unite , Partner , Period , Phase , Indicator );

#-- ModIfication => EUR/NO_APP are now calculated
#    Cumul = CellGetN ( zCubePar , 'NO_APP' ,  'EUR' , Audit_ID, Unite , Partner , Period , Phase , Indicator );
#    CellPutN(vamount2+ Cumul , zCubePar , 'NO_APP' , 'EUR', Audit_ID , Unite , Partner , Period , Phase , Indicator );

ENDIF;

Nb_Load = Nb_Load + 1;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Mantis 2089-2090

#-- Delete subset
SubsetDestroy( 'Phase' , P_NAME_RAZ );
SubsetDestroy( 'Period_YTD' , P_NAME_RAZ );
SubsetDestroy( 'Phase' , P_NAME_RAZ2 );
SubsetDestroy( 'Period_YTD' , P_NAME_RAZ2 );

CubeSetLogChanges(zCube, 1);
#-- Copy the file data in historical directory
ExecuteProcess( 'z_Tools_Data_Transfert' , 'zFile' , 'Data_P&L_Actual' | '_' |  zSource , 'zAnnee' , TIMST( NOW , '\Y' ) , 'zMois' , TIMST( NOW , '\m'
 ));

pCountry=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');
zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');



#################################################################################
#                                                                             PROCESS with PERIOD and PHASE
#################################################################################
zCube_Process_PP = 'ZZ_PROCESS_DETAIL_PERIOD_PHASE';

CellPutS( zDateTimeLoadingStart , zCube_Process_PP, zProcess , Period, Phase , zDateLoadingStart , 'Start_date' );
CellPutS( zDateTimeLoadingEnd , zCube_Process_PP, zProcess , Period , Phase , zDateLoadingStart , 'End_date' );
CellPutS( NumberToString(Nb_Lign) , zCube_Process_PP , zProcess , Period , Phase , zDateLoadingStart , 'Nb_Input_records' );
CellPutS( NumberToString(Nb_Reject) , zCube_Process_PP , zProcess , Period , Phase , zDateLoadingStart , 'Nb_reject_records' );
CellPutS( NumberToString(Nb_Load) , zCube_Process_PP , zProcess , Period , Phase , zDateLoadingStart , 'Nb_load_records' );

IF( Nb_Lign = Nb_Load );
    CellPutS( 'OK' , zCube_Process_PP, zProcess , Period , Phase , zDateLoadingStart , 'Status' );
ELSE;
    CellPutS( 'KO' , zCube_Process_PP, zProcess , Period , Phase , zDateLoadingStart , 'Status' );
ENDIF;


#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################

CellPutS( zDateTimeLoadingStart , zCube_Process , zProcess , zDateLoadingStart , 'Start_date' );
CellPutS( zDateTimeLoadingEnd , zCube_Process , zProcess , zDateLoadingStart , 'End_date' );
CellPutS( NumberToString(Nb_Lign) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_Input_records' );
CellPutS( NumberToString(Nb_Reject) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_reject_records' );
CellPutS( NumberToString(Nb_Load) , zCube_Process , zProcess , zDateLoadingStart , 'Nb_load_records' );

IF( Nb_Lign = Nb_Load );
    CellPutS( 'OK' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
ELSE;
    CellPutS( 'KO' , zCube_Process , zProcess , zDateLoadingStart , 'Status' );
    ItemReject( 'Process exited with errors at ' | TIME |  ' on ' | TODAY | ' => Check cubes : zz_Process_Detail and  zz_Process_Reject' );
ENDIF;

#################################################################################
#                                                                             END PROCESS
#################################################################################

#endregion