#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


###########################################
##                              VARIABLES                                         ##
###########################################


vDimPHASES = 'PHASE';
vDimYEARS = 'PERIOD';
vDimVersion = 'VERSIONS';
vDimNATURE_COSTS = 'NATURE_COSTS';
vDimProject_Themes = 'PAYS';
vDimProject_Phases = 'PROJECT_PHASES';
vNbDim = 1;

vnProcessTS = Now(); 
vsProcessId = TimSt(vnProcessTS, '\Y\m\d\h\i\s'); 

Process='ti_'|GetProcessName | '_' |vsProcessId ;
vSource = 'VersionSource';
vCible = 'VersionCible';
sView='sView_'|Process;
cView='cView_'|Process;
sSub='sSub_'|Process;
cSub='cSub_'|Process;
vI = 1;




# =============================================================
# ========== PROCESS LOG                                                                                                                                    
# =============================================================
StringGlobalVariable('sDate');
NumericGlobalVariable('nNumberofRecords');
NumericGlobalVariable('PrologMinorErrorCount');
NumericGlobalVariable('MetadataMinorErrorCount');
NumericGlobalVariable('DataMinorErrorCount');

	nTime = NOW;
	sDate = TIMST(nTime, '\Y-\m-\d');

#---------------------------------------------------------------------------------------------------------
# Variables 
#---------------------------------------------------------------------------------------------------------
## Local variables initialization relative to process identification 
vsProcessNm = Lower(GetProcessName()); 
vnProcessTS = Now(); 
vsProcessTS = TimSt(vnProcessTS, '\Y-\m-\d \h:\i:\s'); 
vsProcessId = NumberToString(Int(Rand() *1000000)); 
vsProcessRandId = NumberToString(Int(Rand() *1000000)); 
vsProcessId = Fill('0', Max(0, 6 - Long(vsProcessId))) | vsProcessId; 
vsProcessId = TimSt(vnProcessTS, '\Y\m\d\h\i\s') | vsProcessId; 
vsProcessTime = TimSt(vnProcessTS, '\Y\m\d_\h\i' | vsProcessRandId );


# -------------------------------------------------------------------------------------
#---- Gestion des logs
# -------------------------------------------------------------------------------------
DatasourceASCIIDelimiter = ';';
DatasourceASCIIQuoteCharacter = '';
#cDebugFolder=CellGetS('Z_ADMIN_PARAM','TM1DebugRepository','Svalue');

#cDebugProlog  = cDebugFolder| vsProcessNm | '_Prol_' | vsProcessId | '.csv';
#cDebugMeta  = cDebugFolder| vsProcessNm | '_Meta_' | vsProcessId | '.csv';
#cDebugData  = cDebugFolder| vsProcessNm | '_Data_' | vsProcessId | '.csv';
#cDebugEpilog  = cDebugFolder| vsProcessNm | '_Epilog_' | vsProcessId | '.csv';
# ============================================================

#vLog = cDebugProlog;


#****Edit des logs
OldCubeLogChanges = CUBEGETLOGCHANGES(pCube);
CUBESETLOGCHANGES(pCube, 0);



###########################################
##               DEFINITION DATASOURCE                          ##
###########################################
DataSourceType = 'VIEW';
DatasourceNameForServer = pCube;


DatasourceCubeview = sView;





###########################################
##          TEST DE L'EXISTENCE DU CUBE                         ##
###########################################

IF ( CubeExists(pCube) = 0 );

   ItemReject('Le cube : ' | pCube | ' est inexistant' );
   ProcessError;      

ENDIF;

###########################################
##       TEST DE L'EXISTENCE DE LA DIMENSION             ##
###########################################

IF ( DimensionExists(vDimPHASES) = 0 );

   ItemReject('La Dimension : ' | vDimPHASES | ' est inexistante' );
   ProcessError;      

ENDIF;

IF ( DimensionExists(vDimYEARS) = 0 );

   ItemReject( 'La Dimension : ' | vDimYEARS | ' est inexistante' );
   ProcessError;      

ENDIF;




###########################################
##       TEST EXISTENCE DES MEMBRES & AUTRES        ##
###########################################

#=================================================
#=== Test sur la dimension Scenario  ======================
#=================================================

IF ( DIMIX(vDimPHASES,psPHASES) = 0 );

  ItemReject('La version source : ' | psPHASES | ' est inexistante' );
   ProcessError;

ELSEIF( DIMIX(vDimPHASES, pcPHASES) = 0 );

   ItemReject('La version cible : ' | pcPHASES | ' est inexistante' );
   ProcessError;

ELSEIF ( DTYPE(vDimPHASES, psPHASES) @= 'C' );

  ItemReject('Element : ' | psPHASES | ' est consolidé et ne peut être copié' );
   ProcessError;

ELSEIF ( DTYPE(vDimPHASES, pcPHASES) @= 'C' );

   ItemReject('Element : ' | pcPHASES | ' est consolidé et ne peut être copié' );
   ProcessError;

#=================================================
#=== Test sur la dimension Temps  ======================
#=================================================

ELSEIF ( DIMIX(vDimYEARS, psYEARS) = 0 );

   ItemReject('Période source : ' | psYEARS | ' est inexistante' );
   ProcessError;

ELSEIF( DIMIX(vDimYEARS, pcYEARS) = 0 );

  ItemReject('Période cible : ' | pcYEARS | ' est inexistante' );
   ProcessError;

ELSEIF ( DTYPE(vDimYEARS, psYEARS) @= 'C' );

   ItemReject('Element : ' | psYEARS | ' est consolidé et ne peut être copié' );
   ProcessError;

ELSEIF ( DTYPE(vDimYEARS, pcYEARS) @= 'C' );

   ItemReject('Element : ' | pcYEARS | ' est consolidé et ne peut être copié' );
   ProcessError;

#=================================================
#=== Test sur la dimension Version ======================
#=================================================
ELSEIF ( DIMIX(vDimVersion,psVERSIONS) = 0 );

  ItemReject('La version source : ' | psVERSIONS | ' est inexistante' );
   ProcessError;

ELSEIF( DIMIX(vDimVersion, pcVERSIONS) = 0 );

   ItemReject('La version cible : ' | pcVERSIONS | ' est inexistante' );
   ProcessError;

ELSEIF ( DTYPE(vDimVersion, psVERSIONS) @= 'C' );

  ItemReject('Element : ' | psVERSIONS | ' est consolidé et ne peut être copié' );
   ProcessError;

ELSEIF ( DTYPE(vDimVersion, pcVERSIONS) @= 'C' );

   ItemReject('Element : ' | pcVERSIONS | ' est consolidé et ne peut être copié' );
   ProcessError;

#=================================================
#=== Test sur la dimension Reseau  ======================
#=================================================

ELSEIF (  psNATURE_COSTS @<>'ALL' & DIMIX(vDimNATURE_COSTS, psNATURE_COSTS) = 0 );
              ItemReject('Reseau source : ' | psNATURE_COSTS | ' est inexistant' );
           ProcessError;
 
ELSEIF ( DTYPE(vDimNATURE_COSTS, psNATURE_COSTS) @= 'C' );

   ItemReject('Element : ' | psNATURE_COSTS | ' est consolidé et ne peut être copié' );
   ProcessError;
   
 #=================================================
#=== Test sur la dimension Project_Themes  ======================
#=================================================
ELSEIF (  psPROJECT_THEMES @<>'ALL' & DIMIX(vDimProject_Themes, psPROJECT_THEMES) = 0 );
              ItemReject('Project Theme source : ' | psPROJECT_THEMES | ' est inexistant' );
           ProcessError;

 #=================================================
#=== Test sur la dimension Project_Phases  ======================
#=================================================
ELSEIF (  psPROJECT_PHASES @<>'ALL' & DIMIX(vDimProject_Phases, psPROJECT_PHASES) = 0 );
              ItemReject('Project Theme source : ' | psPROJECT_PHASES | ' est inexistant' );
           ProcessError;

#=================================================
#=== Test sur Source = Cible          ======================
#=================================================

ELSEIF ( psPHASES @= pcPHASES & psYEARS @= pcYEARS & psVERSIONS @= pcVERSIONS);

   ItemReject('Les éléments indiqués, Source : ' | psPHASES | ' + ' | psYEARS | ' + ' | psVERSIONS | '  sont identiques à la cible' );
   ProcessError;

ENDIF;

###########################################
##                      NOMBRE DE DIM DU CUBE                       ##
###########################################

WHILE ( TABDIM(pCube, vNbDim) @<> '');

   vNbDim = vNbDim + 1;   

END;

###########################################
##                     CREATION DES VUES                                 ##
###########################################

IF (ViewExists(pCube, sView) = 1);
   ViewDestroy(pCube,sView);
   ViewCreate(pCube, sView);
ELSE;
   ViewCreate(pCube, sView);
ENDIF;

IF (ViewExists(pCube, cView) = 1);
   ViewDestroy(pCube,cView);
   ViewCreate(pCube, cView);
ELSE;
   ViewCreate(pCube, cView);
ENDIF;

###########################################
##                     CREATION DES SUBSETS                          ##
###########################################


#****Création du sous-ensemble Source****#

nDim = 1;
While( TabDim( pCube, nDim ) @<> '' );
  sDim = TabDim( pCube, nDim );
  IF( SubsetExists( sDim,sSub) = 1 );
   SubsetDeleteAllElements(sDim, sSub);
  ELSE;
   SubsetCreate(sDim,sSub);
  EndIF;
  nDim = nDim + 1;
End;

#****Création du sous-ensemble Cible****#

nDim = 1;
While( TabDim( pCube, nDim ) @<> '' );
  cDim = TabDim( pCube, nDim );
  IF( SubsetExists( cDim,cSub) = 1 );
   SubsetDeleteAllElements(cDim, cSub);
  ELSE;
   SubsetCreate(cDim,cSub);
  EndIF;
  nDim = nDim + 1;
End;


###########################################
##                     Subset : ajout des éléments                           ##
###########################################

WHILE ( vI < vNbDim );
vDim = TABDIM(pCube, vI);
   IF ( TABDIM(pCube, vI) @= vDimPHASES );
     
      SubsetElementInsert(vDimPHASES, sSub,psPHASES, 1);
      SubsetElementInsert(vDimPHASES, cSub,pcPHASES, 1);

   ELSEIF ( TABDIM(pCube, vI) @= vDimYEARS );
      
      SubsetElementInsert(vDimYEARS, sSub,psYEARS, 1);
      SubsetElementInsert(vDimYEARS, cSub,pcYEARS, 1);

   ELSEIF ( TABDIM(pCube, vI) @= vDimVersion );
  
      SubsetElementInsert(vDimVersion, sSub,psVERSIONS, 1);
      SubsetElementInsert(vDimVersion, cSub,pcVERSIONS, 1);

   ELSEIF ( TABDIM(pCube, vI) @= vDimNATURE_COSTS & psNATURE_COSTS @<>'ALL');
  
      SubsetElementInsert(vDimNATURE_COSTS, sSub, psNATURE_COSTS, 1);
      SubsetElementInsert(vDimNATURE_COSTS, cSub, psNATURE_COSTS, 1);
      
   ELSEIF ( TABDIM(pCube, vI) @= vDimProject_Phases & psPROJECT_PHASES @<>'ALL' );
   
	  SubsetDestroy(TABDIM(pCube, vI), sSub);
	  SubsetCreatebyMDX(sSub, '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[ '| TABDIM(pCube, vI) |' ].[ '|psPROJECT_PHASES|' ]}, ALL, RECURSIVE )}, 0)}' );
	  
	  SubsetDestroy(TABDIM(pCube, vI), cSub);
	  SubsetCreatebyMDX(cSub, '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[ '| TABDIM(pCube, vI) |' ].[ '|psPROJECT_PHASES|' ]}, ALL, RECURSIVE )}, 0)}' );
     
   ELSEIF ( TABDIM(pCube, vI) @= vDimProject_Themes & psPROJECT_THEMES @<>'ALL');
   
	  SubsetDestroy(TABDIM(pCube, vI), sSub);
	  SubsetCreatebyMDX(sSub, '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[ '| TABDIM(pCube, vI) |' ].[ '|psPROJECT_THEMES|' ]}, ALL, RECURSIVE )}, 0)}' );
	  
	  SubsetDestroy(TABDIM(pCube, vI), cSub);
	  SubsetCreatebyMDX(cSub, '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[ '| TABDIM(pCube, vI) |' ].[ '|psPROJECT_THEMES|' ]}, ALL, RECURSIVE )}, 0)}' );

    ELSE;

#vIndex = 1;
#WHILE (vIndex <= DIMSIZ(vDim));
#vElement = DIMNM(vDim, vIndex);
#  IF (ELLEV(vDim, vElement) = 0);
#     SubsetElementInsert(vDim, sSub,  vElement, 1);
#     SubsetElementInsert(vDim, cSub,  vElement, 1);
#   ENDIF;
#      vIndex = vIndex + 1;
#END;
          SubsetIsAllSet(TABDIM(pCube, vI), sSub, 1);
          SubsetIsAllSet(TABDIM(pCube, vI), cSub, 1);

   ENDIF;

vI = vI + 1;

END;

#######################################################
##                     Test si la dimension ReseauAnalytique existe dans le cube       ##
#######################################################

vDimUsed1=0;

nDim = 1;
While( TabDim( pCube, nDim ) @<> '' );
  sDim = TabDim( pCube, nDim );
  IF( sDim @=vDimNATURE_COSTS);
     vDimUsed1=1;
  EndIF;
  nDim = nDim + 1;
End;

#######################################################
##                     Test si la dimension Project_Phases existe dans le cube       ##
#######################################################

vDimUsed2=0;

nDim = 1;
While( TabDim( pCube, nDim ) @<> '' );
  sDim = TabDim( pCube, nDim );
  IF( sDim @= vDimProject_Phases);
     vDimUsed2=1;
  EndIF;
  nDim = nDim + 1;
End;

#######################################################
##                     Test si la dimension Project_Themes existe dans le cube       ##
#######################################################

vDimUsed3=0;

nDim = 1;
While( TabDim( pCube, nDim ) @<> '' );
  sDim = TabDim( pCube, nDim );
  IF( sDim @=vDimProject_Themes);
     vDimUsed3=1;
  EndIF;
  nDim = nDim + 1;
End;

vDimUsed = vDimUsed1 + vDimUsed2 + vDimUsed3;

###########################################
##  AFFECTATION VARIABLES --> DIMENSIONS                ##
###########################################

v1 = TabDim( pCube, 1 );
v2 = TabDim( pCube, 2 );
v3 = TabDim( pCube, 3 );
v4 = TabDim( pCube, 4 );
v5 = TabDim( pCube, 5 );
v6 = TabDim( pCube, 6 );
v7 = TabDim( pCube, 7 );
v8 = TabDim( pCube, 8 );
v9 =  TabDim( pCube, 9 );
v10 =  TabDim( pCube, 10 );
v11 = TabDim( pCube, 11 );
v12 = TabDim( pCube, 12 );
v13 = TabDim( pCube, 13 );
v14 = TabDim( pCube, 14 );
v15 = TabDim( pCube, 15 );
v16 = TabDim( pCube, 16 );
v17 = TabDim( pCube, 17 );
v18 = TabDim( pCube, 18 );
v19 = TabDim( pCube, 19 );
v20 = TabDim( pCube, 20 );

#ASCIIOUTPUT(vlog,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13);

###########################################
##                 AFFECTATION SUBSETS --> VUES                ##
###########################################

vI = 1;

WHILE ( vI < vNbDim );

#   IF ( TABDIM(pCube, vI) @= vDimPHASES % TABDIM(pCube, vI) @= vDimYEARS );

#      ViewSubsetAssign(pCube, sView,TABDIM(pCube, vI),  sSub);
#      ViewSubsetAssign(pCube, cView, TABDIM(pCube, vI) , cSub);

 #  ELSE;

      ViewSubsetAssign(pCube, sView,TABDIM(pCube, vI), sSub);
      ViewSubsetAssign(pCube, cView,TABDIM(pCube, vI), cSub);

#   ENDIF;

vI = vI + 1;

END;

###########################################
##                 SUPPRESSION ZERO & MISSING                  ##
###########################################




ViewExtractSkipCalcsSet (pCube, sView, 1);
ViewExtractSkipZeroesSet (pCube, sView, 1);
ViewExtractSkipRuleValuesSet(pCube,sView,1);

#IF(SUBST(pCube,1,2) @='R_');
#ViewExtractSkipZeroesSet (pCube, sView, 0);
#ELSE;
#ViewExtractSkipZeroesSet (pCube, sView, 1);
#ENDIF;
#ViewExtractSkipRuleValuesSet(pCube,sView,0);

###########################################
##                     RAZ DE LA VUE CIBLE                                ##
###########################################

ViewZeroOut(pCube, cView);
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****



###########################################
##                        AFFECTATION CIBLE                               ##
###########################################


#IF(vDimUsed = 0 % (vDimUsed > 0 & psNATURE_COSTS @='ALL' & psPROJECT_PHASES) @= 'ALL' & psPROJECT_THEMES @= 'ALL');
 IF(vDimUsed = 0 );   
v1 = IF (TabDim( pCube, 1 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 1 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 1 ) @= vDimYEARS, pcYEARS, v1)));
v2 = IF (TabDim( pCube, 2 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 2 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 2 ) @= vDimYEARS, pcYEARS, v2)));
v3 = IF (TabDim( pCube, 3 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 3 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 3 ) @= vDimYEARS, pcYEARS, v3)));
v4 = IF (TabDim( pCube, 4 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 4 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 4 ) @= vDimYEARS, pcYEARS, v4)));
v5 = IF (TabDim( pCube, 5 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 5 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 5 ) @= vDimYEARS, pcYEARS, v5)));
v6 = IF (TabDim( pCube, 6 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 6 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 6 ) @= vDimYEARS, pcYEARS, v6)));
v7 = IF (TabDim( pCube, 7 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 7 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 7 ) @= vDimYEARS, pcYEARS, v7)));
v8 = IF (TabDim( pCube, 8 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 8 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 8 ) @= vDimYEARS, pcYEARS, v8)));
v9 = IF (TabDim( pCube, 9 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 9 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 9 ) @= vDimYEARS, pcYEARS, v9)));
v10 = IF (TabDim( pCube, 10 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 10 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 10 ) @= vDimYEARS, pcYEARS, v10)));
v11 = IF (TabDim( pCube, 11 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 11 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 11 ) @= vDimYEARS, pcYEARS, v11)));
v12 = IF (TabDim( pCube, 12 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 12 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 12 ) @= vDimYEARS, pcYEARS, v12)));
v13 = IF (TabDim( pCube, 13 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 13 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 13 ) @= vDimYEARS, pcYEARS, v13)));
v14 = IF (TabDim( pCube, 14 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 14 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 14 ) @= vDimYEARS, pcYEARS, v14)));
v15 = IF (TabDim( pCube, 15 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 15 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 15 ) @= vDimYEARS, pcYEARS, v15)));
v16 = IF (TabDim( pCube, 16 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 16 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 16 ) @= vDimYEARS, pcYEARS, v16)));
v17 = IF (TabDim( pCube, 17 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 17 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 17 ) @= vDimYEARS, pcYEARS, v17)));
v18 = IF (TabDim( pCube, 18 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 18 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 18 ) @= vDimYEARS, pcYEARS, v18)));
v19 = IF (TabDim( pCube, 19 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 19 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 19 ) @= vDimYEARS, pcYEARS, v19)));
v20 = IF (TabDim( pCube, 20 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 20 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 20 ) @= vDimYEARS, pcYEARS, v20)));

#ELSEIF( )

ELSE;

v1 = IF (TabDim( pCube, 1 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 1 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 1 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 1 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v1))));
v2 = IF (TabDim( pCube, 2 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 2 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 2 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 2 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v2))));
v3 = IF (TabDim( pCube, 3 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 3 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 3 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 3 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v3))));
v4 = IF (TabDim( pCube, 4 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 4 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 4 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 4 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v4))));
v5 = IF (TabDim( pCube, 5 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 5 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 5 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 5 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v5))));
v6 = IF (TabDim( pCube, 6 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 6 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 6 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 6 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v6))));
v7 = IF (TabDim( pCube, 7 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 7 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 7 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 7 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v7))));
v8 = IF (TabDim( pCube, 8 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 8 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 8 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 8 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v8))));
v9 = IF (TabDim( pCube, 9 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 9 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 9 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 9 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v9))));
v10 = IF (TabDim( pCube, 10 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 10 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 10 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 10 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v10))));
v11 = IF (TabDim( pCube, 11 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 11 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 11 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 11 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v11))));
v12 = IF (TabDim( pCube, 12 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 12 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 12 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 12 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v12))));
v13 = IF (TabDim( pCube, 13 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 13 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 13 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 13 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v13))));
v14 = IF (TabDim( pCube, 14 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 14 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 14 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 14 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v14))));
v15 = IF (TabDim( pCube, 15 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 15 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 15 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 15 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v15))));
v16 = IF (TabDim( pCube, 16 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 16 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 16 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 16 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v16))));
v17 = IF (TabDim( pCube, 17 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 17 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 17 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 17 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v17))));
v18 = IF (TabDim( pCube, 18 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 18 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 18 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 18 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v18))));
v19 = IF (TabDim( pCube, 19 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 19 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 19 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 19 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v19))));
v20 = IF (TabDim( pCube, 20 ) @= vDimPHASES, pcPHASES, IF (TabDim( pCube, 20 ) @= vDimVersion, pcVERSIONS, IF (TabDim( pCube, 20 ) @= vDimYEARS, pcYEARS, IF (TabDim( pCube, 20 ) @= vDimNATURE_COSTS, psNATURE_COSTS, v20))));

ENDIF;


###########################################
##                        CHARGEMENT DATA                               ##
###########################################

#vDataGet = CellGetN(pCube,v1, v2, 'V1', v4, v5, v6, v7, v8, v9, V10, v11, v12,v13);
 #ASCIIOutput(vLog,numbertostring(vDataGet),psYEARS,pcYEARS,psPHASES,pcPHASES,psVERSIONS,pcVERSIONS);
#ASCIIOutput(vLog,numbertostring(vDataGet),TabDim( pCube, 1 ),V1,TabDim( pCube, 2 ),V2,TabDim( pCube, 3 ),V3,TabDim( pCube, 4 ),V4,TabDim( pCube, 5 ),V5,TabDim( pCube, 6 ),V6,TabDim( pCube, 7 ),V7,TabDim( pCube, 8 ),V8,TabDim( pCube, 9 ),V9,TabDim( pCube, 10 ),V10,TabDim( pCube, 11 ),V11,TabDim( pCube, 12 ),V12,TabDim( pCube, 13 ),V13,V14,V15,V16,V17,V18,V19,V20);
#ASCIIOUTPUT(vlog,numbertostring(vDataGet),pCube, 'Temps',v1,'Scenario', v2, 'V1','versionCible',v3,'Norme', v4,'Vision', v5,'FT', v6,'IndicateurME', v7,'BU', v8,'Reseau', v9,'PTF', V10,'Garantie', v11,'Papiv', v12,'Mesure',v13);


#======================================
#==== Chargement de données numériques =====
#=======================================

IF(Value_Is_String =0);

IF ( vNbDim = 3 );

   IF( CellIsUpdateable(pCube, v1, v2) = 1 );

      CellPutN( StringToNumberEx(v3, ',', ' '), pCube, v1, v2);

   ENDIF;

ELSEIF( vNbDim = 4 );

   IF( CellIsUpdateable(pCube, v1, v2, v3) = 1 );

      CellPutN( StringToNumberEx(v4, ',', ' '), pCube, v1, v2, v3);

   ENDIF;

ELSEIF( vNbDim = 5 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4) = 1 );

      CellPutN( StringToNumberEx(v5, ',', ' '), pCube, v1, v2, v3, v4);

   ENDIF;

ELSEIF( vNbDim = 6 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5) = 1 );

      CellPutN( StringToNumberEx(v6, ',', ' '), pCube, v1, v2, v3, v4, v5);

   ENDIF;

ELSEIF( vNbDim = 7 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6) = 1 );

      CellPutN( StringToNumberEx(v7, ',', ' '), pCube, v1, v2, v3, v4, v5, v6);

   ENDIF;

ELSEIF( vNbDim = 8 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7) = 1 );

      CellPutN( StringToNumberEx(v8, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7);

   ENDIF;

ELSEIF( vNbDim = 9 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8) = 1 );

      CellPutN( StringToNumberEx(v9, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8);

   ENDIF;

ELSEIF( vNbDim = 10 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9) = 1 );

      CellPutN( StringToNumberEx(v10, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9);

   ENDIF;

ELSEIF( vNbDim = 11 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10) = 1 );

      CellPutN( StringToNumberEx(v11, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10);

   ENDIF;

ELSEIF( vNbDim = 12 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11) = 1 );

      CellPutN( StringToNumberEx(v12, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11);

   ENDIF;

ELSEIF( vNbDim = 13 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12) = 1  );

      CellPutN( StringToNumberEx(v13, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12);

   ENDIF;

ELSEIF( vNbDim = 14 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13) = 1 );

      CellPutN( StringToNumberEx(v14, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13);

   ENDIF;

ELSEIF ( vNbDim = 15 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14) = 1 );

      CellPutN( StringToNumberEx(v15, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14);

   ENDIF;

ELSEIF( vNbDim = 16 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15) = 1 );

      CellPutN( StringToNumberEx(v16, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15);

   ENDIF;

ELSEIF( vNbDim = 17 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16) = 1 );

      CellPutN( StringToNumberEx(v17, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16);

   ENDIF;

ELSEIF( vNbDim = 18 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17) = 1 );

      CellPutN( StringToNumberEx(v18, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17);

   ENDIF;

ELSEIF( vNbDim = 19 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18) = 1 );

      CellPutN( StringToNumberEx(v19, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18);

   ENDIF;

ELSEIF( vNbDim = 20 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18, v19) = 1 );

      CellPutN(  StringToNumberEx(v20, ',', ' '), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18, v19);

   ENDIF;
ENDIF;
ENDIF;


#==========================================
#==== Chargement de données de type chaine =====
#==========================================

IF(Value_Is_String =1);

IF ( vNbDim = 3 );

   IF( CellIsUpdateable(pCube, v1, v2) = 1 );

      CellPutS( v3, pCube, v1, v2);

   ENDIF;

ELSEIF( vNbDim = 4 );

   IF( CellIsUpdateable(pCube, v1, v2, v3) = 1 );

      CellPutS( v4, pCube, v1, v2, v3);

   ENDIF;

ELSEIF( vNbDim = 5 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4) = 1 );

      CellPutS( v5, pCube, v1, v2, v3, v4);

   ENDIF;

ELSEIF( vNbDim = 6 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5) = 1 );

      CellPutS( v6, pCube, v1, v2, v3, v4, v5);

   ENDIF;

ELSEIF( vNbDim = 7 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6) = 1 );

      CellPutS( v7, pCube, v1, v2, v3, v4, v5, v6);

   ENDIF;

ELSEIF( vNbDim = 8 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7) = 1 );

      CellPutS( v8, pCube, v1, v2, v3, v4, v5, v6, v7);

   ENDIF;

ELSEIF( vNbDim = 9 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8) = 1 );

      CellPutS( v9, pCube, v1, v2, v3, v4, v5, v6, v7, v8);

   ENDIF;

ELSEIF( vNbDim = 10 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9) = 1 );

      CellPutS( v10, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9);

   ENDIF;

ELSEIF( vNbDim = 11 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10) = 1 );

      CellPutS( v11, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10);

   ENDIF;

ELSEIF( vNbDim = 12 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11) = 1 );

      CellPutS( v12, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11);

   ENDIF;

ELSEIF( vNbDim = 13 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12) = 1  );

      CellPutS( v13, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12);

   ENDIF;

ELSEIF( vNbDim = 14 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13) = 1 );

      CellPutS( v14, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13);

   ENDIF;

ELSEIF ( vNbDim = 15 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14) = 1 );

      CellPutS( v15, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14);

   ENDIF;

ELSEIF( vNbDim = 16 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15) = 1 );

      CellPutS( v16, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15);

   ENDIF;

ELSEIF( vNbDim = 17 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16) = 1 );

      CellPutS( v17, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16);

   ENDIF;

ELSEIF( vNbDim = 18 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17) = 1 );

      CellPutS( v18, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17);

   ENDIF;

ELSEIF( vNbDim = 19 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18) = 1 );

      CellPutS( v19, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18);

   ENDIF;

ELSEIF( vNbDim = 20 );

   IF( CellIsUpdateable(pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18, v19) = 1 );

      CellPutS(  v20, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, V10, v11, v12, v13, v14, v15, v16, v17, v18, v19);

   ENDIF;
ENDIF;
ENDIF;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

###########################################
##                    DESTRUCTIONS DES OBJETS                    ##
###########################################

IF (ViewExists(pCube, sView) = 1);
  ViewDestroy(pCube,sView);
ENDIF;

IF (ViewExists(pCube, cView) = 1);
   ViewDestroy(pCube,cView);
ENDIF;

vI = 1;
WHILE ( vI < vNbDim );
    SubsetDestroy(TABDIM(pCube, vI), sSub);
    SubsetDestroy(TABDIM(pCube, vI), cSub);
   vI = vI + 1;
END;





#****Logs d'audit du cube
#=============================================
CUBESETLOGCHANGES(pCube, OldCubeLogChanges);

# ==============================================================================
# ==== PROCESS LOG                                                                                                                                    
# ==============================================================================
#ExecuteProcess('SYSProcessLog', 'pProcessName', GetProcessName(), 'pActionType', 'stop' );
# ==============================================================================








#endregion