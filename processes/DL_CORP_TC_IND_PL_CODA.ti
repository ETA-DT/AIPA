#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#################################################################################
# Project : Tango - Chargement des donées dans le cube TC_IND_PL_CODA
# Created by : MBO
# Created at : 10/01/2012
# Modified by : 
# Modified at : 
# Modify reason :
#################################################################################


################### Cubes ###################
zCube = 'TC_IND_PL_CODA';
CubeSetLogChanges(zCube, 0);
zCube_Reject = 'ZZ_PROCESS_REJECT';
zCube_Process = 'ZZ_PROCESS_DETAIL';




################### Initialisation des compteurs ###################
Nb_Lign = 0;
Nb_Reject = 0;
Nb_Load = 0;


################### Ficher source ###################
zSource = 'Mapping_P&L_Corporate';
zProcess = 'DL_CORP_TC_IND_PL_CODA';
Source_File = CellGetS( 'z_Admin_Param' , 'REP_DATA' , 'STR_VAR1') | '\' |  zsource | '.csv';
DataSourceNameForServer = Source_File;


IF (FileExists (Source_File) =0);
     CubeSetLogChanges(zCube, 1);
     ItemReject(  DataSourceNameForServer | ' is not find' );
     ProcessQuit;
ENDIF;

################### Paramètres ###################
zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');
pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_CORPORATE' , 'STR_VAR1');


################### MAJ de la dimension date ###################
ExecuteProcess('DB_zz_Date_Time_loading');


#################################################################################
#                                                               Purge du cube de rejet
#################################################################################


P_NAME_RAZ = zCube_Reject | '_RAZ';
ViewDestroy( zCube_Reject , P_NAME_RAZ );
ViewCreate( zCube_Reject , P_NAME_RAZ );


###################  Création du subset  dans zz_Date_Time_loading ################### 

IF( SubsetExists( 'zz_Date_Time_loading' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( 'zz_Date_Time_loading' , P_NAME_RAZ );
ELSE;
    SubsetCreate( 'zz_Date_Time_loading' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( 'zz_Date_Time_loading' , P_NAME_RAZ ,zDateLoadingStart , 1 );


################### Création du subset  dans }Processes ################### 

IF( SubsetExists( '}Processes' , P_NAME_RAZ ) = 1 );
    SubsetDeleteAllElements( '}Processes' , P_NAME_RAZ);
ELSE;
    SubsetCreate( '}Processes' , P_NAME_RAZ );
ENDIF;

SubsetElementInsert( '}Processes' , P_NAME_RAZ , zProcess , 1 );


ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , '}Processes', P_NAME_RAZ);
ViewSubsetAssign( zCube_Reject , P_NAME_RAZ , 'zz_Date_Time_loading' , P_NAME_RAZ);

###################  Nettoyage du cube ################### 
ViewZeroOut( zCube_Reject , P_NAME_RAZ );

###################  Suppression des subsets ################### 
ViewDestroy( zCube_Reject , P_NAME_RAZ );
SubsetDestroy( 'zz_Date_Time_loading' , P_NAME_RAZ );
SubsetDestroy( '}Processes' , P_NAME_RAZ );




#################################################################################
#                                                               Purge du cube TC_IND_PL_CODA
#################################################################################

P_NAME_RAZ = zCube | '_RAZ';
ViewDestroy( zCube , P_NAME_RAZ );
ViewCreate( zCube , P_NAME_RAZ );

#-- Clear cube
ViewZeroOut( zCube , P_NAME_RAZ );

#-- Delete subset
ViewDestroy( zCube , P_NAME_RAZ );



#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

zRecord = vNat_analytique | ';' | vManagement | ';' | vIndicator;

Nb_Lign=Nb_Lign+1;
#################################################################################
#                                                                             GESTION DES REJETS
#################################################################################

################### Nature Analytique : Elle est vide , la ligne est rejetée ###################
IF( vNat_Analytique @= '' );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : Nature Analytique vide . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### Nature Analytique : Elle n'existe pas dans la dimension , la ligne est rejetée ###################
IF( DIMIX ( 'Nat_Analytique' ,vNat_Analytique) = 0 );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : '| vNat_analytique |' est absente de la dimension Nat_Analytique . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### Organisation Manageriale : Elle est vide , la ligne est rejetée ###################
IF( vManagement @= '' );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : Organisation  Manageriale vide . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;


################### Organisation Manageriale : Elle n'existe pas dans la dimension , la ligne est rejetée ###################
IF( DIMIX ( 'Management_Organization_Corp' ,vManagement) = 0 );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : '| vManagement |' est absente de la dimension Management_Organization_Corp . Ligne ' |  numbertostring( Nb_Li
gn ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;


################### Indicateur : Il est vide , la ligne est rejetée ###################
IF( vIndicator @= '' );
   
   Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : Indicateur vide . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');

   ItemSkip;
ENDIF;

################### Indicateur : Il est vide , la ligne est rejetée ###################
IF( DIMIX ('Indicator_Corp',vIndicator) = 0 );
  
    Nb_Reject=Nb_Reject+1;
   zError_Message = ' Données rejetées : Indicateur absent de la dimension Indicator_Corp . Ligne ' |  numbertostring( Nb_Lign ) ;

   CellPuts(zRecord,  zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject) , 'Record');
   CellPutS(zError_Message , zCube_Reject , zProcess , zDateLoadingStart , 'l' | numbertostring( nb_reject), 'Error_Message');
    
   ItemSkip;
ENDIF;


#################################################################################
#                                                   CHARGEMENT DANS LE CUBE TC_IND_PL_CODA
#################################################################################


CellPutS( vIndicator,zCube,vNat_analytique , vManagement , 'STR_VAR1');
Nb_Load = Nb_Load + 1;




#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

CubeSetLogChanges(zCube, 1);
#-- Copy the file data in historical directory
ExecuteProcess( 'z_Tools_Data_Transfert' , 'zFile' , zsource , 'zAnnee' , SUBST( pPeriod , 1 , 4 ) , 'zMois' , SUBST( pPeriod , 6 , 2 )  );




zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             DETAIL PROCESS SECTION
#################################################################################

CellPutS(zDateTimeLoadingStart , zCube_Process, zProcess ,zDateLoadingStart , 'Start_date');
CellPutS(zDateTimeLoadingEnd , zCube_Process, zProcess ,zDateLoadingStart  , 'End_date');
CellPutS(numbertostring(nb_lign) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_Input_records');
CellPutS(numbertostring(nb_reject) , zCube_Process, zProcess ,zDateLoadingStart  , 'Nb_reject_records');
CellPutS(numbertostring(nb_load) , zCube_Process, zProcess ,zDateLoadingStart , 'Nb_load_records');

IF(nb_lign = nb_load);
    CellPutS('OK' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
else;
    CellPutS('KO' , zCube_Process, zProcess ,zDateLoadingStart , 'Status');
    ItemReject( ' Process exited with errors at ' | TIME |  ' on ' | TODAY | '=> Check cubes : zz_Process_Detail and  zz_Process_Reject' );
endif;

#################################################################################
#                                                                             END PROCESS
#################################################################################
#endregion