#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#--AUTHOR= MFS 
#--CREATE_DATE= 2015/06/10
#--MODIF_DATE= 
#--PRO_DESC= Chargement de la dimension INDICATOR basé sur le mode de chargement utilisé dans TANGO_FRANCE
#--NATURE= REF
#--COMPLEX= 1
#--MODULE= ALL
#--VERSION=1.0.0

#--REM= ########################################################
#--REM= # V1.0 initial version
#--REM= ########################################################

#########################################
# Modified by : RSJC
# Modified at : 02/10/2017
# Modify reason : Ajout de l'attribut INACTIF
#########################################


#--TAB= PROLOG
#--DESC= 

#--REM=Force the process to work on the data from the active SANDBOX
SETUSEACTIVESANDBOXPROPERTY(1);

#--REM=Variables declaration

#-- Définition du nom du fichier
zDim = 'Indicator';
zFile = zDim | '.csv';

zDateLoadingStart = TIMST(now,'\Y-\M-\D');
zDateTimeLoadingStart = TIMST(now,'\Y-\M-\D \h:\i:\s');

ExecuteProcess('DB_zz_Date_Time_loading');
pCountry=CellGetS( 'z_Admin_Param' , 'COUNTRY' , 'STR_VAR1');

pPeriod=CellGetS( 'z_Admin_Param' , 'MONTH_ACTUAL' , 'STR_VAR1');




#-- Definition des Variables


#--Definition des ALIAS
V_S_ALIAS_01_NAME = 'English';
V_S_ALIAS_02_NAME = 'English_Short';
V_S_ALIAS_03_NAME = 'French';
V_S_ALIAS_04_NAME = 'French_Short';
V_S_ALIAS_05_NAME = 'Code_English';
V_S_ALIAS_06_NAME = 'Code_French';
V_S_ALIAS_07_NAME = 'z_Code';
V_S_ALIAS_08_NAME = 'English_PMM';
V_S_ALIAS_09_NAME = 'French_PMM';
V_S_ALIAS_10_NAME = '';


#--Definition des ATTRIBUTS
V_S_ATTR_01_NAME = 'Source_Indicator';
V_S_ATTR_02_NAME = 'Attribut English';
V_S_ATTR_03_NAME = 'Attribut French';
V_S_ATTR_04_NAME = 'Comment English';
V_S_ATTR_05_NAME = 'Comment French';
V_S_ATTR_06_NAME = 'Comment_US';
V_S_ATTR_07_NAME = 'PMM_CWU';
V_S_ATTR_08_NAME = 'PMM_PWU';
V_S_ATTR_09_NAME = 'LTP';
V_S_ATTR_10_NAME = 'VISION';
V_S_ATTR_11_NAME = 'INACTIF';
V_S_ATTR_12_NAME = '';
V_S_ATTR_13_NAME = '';
V_S_ATTR_14_NAME = '';
V_S_ATTR_15_NAME = '';
V_S_ATTR_16_NAME = '';
V_S_ATTR_17_NAME = '';
V_S_ATTR_18_NAME = '';
V_S_ATTR_19_NAME = '';
V_S_ATTR_20_NAME = '';
V_S_ATTR_21_NAME = '';
V_S_ATTR_22_NAME = '';
V_S_ATTR_23_NAME = '';
V_S_ATTR_24_NAME = '';
V_S_ATTR_25_NAME = '';





#--Définition du nom et de l'emplacement du fichier source
INPUT_FILE = CellGetS( 'Z_ADMIN_PARAM' , 'REP_ITF' , 'STR_VAR1' ) | '\' | zFile;

#-- Affectation du fichier source en entrée du processus
DataSourceNameForServer = INPUT_FILE;

#-- Définition du nom et de l'emplacement du fichier de message
CTRL_FILE = CellGetS( 'Z_ADMIN_PARAM' , 'REP_OUTPUT' , 'STR_VAR1' ) | '\' | zDim | '.txt';

#-- Suppression du fichier précédent si il existe
IF( FileExists( CTRL_FILE ) = 1 );
	ASCIIDELETE( CTRL_FILE );
ENDIF;

#-- Si la dimension n'existe pas alors on la crée sinon on supprime tous les éléments
#-- ATTENTION : Risque de perte de données si suppression d'éléments dans le fichier (ou niveau 0 devient conso)
IF( DIMIX( '}Dimensions' , zDim ) = 0 );
	DIMENSIONCREATE( zDim );
ELSE;
#-- A mettre en commentaire lors du passage en exploitation (réservé aux développements)
#	DIMENSIONDELETEALLELEMENTS( zDim );
ENDIF;

#-- Présentation de la dimension par hiérarchie
DIMENSIONSORTORDER( zDim , 'ByInput' , 'ASCENDING' , 'ByHierarchy' , 'ASCENDING' );


#Destruction des ALIAS et ATTRIBUTS ### Ne fonctionne pas ##

#IF(DIMENSIONEXISTS('}ElementAttributes_'|zDim)=1);
#	V_N_NB_ATTR=DIMSIZ('}ElementAttributes_'|zDim);
#	V_N_ITERAT=1;
#	WHILE(V_N_ITERAT<=V_N_NB_ATTR);
#		V_S_ATTR_NAME=DIMNM('}ElementAttributes_'|zDim,V_N_ITERAT);
#		ATTRDELETE( '}ElementAttributes_'|zDim , V_S_ATTR_NAME);
#		V_N_ITERAT=V_N_ITERAT+1;
#	END;
#ENDIF;


#Suppression des ALIAS
ATTRDELETE( zDim, V_S_ALIAS_01_NAME );
ATTRDELETE( zDim, V_S_ALIAS_02_NAME);
ATTRDELETE( zDim, V_S_ALIAS_03_NAME);
ATTRDELETE( zDim, V_S_ALIAS_04_NAME);
ATTRDELETE( zDim, V_S_ALIAS_05_NAME);
ATTRDELETE( zDim, V_S_ALIAS_06_NAME);
ATTRDELETE( zDim, V_S_ALIAS_07_NAME);
ATTRDELETE( zDim, V_S_ALIAS_08_NAME);
ATTRDELETE( zDim, V_S_ALIAS_09_NAME);
### ATTRDELETE( zDim, V_S_ALIAS_10_NAME);

#Suppression des ATTRIBUTS
ATTRDELETE( zDim, V_S_ATTR_01_NAME);
ATTRDELETE( zDim, V_S_ATTR_02_NAME);
ATTRDELETE( zDim, V_S_ATTR_03_NAME);
ATTRDELETE( zDim, V_S_ATTR_04_NAME);
ATTRDELETE( zDim, V_S_ATTR_05_NAME);
ATTRDELETE( zDim, V_S_ATTR_06_NAME);
ATTRDELETE( zDim, V_S_ATTR_07_NAME);
ATTRDELETE( zDim, V_S_ATTR_08_NAME);
ATTRDELETE( zDim, V_S_ATTR_09_NAME);
ATTRDELETE( zDim, V_S_ATTR_10_NAME);
ATTRDELETE( zDim, V_S_ATTR_11_NAME);
### ATTRDELETE( zDim, V_S_ATTR_12_NAME);
### ATTRDELETE( zDim, V_S_ATTR_13_NAME);
### ATTRDELETE( zDim, V_S_ATTR_14_NAME);
### ATTRDELETE( zDim, V_S_ATTR_15_NAME);
### ATTRDELETE( zDim, V_S_ATTR_16_NAME);
### ATTRDELETE( zDim, V_S_ATTR_17_NAME);
### ATTRDELETE( zDim, V_S_ATTR_18_NAME);
### ATTRDELETE( zDim, V_S_ATTR_19_NAME);
### ATTRDELETE( zDim, V_S_ATTR_20_NAME);
### ATTRDELETE( zDim, V_S_ATTR_21_NAME);
### ATTRDELETE( zDim, V_S_ATTR_22_NAME);
### ATTRDELETE( zDim, V_S_ATTR_23_NAME);
### ATTRDELETE( zDim, V_S_ATTR_24_NAME);
### ATTRDELETE( zDim, V_S_ATTR_25_NAME);


#Creation des ALIAS
ATTRINSERT( zDim , '' , V_S_ALIAS_01_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_02_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_03_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_04_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_05_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_06_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_07_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_08_NAME , 'A' );
ATTRINSERT( zDim , '' , V_S_ALIAS_09_NAME , 'A' );
### ATTRINSERT( zDim , '' , V_S_ALIAS_10_NAME , 'A' );


#Creation des ATTRIBUTS
ATTRINSERT( zDim , '' , V_S_ATTR_01_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_02_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_03_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_04_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_05_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_06_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_07_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_08_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_09_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_10_NAME , 'S' );
ATTRINSERT( zDim , '' , V_S_ATTR_11_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_12_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_13_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_14_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_15_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_16_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_17_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_18_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_19_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_20_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_21_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_22_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_23_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_24_NAME , 'S' );
### ATTRINSERT( zDim , '' , V_S_ATTR_25_NAME , 'S' );
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****


#--TAB= METADATA
#--DESC= 

DIMENSIONELEMENTINSERT( zDim , '' , V_S_CODE , V_S_TYPE );

#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_01@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_01 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_01 , V_S_CODE , V_N_POIDS_HIER_01 );
ENDIF;

#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_02@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_02 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_02 , V_S_CODE , V_N_POIDS_HIER_02 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_03@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_03 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_03 , V_S_CODE , V_N_POIDS_HIER_03 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_04@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_04 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_04 , V_S_CODE , V_N_POIDS_HIER_04 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_05@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_05 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_05 , V_S_CODE , V_N_POIDS_HIER_05 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_06@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_06 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_06 , V_S_CODE , V_N_POIDS_HIER_06 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_07@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_07 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_07 , V_S_CODE , V_N_POIDS_HIER_07 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_08@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_08 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_08 , V_S_CODE , V_N_POIDS_HIER_08 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_09@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_09 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_09 , V_S_CODE , V_N_POIDS_HIER_09 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_10@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_10 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_10 , V_S_CODE , V_N_POIDS_HIER_10 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_11@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_11 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_11 , V_S_CODE , V_N_POIDS_HIER_11 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_12@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_12 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_12 , V_S_CODE , V_N_POIDS_HIER_12 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_13@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_13 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_13 , V_S_CODE , V_N_POIDS_HIER_13 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_14@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_14 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_14 , V_S_CODE , V_N_POIDS_HIER_14 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_15@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_15 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_15 , V_S_CODE , V_N_POIDS_HIER_15 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_16@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_16 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_16 , V_S_CODE , V_N_POIDS_HIER_16 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_17@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_17 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_17 , V_S_CODE , V_N_POIDS_HIER_17 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_18@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_18 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_18 , V_S_CODE , V_N_POIDS_HIER_18 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_19@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_19 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_19 , V_S_CODE , V_N_POIDS_HIER_19 );
ENDIF;


#-- Création du parent du fichier et rattachement
IF( V_S_HIERARCHIE_20@<>'' );
#-- Création du parent si non nul
	DIMENSIONELEMENTINSERT( zDim , '' , V_S_HIERARCHIE_20 , 'C' );
#-- Rattachement de l'enfant au parent
	DIMENSIONELEMENTCOMPONENTADD( zDim , V_S_HIERARCHIE_20 , V_S_CODE , V_N_POIDS_HIER_20 );
ENDIF;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


#--TAB= DATA
#--DESC= 


#####################################################################
#-- Mise à jour des attributs de type Alias
#####################################################################

IF( V_S_ALIAS_01_VAL@<>'' );
	ATTRPUTS( V_S_ALIAS_01_VAL, zDim , V_S_CODE , V_S_ALIAS_01_NAME );
ENDIF;

IF( V_S_ALIAS_02_VAL@<>'' );
	ATTRPUTS( V_S_ALIAS_02_VAL, zDim , V_S_CODE , V_S_ALIAS_02_NAME );
ENDIF;


IF( V_S_ALIAS_03_VAL@<>'' );
	ATTRPUTS( V_S_ALIAS_03_VAL, zDim , V_S_CODE , V_S_ALIAS_03_NAME );
ENDIF;


IF( V_S_ALIAS_04_VAL@<>'' );
	ATTRPUTS( V_S_ALIAS_04_VAL, zDim , V_S_CODE , V_S_ALIAS_04_NAME );
ENDIF;


IF( (V_S_CODE@<>'') & (V_S_ALIAS_01_VAL@<>'' ));
	# Concatenation de du code avec l'alias English ( ALIAS_01 )
	ATTRPUTS( V_S_CODE|' - '|V_S_ALIAS_01_VAL, zDim , V_S_CODE , V_S_ALIAS_05_NAME );
ENDIF;


IF( (V_S_CODE@<>'') & (V_S_ALIAS_03_VAL@<>'' ));
	# Concatenation de du code avec l'alias French ( ALIAS_03 )
	ATTRPUTS( V_S_CODE|' - '|V_S_ALIAS_03_VAL, zDim , V_S_CODE , V_S_ALIAS_06_NAME );
ENDIF;


IF( V_S_CODE@<>'' );
	# Reprise du code pour alimenter l'alias z_code
	ATTRPUTS( V_S_CODE, zDim , V_S_CODE , V_S_ALIAS_07_NAME );
ENDIF;


IF( V_S_ALIAS_08_VAL@<>'' );
	ATTRPUTS( V_S_ALIAS_08_VAL, zDim , V_S_CODE , V_S_ALIAS_08_NAME );
ENDIF;


IF( V_S_ALIAS_09_VAL@<>'' );
	 ATTRPUTS( V_S_ALIAS_09_VAL, zDim , V_S_CODE , V_S_ALIAS_09_NAME );
ENDIF;


### IF( V_S_ALIAS_10_VAL@<>'' );
###	 ATTRPUTS( V_S_ALIAS_10_VAL, zDim , V_S_CODE , V_S_ALIAS_10_NAME );
### ENDIF;


#####################################################################
#-- Mise à jour des attributs de type String ou Numerique
#####################################################################


IF( V_S_ATTR_01_VAL@<>'' );
### Attribut du type String
	ATTRPUTS( V_S_ATTR_01_VAL, zDim , V_S_CODE , V_S_ATTR_01_NAME );
### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_01_VAL, zDim , V_S_CODE , V_S_ATTR_01_NAME );
ENDIF;

IF( V_S_ATTR_02_VAL@<>'' );
### Attribut du type String
	ATTRPUTS( V_S_ATTR_02_VAL, zDim , V_S_CODE , V_S_ATTR_02_NAME );
### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_02_VAL, zDim , V_S_CODE , V_S_ATTR_02_NAME );
ENDIF;

IF( V_S_ATTR_03_VAL@<>'' );
### Attribut du type String
	ATTRPUTS( V_S_ATTR_03_VAL, zDim , V_S_CODE , V_S_ATTR_03_NAME );
### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_03_VAL, zDim , V_S_CODE , V_S_ATTR_03_NAME );
ENDIF;

IF( V_S_ATTR_04_VAL@<>'' );
### Attribut du type String
	ATTRPUTS( V_S_ATTR_04_VAL, zDim , V_S_CODE , V_S_ATTR_04_NAME );
### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_04_VAL, zDim , V_S_CODE , V_S_ATTR_04_NAME );
ENDIF;

IF( V_S_ATTR_05_VAL@<>'' );
### Attribut du type String
	ATTRPUTS( V_S_ATTR_05_VAL, zDim , V_S_CODE , V_S_ATTR_05_NAME );
### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_05_VAL, zDim , V_S_CODE , V_S_ATTR_05_NAME );
ENDIF;

IF( V_S_ATTR_06_VAL@<>'' );
### Attribut du type String
	ATTRPUTS( V_S_ATTR_06_VAL, zDim , V_S_CODE , V_S_ATTR_06_NAME );
### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_06_VAL, zDim , V_S_CODE , V_S_ATTR_06_NAME );
ENDIF;

IF( V_S_ATTR_07_VAL@<>'' );
### ### Attribut du type String
	 ATTRPUTS( V_S_ATTR_07_VAL, zDim , V_S_CODE , V_S_ATTR_07_NAME );
### ### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_07_VAL, zDim , V_S_CODE , V_S_ATTR_07_NAME );
ENDIF;

IF( V_S_ATTR_08_VAL@<>'' );
### ### Attribut du type String
	 ATTRPUTS( V_S_ATTR_08_VAL, zDim , V_S_CODE , V_S_ATTR_08_NAME );
### ### Attribut du type Numérique
### ATTRPUTN( V_N_ATTR_08_VAL, zDim , V_S_CODE , V_S_ATTR_08_NAME );
ENDIF;

 IF( V_S_ATTR_09_VAL@<>'' );
### ### Attribut du type String
 ATTRPUTS( V_S_ATTR_09_VAL, zDim , V_S_CODE , V_S_ATTR_09_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_09_VAL, zDim , V_S_CODE , V_S_ATTR_09_NAME );
 ENDIF;

IF( V_S_ATTR_10_VAL@<>'' );
### ### Attribut du type String
	 ATTRPUTS( V_S_ATTR_10_VAL, zDim , V_S_CODE , V_S_ATTR_10_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_10_VAL, zDim , V_S_CODE , V_S_ATTR_10_NAME );
ENDIF;
 
IF( V_S_ATTR_11_VAL@<>'' );
### ### Attribut du type String
	 ATTRPUTS( V_S_ATTR_11_VAL, zDim , V_S_CODE , V_S_ATTR_11_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_11_VAL, zDim , V_S_CODE , V_S_ATTR_11_NAME );
ENDIF;
 
### IF( V_S_ATTR_12_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_12_VAL, zDim , V_S_CODE , V_S_ATTR_12_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_12_VAL, zDim , V_S_CODE , V_S_ATTR_12_NAME );
### ENDIF;
 
### IF( V_S_ATTR_13_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_13_VAL, zDim , V_S_CODE , V_S_ATTR_13_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_13_VAL, zDim , V_S_CODE , V_S_ATTR_13_NAME );
### ENDIF;
 
### IF( V_S_ATTR_14_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_14_VAL, zDim , V_S_CODE , V_S_ATTR_14_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_14_VAL, zDim , V_S_CODE , V_S_ATTR_14_NAME );
### ENDIF;
 
### IF( V_S_ATTR_15_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_15_VAL, zDim , V_S_CODE , V_S_ATTR_15_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_15_VAL, zDim , V_S_CODE , V_S_ATTR_15_NAME );
### ENDIF;
 
### IF( V_S_ATTR_16_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_16_VAL, zDim , V_S_CODE , V_S_ATTR_16_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_16_VAL, zDim , V_S_CODE , V_S_ATTR_16_NAME );
### ENDIF;
 
### IF( V_S_ATTR_17_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_17_VAL, zDim , V_S_CODE , V_S_ATTR_17_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_17_VAL, zDim , V_S_CODE , V_S_ATTR_17_NAME );
### ENDIF;
 
### IF( V_S_ATTR_18_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_18_VAL, zDim , V_S_CODE , V_S_ATTR_18_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_18_VAL, zDim , V_S_CODE , V_S_ATTR_18_NAME );
### ENDIF;
 
### IF( V_S_ATTR_19_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_19_VAL, zDim , V_S_CODE , V_S_ATTR_19_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_19_VAL, zDim , V_S_CODE , V_S_ATTR_19_NAME );
### ENDIF;
 
### IF( V_S_ATTR_20_VAL@<>'' );
### ### Attribut du type String
###	 ATTRPUTS( V_S_ATTR_20_VAL, zDim , V_S_CODE , V_S_ATTR_20_NAME );
### ### Attribut du type Numérique
### ### ATTRPUTN( V_N_ATTR_20_VAL, zDim , V_S_CODE , V_S_ATTR_20_NAME );
### ENDIF;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#-- Copy the file structure in historical directory
ExecuteProcess( 'z_Tools_Structure_Transfert' , 'zFile' , zDim );
#-- Update the subsets Z_PMM_CWU and Z_PMM_PWU and update the PickLists based on the subsets
ExecuteProcess( 'Z_TC_PMM_BM_WU_PICKLIST_RUX','P_S_SUBSET_CWU','Z_PMM_CWU', 'P_S_SUBSET_PWU', 'Z_PMM_PWU', 'P_N_DEBUG', 0 );
ExecuteProcess( 'DB_Indicator_Attribut_Vector');



if (pCountry @<>'CM');
  zProcess = 'DB_' | zDim;
  zDateTimeLoadingEnd = TIMST(now,'\Y-\M-\D \h:\i:\s');
#################################################################################
#                                                                             PROCESS with PERIOD and INSTANCE
#################################################################################
  zCube_Process_PP = 'ZZ_PROCESS_Detail_Instance';
  pChore='Task2_CO_Load_Common_Dimension_' | pCountry;
  pProcess_source='CORE_MODEL';

  CellPutS(zDateTimeLoadingStart , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry,pProcess_source ,  'Start_date'); 
  CellPutS(zDateTimeLoadingEnd , zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry ,pProcess_source, 'End_date');
  CellPutS('OK' ,zCube_Process_PP, pChore, zProcess ,pPeriod,zDateLoadingStart, pCountry ,pProcess_source,   'Status');
endif;

#-- Load Security
ExecuteProcess( 'Import_CM_Security_Indicator');

SecurityRefresh;
#endregion