#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

##################################################################
# Projet : Tango - Màj de la dimension z_Utilisateur
# Créé par : TIN ANONE
# Créé le : 25/02/2014
# Modifié par : VNN & YAD
# Modifié le : 10/05/2016 et 26/05/2016
# Modification apportée : YAD Modification des règles de construction des Hiérachies parallèles 
#################################################################


#-- Dimension utilisateur source et cible
sDimSrc = '}Clients' ;
sDimTgt = 'z_Stat_Utilisateur' ;

#-- Si la dimension n'existe pas, on la crée
IF(DimensionExists( sDimTgt ) = 0 ) ;
   DimensionCreate( sDimTgt ) ;
ENDIF;

#DimensionDeleteAllelements( sDimTgt ) ;

#-- On recrée les attributs de la dimension Cible  z_Stat_Utilisateur

#AttrDelete( sDimTgt , 'Code' ) ;
AttrInsert( sDimTgt , '' , 'Code' , 'A' ) ;
#AttrDelete( sDimTgt , 'Nom' ) ;
AttrInsert( sDimTgt , '' , 'Nom' , 'S' ) ;
#AttrDelete( sDimTgt , 'Prenom' ) ;
AttrInsert( sDimTgt , '' , 'Prenom' , 'S' ) ;
#AttrDelete( sDimTgt , 'AdresseMail' ) ;
AttrInsert( sDimTgt , '' , 'AdresseMail' , 'S' ) ;
#AttrDelete( sDimTgt , 'Profil' ) ;
AttrInsert( sDimTgt , '' , 'Profil' , 'S' ) ;
#AttrDelete( sDimTgt , 'Zone' ) ;
AttrInsert( sDimTgt , '' , 'Zone' , 'S' ) ;
#AttrDelete( sDimTgt , 'Fonction' ) ;
AttrInsert( sDimTgt , '' , 'Fonction' , 'S' ) ;
#AttrDelete( sDimTgt , 'EstCourant' ) ;
AttrInsert( sDimTgt , '' , 'EstCourant' , 'S' ) ;
#AttrDelete( sDimTgt , 'EstLTP' ) ;
AttrInsert( sDimTgt , '' , 'EstLTP' , 'S' ) ;
#AttrDelete( sDimTgt , 'EstCountry_PM' ) ;
AttrInsert( sDimTgt , '' , 'EstCountry_PM' , 'S' ) ;
#AttrDelete( sDimTgt , 'DateCreation' ) ;
AttrInsert( sDimTgt , '' , 'DateCreation' , 'S' ) ;
#AttrDelete( sDimTgt , 'DateSuppression' ) ;
AttrInsert( sDimTgt , '' , 'DateSuppression' , 'S' ) ;
#AttrDelete( sDimTgt , 'DateMAJ' ) ;
AttrInsert( sDimTgt , '' , 'DateMAJ' , 'S' ) ;
#AttrDelete( sDimTgt , 'Comment' ) ;
AttrInsert( sDimTgt , '' , 'Comment' , 'S' ) ;


#-- Trie la dimension

DimensionSortOrder( sDimTgt , 'ByName' , 'Ascending' , 'ByHierarchy' , 'Descending' ) ;

vPropriete_Utilisateur = 'z_Client_Properties';

### - Création des Elements Conso fixes des Hiérarchies 

# Hiérachier Zone // Utilisateurs par Zone
DimensionElementInsert ( sDimTgt , '' , 'Utilisateurs par Zone'  , 'c' ) ;
DimensionElementInsert ( sDimTgt , '' , 'zZone NA' , 'c' ) ;
DimensionElementComponentAdd( sDimTgt , 'Utilisateurs par Zone' , 'zZone NA' , 1 ) ;

# Hiérarchie Fonction // Utilisateurs par Fonction
DimensionElementInsert ( sDimTgt , '' , 'Utilisateurs par Fonction' , 'c' ) ;
DimensionElementInsert ( sDimTgt , '' , 'zFonction NA' , 'c' ) ;
DimensionElementComponentAdd( sDimTgt , 'Utilisateurs par Fonction' , 'zFonction NA' , 1 ) ;

# Hiérarchie Total Utilisateurs // [Hiérachie Principale]
DimensionElementInsert( sDimTgt , '' , 'Total_Utilisateurs' , 'c' ) ;
DimensionElementInsert( sDimTgt , '' , 'Utilisateurs_Courants' , 'c' ) ;
DimensionElementInsert( sDimTgt , '' , 'Utilisateurs_Histo' , 'c' ) ;
DimensionElementInsert( sDimTgt , '' , 'Non affecté' , 'N' ) ;
DimensionElementComponentAdd( sDimTgt , 'Total_Utilisateurs' , 'Utilisateurs_Courants' , 1 ) ;
DimensionElementComponentAdd( sDimTgt , 'Total_Utilisateurs' , 'Utilisateurs_Histo' , 1 ) ;
DimensionElementComponentAdd( sDimTgt , 'Total_Utilisateurs' , 'Non affecté' , 1 ) ;

# Hiérarchie LTP // Utilisateurs LTP
DimensionElementInsert( sDimTgt , '' , 'Utilisateurs LTP' , 'c' ) ;
DimensionElementInsert( sDimTgt , '' , 'zLTP NA' , 'c' ) ;
DimensionElementComponentAdd( sDimTgt , 'Utilisateurs LTP' , 'zLTP NA' , 1 ) ;

# Hiérarchie  Country_PM // Utilisateurs Country_PM
DimensionElementInsert( sDimTgt , '' , 'Utilisateurs Country_PM' , 'c' ) ;
DimensionElementInsert( sDimTgt , '' , 'zCountry_PM NA' , 'c' ) ;
DimensionElementComponentAdd( sDimTgt , 'Utilisateurs Country_PM' , 'zCountry_PM NA' , 1 ) ;

# Hiérarchie Utilisateurs Profil // Utilisateurs par Profil
DimensionElementInsert ( sDimTgt , '' , 'Utilisateurs par Profil' , 'c' ) ;
DimensionElementInsert ( sDimTgt , '' , 'zProfil NA' , 'c' ) ;
DimensionElementComponentAdd( sDimTgt , 'Utilisateurs par Profil' , 'zProfil NA' , 1 ) ;

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****



## ASCIIOUTPUT à garder au cas où
#     ASCIIOUTPUT( 'test_FBU.txt' , ) ;

#-- Création de l'utilisateur
DimensionElementInsert ( sDimTgt , 'Utilisateurs_Courants' , vUtilisateur , 'n' ) ;

###############-- Hiérarchies Parallèles --############### 

# **************** ZONE

Zone = CellGetS( vPropriete_Utilisateur , 'Zone' , vUtilisateur ) ;
ZonePrevious = ATTRS('z_Stat_Utilisateur', vUtilisateur, 'Zone');

#-- Création du parent hiérarchie ZONE
IF( Zone @= '' );
  DimensionElementComponentAdd( sDimTgt , 'zZone NA', vUtilisateur , 1 ) ;
     IF(ZonePrevious@<>'' & ELISPAR(sDimTgt , ZonePrevious, vUtilisateur)=1);
            DimensionElementComponentDelete( sDimTgt , ZonePrevious, vUtilisateur ) ;
     ENDIF;
ELSE;
  DimensionElementInsert ( sDimTgt , '' , Zone , 'c' ) ;
  DimensionElementComponentAdd( sDimTgt , Zone, vUtilisateur , 1 );
  DimensionElementComponentAdd( sDimTgt , 'Utilisateurs par Zone' , Zone , 1 ) ;
     IF(ZonePrevious@<>'');
          IF(ZonePrevious@<>Zone & ELISPAR(sDimTgt , ZonePrevious, vUtilisateur)=1);
            DimensionElementComponentDelete( sDimTgt , ZonePrevious, vUtilisateur ) ;
          ENDIF;
     ELSE;
          IF(ZonePrevious@<>Zone & ELISPAR(sDimTgt ,  'zZone NA', vUtilisateur)=1);
            DimensionElementComponentDelete( sDimTgt ,  'zZone NA', vUtilisateur ) ;
          ENDIF;
           IF(ELLEV(sDimTgt, ZonePrevious)=0 & ZonePrevious@<>'');
            DimensionElementDelete(sDimTgt , ZonePrevious);
          ENDIF;
    ENDIF; 
ENDIF;

# **************** PROFIL

Profil  = CellGetS( vPropriete_Utilisateur , 'Profil' , vUtilisateur ) ;
ProfilPrevious = ATTRS('z_Stat_Utilisateur', vUtilisateur, 'Profil');

#-- Création du parent
IF( Profil  @= '' ) ;
  DimensionElementComponentAdd( sDimTgt , 'zProfil NA' , vUtilisateur , 1 ) ;
     IF(ProfilPrevious @<>'');
          IF (ELISPAR(sDimTgt , 'Admin.', vUtilisateur )=1);
            DimensionElementComponentDelete( sDimTgt ,  'Admin.', vUtilisateur ) ;
          ENDIF;
          IF  (ELISPAR(sDimTgt , 'Country_PM', vUtilisateur )=1);
            DimensionElementComponentDelete( sDimTgt ,  'Country_PM', vUtilisateur ) ;
          ENDIF;
      ENDIF;
ELSE;
  DimensionElementInsert ( sDimTgt , '' , Profil  , 'c' ) ;
  DimensionElementComponentAdd( sDimTgt ,Profil , vUtilisateur , 1 ) ;
  DimensionElementComponentAdd( sDimTgt , 'Utilisateurs par Profil' , Profil  , 1 ) ;
  IF(Profil @<>ProfilPrevious);
       IF(ProfilPrevious @<>'');
         DimensionElementComponentDelete( sDimTgt , ProfilPrevious, vUtilisateur ) ;
           IF(ELCOMPN(sDimTgt , ProfilPrevious)=0 & ELISPAR(sDimTgt , 'Utilisateurs par Profil', ProfilPrevious )=1);
             DimensionElementDelete( sDimTgt , ProfilPrevious ) ;
           ENDIF;
        ELSE;
           IF(ELISPAR(sDimTgt ,  'zProfil NA', vUtilisateur)=1);
                DimensionElementComponentDelete( sDimTgt , 'zProfil NA', vUtilisateur ) ;
           ENDIF;
        ENDIF;
 ENDIF;
ENDIF;


# **************** FONCTION

Fonction  = CellGetS( vPropriete_Utilisateur , 'Poste' , vUtilisateur ) ;
FonctionPrevious = ATTRS('z_Stat_Utilisateur', vUtilisateur, 'Fonction');

#-- Création du parent
IF( Fonction  @= '' ) ;
  DimensionElementComponentAdd( sDimTgt , 'zFonction NA' , vUtilisateur , 1 ) ;
  IF(FonctionPrevious @<>'');
    DimensionElementComponentDelete( sDimTgt , FonctionPrevious, vUtilisateur ) ;
    IF(ELCOMPN(sDimTgt , FonctionPrevious)=0 & ELISPAR(sDimTgt , 'Utilisateurs par Fonction', FonctionPrevious )=1);
       DimensionElementDelete( sDimTgt , FonctionPrevious ) ;
    ENDIF;
  ENDIF;
ELSE;
    DimensionElementInsert ( sDimTgt , '' , Fonction  , 'c' ) ;
    DimensionElementComponentAdd( sDimTgt ,Fonction , vUtilisateur , 1 ) ;
    DimensionElementComponentAdd( sDimTgt , 'Utilisateurs par Fonction' , Fonction  , 1 ) ;
  IF(Fonction @<>FonctionPrevious);
    IF(FonctionPrevious @<>'');
      DimensionElementComponentDelete( sDimTgt , FonctionPrevious, vUtilisateur ) ;
     IF(ELCOMPN(sDimTgt , FonctionPrevious)=0 & ELISPAR(sDimTgt , 'Utilisateurs par Fonction', FonctionPrevious )=1);
       DimensionElementDelete( sDimTgt , FonctionPrevious ) ;
     ENDIF;
    ELSE;
      IF(ELISPAR(sDimTgt ,  'zFonction NA', vUtilisateur)=1);
        DimensionElementComponentDelete( sDimTgt , 'zFonction NA', vUtilisateur ) ;
      ENDIF;
    ENDIF;
  ENDIF;
ENDIF;


# **************** Client courant aux utilisateurs courant et histo [Hiérachie Dominante /Exhaustive] 

vCourant = CellGetS(vPropriete_Utilisateur, 'EstCourant', vUtilisateur);
vCourantPrevious =  ATTRS('z_Stat_Utilisateur', vUtilisateur, 'EstCourant');
IF(vCourant @= 'Y');
  DimensionElementComponentAdd( sDimTgt , 'Utilisateurs_Courants' , vUtilisateur , 1 ) ;
  IF( ELISPAR(sDimTgt , 'Utilisateurs_Histo', vUtilisateur)=1 );
    DimensionElementComponentDelete( sDimTgt , 'Utilisateurs_Histo', vUtilisateur ) ;
  ENDIF;
ELSE;
  DimensionElementComponentAdd( sDimTgt , 'Utilisateurs_Histo' , vUtilisateur , 1 ) ;
  IF( vCourant @<>vCourantPrevious & ELISPAR(sDimTgt , 'Utilisateurs_Courants', vUtilisateur )=1);
    DimensionElementComponentDelete( sDimTgt , 'Utilisateurs_Courants', vUtilisateur ) ;
  ENDIF;
ENDIF;


# **************** LTP

EstLTP = CellGetS( vPropriete_Utilisateur ,  'EstLTP' , vUtilisateur ) ;
EstLTPPrevious = ATTRS('z_Stat_Utilisateur', vUtilisateur, 'EstLTP');

IF( EstLTP @= 'Y' ) ;
  DimensionElementComponentAdd( sDimTgt , 'Utilisateurs LTP' , vUtilisateur , 1 ) ;
  IF(EstLTPPrevious @='' & ELISPAR(sDimTgt , 'zLTP NA', vUtilisateur)=1);
    DimensionElementComponentDelete( sDimTgt , 'zLTP NA', vUtilisateur ) ;
  ENDIF;
ELSE;
  DimensionElementComponentAdd( sDimTgt , 'zLTP NA' , vUtilisateur , 1 ) ;  
  IF(EstLTPPrevious @='Y' & ELISPAR(sDimTgt , 'Utilisateurs LTP', vUtilisateur)=1);
    DimensionElementComponentDelete( sDimTgt , 'Utilisateurs LTP', vUtilisateur ) ;
  ENDIF;
ENDIF;


# **************** Country_PM et Profil


EstCountry_PM = CellGetS( vPropriete_Utilisateur ,  'EstCountry_PM' , vUtilisateur ) ;
EstCountry_PMPrevious = ATTRS('z_Stat_Utilisateur', vUtilisateur, 'EstCountry_PM');

IF( EstCountry_PM @= 'Y' ) ;
  DimensionElementComponentAdd( sDimTgt , 'Utilisateurs Country_PM' , vUtilisateur , 1 ) ;
  DimensionElementComponentAdd( sDimTgt , 'Country_PM' , vUtilisateur , 1 ) ;
  IF(EstCountry_PMPrevious @='' & ELISPAR(sDimTgt , 'zCountry_PM NA', vUtilisateur)=1);
    DimensionElementComponentDelete( sDimTgt , 'zCountry_PM NA', vUtilisateur ) ;
        IF(ELISPAR(sDimTgt ,  'zProfil NA', vUtilisateur)=1);
               DimensionElementComponentDelete( sDimTgt , 'zProfil NA', vUtilisateur ) ;
       ENDIF;
  ENDIF;
ELSE;
  DimensionElementComponentAdd( sDimTgt , 'zCountry_PM NA' , vUtilisateur , 1 ) ;  
  IF(EstCountry_PMPrevious @='Y' & ELISPAR(sDimTgt , 'Utilisateurs Country_PM', vUtilisateur)=1);
    DimensionElementComponentDelete( sDimTgt , 'Utilisateurs Country_PM', vUtilisateur ) ;
  ENDIF;
ENDIF;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


# Mise à jour des attributs de la dimension utilisateur statistique avec les valeurs du cube client properties

Zone = CellGetS( vPropriete_Utilisateur , 'Zone' , vUtilisateur ) ;
AttrPutS( Zone , 'z_Stat_Utilisateur' , vUtilisateur , 'Zone' ) ;

Fonction  = CellGetS( vPropriete_Utilisateur , 'Poste' , vUtilisateur ) ;
AttrPutS( Fonction , 'z_Stat_Utilisateur' , vUtilisateur , 'Fonction' ) ;

Fonction  = CellGetS( vPropriete_Utilisateur , 'Profil' , vUtilisateur ) ;
AttrPutS( Fonction , 'z_Stat_Utilisateur' , vUtilisateur , 'Profil' ) ;

vCourant = CellGetS(vPropriete_Utilisateur, 'EstCourant', vUtilisateur);
AttrPutS( vCourant , 'z_Stat_Utilisateur' , vUtilisateur , 'EstCourant' ) ;

EstLTP = CellGetS( vPropriete_Utilisateur ,  'EstLTP' , vUtilisateur ) ;
AttrPutS( EstLTP , 'z_Stat_Utilisateur' , vUtilisateur , 'EstLTP' ) ;

EstCountry_PM = CellGetS( vPropriete_Utilisateur ,  'EstCountry_PM' , vUtilisateur ) ;
AttrPutS( EstCountry_PM , 'z_Stat_Utilisateur' , vUtilisateur , 'EstCountry_PM' ) ;

DateCreation = CellGetS( vPropriete_Utilisateur , 'DateCreation' , vUtilisateur ) ;
AttrPutS( DateCreation , 'z_Stat_Utilisateur' , vUtilisateur , 'DateCreation' ) ;

DateMAJ = CellGetS( vPropriete_Utilisateur , 'DateMAJ' , vUtilisateur ) ;
AttrPutS( DateMAJ , 'z_Stat_Utilisateur' , vUtilisateur , 'DateMAJ' ) ;




#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


###  

#-- On boucle sur la dimension z_Stat_utilisateur chargée afin de mettre à jour : L'attribut EstCourant

#-- Paramétrage du Compteur 
i = 1 ;
WHILE( i <= DIMSIZ( sDimTgt ) ) ;
     ElemStat = DIMNM( sDimTgt , i ) ;
     IF( ELLEV( sDimTgt , ElemStat ) = 0 & ElemStat @<> 'Non affecté' ) ;

          IF( DIMIX( sDimSrc , ElemStat ) = 0 ) ;

#-- Mise à jour de l'attribut EstCourant

# Si l'utilisateur n'est plus dans le Fichier des users on renseigne la date de Suppression dans la Dim Historique

               AttrPutS( 'N', sDimTgt , ElemStat , 'EstCourant' ) ;
               DateSuppression = TIMST( NOW , '\Y\m\d' ) ;
               IF( AttrS( sDimTgt , ElemStat , 'DateSuppression' ) @= '' ) ;
                    AttrPutS( DateSuppression , sDimTgt , ElemStat , 'DateSuppression' ) ;
               ENDIF ;
# Sinon pour les Users réccurents on renseigne le Flag est Courant = 'Y' dans  le Cube des ]Clients actifs

          ELSEIF(CellIsUpdateable( vPropriete_Utilisateur ,  'EstCourant' , ElemStat ) = 1) ;
               AttrPutS( 'Y' , sDimTgt , ElemStat , 'EstCourant' ) ;
               CellPutS( 'Y' , vPropriete_Utilisateur ,  'EstCourant' , ElemStat ) ;
          ENDIF;

     ENDIF ;
     i = i + 1 ;
END;

# Exécute les étapes 2 et 3 pour construire les hiérarchies parallèles

## -- Modif Rattachemment Hiérachiques dans la Hiérachie Total_Utilisateurs
ExecuteProcess( 'DB_z_Stat_Utilisateur_2' ) ;
## -- Modif Rattachemment Hiérachiques des hiérachies secondaires (suppression ou modification)
ExecuteProcess( 'DB_z_Stat_Utilisateur_3' ) ;

# Met à jour le subset Client2Suppress de la dimension }Clients // Pour lancer la suppression des }Clients qui disparaissent du Fichier

ExecuteProcess( 'z_Admin_Subset_Client2Suppress' ) ;
ExecuteProcess('z_Clients2Suppress_Deletion', 'p_Valid', 'OUI','p_Subset','Client2Suppress');
#endregion