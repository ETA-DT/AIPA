#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################
# Project : Tango - Core Model
# Created by : ASZ - Anone
# Created at : 02/05/2016
# Modified by : BTA 
# Reason : Refonte de la sécurité + revue de la vue source qui était statique + ajout des commentaires
# Date : 12/01/2017
# Modified by : RSJC
# Reason : Ajout droits groupe User_Strategy
# Date : 10/06/2021
#########################################

#################################################################################
#                                                               Déclaration des variables
#################################################################################

zCube = '}ElementSecurity_Phase';
zView = GetProcessName() ; 
zSubset = GetProcessName() ; 

#################################################################################
#                                                               Source CUBE
#################################################################################

# -- Destruction et Construction de la vue
ViewDestroy( zCube , zView );
ViewCreate( zCube, zView );

# -- Sous ensemble Source Phase
zDim = 'Phase' ;
SubsetDestroy( zDim , zSubset );
SubsetCreate( zDim , zSubset );
SubsetElementInsert( zDim , zSubset , 'ACT_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'ACT' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_AJUST' , 1 );
SubsetElementInsert( zDim , zSubset , 'BUDG_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'BUDG' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_BUDG' , 1 );
SubsetElementInsert( zDim , zSubset , 'BUDG_VC_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'BUDG_VC' , 1 );
SubsetElementInsert( zDim , zSubset , 'BUDG_V1_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'BUDG_V1' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_BUDG_VC' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_1_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_1' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_FC_1' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_1_VC_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_1_VC' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_FC_1_VC' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_2_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_2' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_FC_2' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_2_VC_TOT' , 1 );
SubsetElementInsert( zDim , zSubset , 'FC_2_VC' , 1 );
SubsetElementInsert( zDim , zSubset , 'MAN_FC_2_VC' , 1 );
i = 1 ; 
iMax = DimSiz( zDim ); 
While( i <= iMax ); 
	vElem = DimNm( zDim, i ); 
 	IF( ELISANC( zDim, 'LTP_ALL' , vElem ) = 1 % vElem @= 'LTP_ALL' ) ; 
		SubsetElementInsert( zDim , zSubset , vElem , 1 );
	ENDIF;
	i = i + 1; 
End;
ViewSubsetAssign( zCube, zView , zDim , zSubset ); 

# -- Sous ensemble Source }Groups
zDim = '}Groups' ;
SubsetDestroy( zDim , zSubset );
SubsetCreate( zDim , zSubset );
i = 1 ; 
iMax = DimSiz( zDim ); 
While( i <= iMax ); 
	vElem = DimNm( zDim, i ); 
	# -- On prend tous les groupes sauf les Chores
 	IF( SCAN( 'Chores' , vElem ) = 0 ) ; 
		SubsetElementInsert( zDim , zSubset , vElem , 1 );
	ENDIF;
	i = i + 1; 
End;
ViewSubsetAssign( zCube, zView , zDim , zSubset ); 



# -- Propriétés de la vue 
ViewExtractSkipZeroesSet ( zCube , zView  , 0 );
ViewExtractSkipRuleValuesSet ( zCube , zView  , 1 );
ViewExtractSkipCalcsSet ( zCube , zView  , 0 );

# -- Source du processus dynamique
DatasourceNameForServer = zCube ;
DatasourceCubeview = zView;


#################################################################################
#                                                               Clear Cube
#################################################################################

CubeClearData( zCube ) ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


# -- Ajout des modifications liées à la refonte de la sécurité

IF( Groups @= 'Admin' % Groups @= 'DataAdmin' % Groups @= 'SecurityAdmin' %Groups @= 'OperationsAdmin'); 
	ItemSkip;
ENDIF;

# -- Pour toutes les phases, renseigner WRITE pour les groupes Corporate Plus et Financial Controller 
IF( Groups @= 'Corporate_Plus'  %  Groups @= 'Financial_Controller' ); 

	CellPutS( 'WRITE' , zCube , Phase , Groups ); 
	ItemSkip;
	
ENDIF;







# -- Pour toutes les phases, renseigner READ pour le groupe R_VTD_Corp
IF( Groups @= 'R_VTD_Corp' & SCAN( 'Strat' , Phase ) = 0 ); 
	CellPutS( 'READ' , zCube , Phase , Groups ); 
	ItemSkip;

ENDIF;



# -- Pour le groupe Data LTP Writer, alors, renseigner WRITE pour les LTP VC et READ pour les LTP Vxx
IF( Groups @= 'Data_LTP_Writer' ); 

	# Pour les phases LTP
	IF( SCAN( 'LTP' , Phase ) <> 0   & SCAN( 'Strat' , Phase ) = 0); 

		IF( SCAN( '_VC' , Phase ) <> 0 ); 

			CellPutS( 'WRITE' , zCube , Phase , Groups ); 

		ELSE; 

			CellPutS( 'READ' , zCube , Phase , Groups ); 

		ENDIF;

	ENDIF;

	ItemSkip;
ENDIF;

# -- Pour le groupe Data LTP Reader, alors, renseigner Read pour les phases LTP
IF( Groups @= 'Data_LTP_Reader' ); 

	# Pour les phases LTP
	IF( SCAN( 'LTP' , Phase ) <> 0  & SCAN( 'Strat' , Phase ) = 0 ); 

		CellPutS( 'READ' , zCube , Phase , Groups ); 

	ENDIF;

	ItemSkip;

ENDIF;

# -- Les groupes User GIE et User Holding ne voient que les phases ACT, BUD, FCx sauf les LTP
IF( Groups @= 'User_GIE' % Groups@= 'User_Holding' ) ; 

	# -- Accès à toutes les phases hors LTP
	IF( SCAN( 'LTP' , Phase ) = 0 ); 

		CellPutS( 'WRITE' , zCube , Phase , Groups ); 

	ENDIF;

	ItemSkip;

ENDIF; 




# -- Le groupe Country Project Mgr ne voit que les phases ACT, BUD, FCx sauf les LTP. Toutes les phases ACT, BUD, FCx en VC sont en WRITE sinon en READ pour le Vxx
IF( Groups @= 'Country_Project_Mgr' ) ; 

	IF( SCAN( 'LTP' , Phase ) = 0 ); 

		IF( SCAN( '_VC' , Phase ) <> 0 ); 

			CellPutS( 'WRITE' , zCube , Phase , Groups ); 

		ELSE; 

			CellPutS( 'READ' , zCube , Phase , Groups ); 

		ENDIF;

	ENDIF;

	ItemSkip;

ENDIF;

# -- Les groupes Data_Reporting_Reader et Performance_Corporate ne voient que les phases ACT, BUD, FCx sauf les LTP
IF( Groups @= 'Data_Reporting_Reader' % Groups @= 'Performance_Corporate' );

	# -- Accès à toutes les phases hors LTP
	IF( SCAN( 'LTP' , Phase ) = 0 ); 

		CellPutS( 'READ', zCube , Phase , Groups ); 

	ENDIF;

	ItemSkip;

ENDIF;


# -- 10/06/2021 RSJC Le groupe User Strategy ne voit que les phases LTP_xxx_Strat_X qui ne sont pas visibles par les autres utilisateurs

IF( Groups @= 'User_Strategy' ) ; 

	# -- Accès uniquement aux phases LTP_xxx_Strat_X
	IF( SCAN( 'Strat' , Phase ) <> 0 ); 

		CellPutS( 'WRITE' , zCube , Phase , Groups ); 
	ENDIF;

# -- 03/12/2021 RSJC Le groupe User Strategy peut voir toutes les phases LTP, seules les LTP_xxx_Strat_X sont en écriture
	#IF( SCAN('LTP', Phase) <>0 & SCAN('ALL', Phase) > 0 ); 
	IF( SCAN('LTP', Phase) <>0 & SCAN( 'Strat' , Phase ) = 0); 
		CellPutS( 'READ' , zCube , Phase , Groups ); 
	ENDIF;

	ItemSkip;

ENDIF; 






# --  Fin Ajout des modifications liées à la refonte de la sécurité


##IF( SUBST( Groups , 1 , 7 ) @= 'Report_'  % SUBST( Groups , 1 , 5 ) @= 'Cube_');
##  itemskip;  
##ENDIF;

#['R_LTP'] = S: IF ( SCAN( '_VC' , !Phase )<> 0 , 'WRITE', 'READ') ;
##IF(Groups @= 'R_LTP');
##  IF ( SCAN( '_VC' , Phase ) <> 0 );
##    CellPutS('WRITE', zCube , Phase, Groups );
##  ELSE;
##    CellPutS('READ', zCube , Phase, Groups );
##  ENDIF;
##  itemskip;  
##ENDIF;

# IF (!}Groups @='W_GIE' ,'WRITE',	CONTINUE);
##IF(Groups @= 'W_GIE');
##  CellPutS('WRITE', zCube , Phase, Groups );
##  itemskip;  
##ENDIF;

IF( SCAN( 'Corporate' , Groups )<>0 );

  IF( SUBST( Groups , 1 , 2 ) @= 'R_');
    CellPutS('READ', zCube , Phase, Groups );
  ELSEIF( SUBST( Groups , 1 , 2 ) @= 'W_');
    CellPutS('WRITE', zCube , Phase, Groups );
  ENDIF;
ELSE;
  IF( SCAN( '_VC' , Phase )<>0 % Phase@= 'MAN_AJUST');
    IF( SUBST( Groups , 1 , 2 ) @= 'R_');
      CellPutS('READ', zCube , Phase, Groups );
    ELSEIF( SUBST( Groups , 1 , 2 ) @= 'W_');
      CellPutS('WRITE', zCube , Phase, Groups );
    ENDIF;
  ELSE;
  IF( SCAN( '_Strat_' , Phase )=0);
    CellPutS('READ', zCube , Phase, Groups );
  ENDIF;
  ENDIF;
ENDIF;



#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


# -- Destruction de la Vue Source 
ViewDestroy( zCube , zView );

# -- Destruction du sous ensemble Source Phase
zDim = 'Phase' ;
SubsetDestroy( zDim , zSubset );
#endregion